
GestureSync_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08009e28  08009e28  00019e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a030  0800a030  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a038  0800a038  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a040  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004448  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200044c0  200044c0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b2d5  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043a6  00000000  00000000  0003b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001628  00000000  00000000  0003f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000112d  00000000  00000000  00040d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000251b5  00000000  00000000  00041ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d599  00000000  00000000  00067072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d75e5  00000000  00000000  0008460b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006270  00000000  00000000  0015bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00161e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e0c 	.word	0x08009e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009e0c 	.word	0x08009e0c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <CalculateAccMPU6050>:
Struct_Angle Angle;
MPU6050_t MPU6050;


void CalculateAccMPU6050(MPU6050_t* MPU6050)
{
 8000e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	MPU6050->acc_roll  = atan(-MPU6050->Ax / sqrt(pow(MPU6050->Ay,2) + pow(MPU6050->Az,2))) * RADIAN_TO_DEGREE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e58:	4614      	mov	r4, r2
 8000e5a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e64:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8000fb8 <CalculateAccMPU6050+0x170>
 8000e68:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6c:	eef0 0a67 	vmov.f32	s1, s15
 8000e70:	f007 fec6 	bl	8008c00 <pow>
 8000e74:	ec59 8b10 	vmov	r8, r9, d0
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ed93 7b06 	vldr	d7, [r3, #24]
 8000e7e:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8000fb8 <CalculateAccMPU6050+0x170>
 8000e82:	eeb0 0a47 	vmov.f32	s0, s14
 8000e86:	eef0 0a67 	vmov.f32	s1, s15
 8000e8a:	f007 feb9 	bl	8008c00 <pow>
 8000e8e:	ec53 2b10 	vmov	r2, r3, d0
 8000e92:	4640      	mov	r0, r8
 8000e94:	4649      	mov	r1, r9
 8000e96:	f7ff f9a1 	bl	80001dc <__adddf3>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	ec43 2b17 	vmov	d7, r2, r3
 8000ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea6:	eef0 0a67 	vmov.f32	s1, s15
 8000eaa:	f007 ff19 	bl	8008ce0 <sqrt>
 8000eae:	ec53 2b10 	vmov	r2, r3, d0
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	f7ff fc71 	bl	800079c <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	ec43 2b17 	vmov	d7, r2, r3
 8000ec2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ec6:	eef0 0a67 	vmov.f32	s1, s15
 8000eca:	f007 ff35 	bl	8008d38 <atan>
 8000ece:	ec51 0b10 	vmov	r0, r1, d0
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <CalculateAccMPU6050+0x180>)
 8000ed8:	f7ff fb36 	bl	8000548 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	a336      	add	r3, pc, #216	; (adr r3, 8000fc0 <CalculateAccMPU6050+0x178>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f7ff fc57 	bl	800079c <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fdd7 	bl	8000aa8 <__aeabi_d2f>
 8000efa:	4602      	mov	r2, r0
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	671a      	str	r2, [r3, #112]	; 0x70
	MPU6050->acc_pitch = atan(MPU6050->Ay / sqrt(pow(MPU6050->Ax,2) + pow(MPU6050->Az,2))) * RADIAN_TO_DEGREE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	ed93 7b02 	vldr	d7, [r3, #8]
 8000f0c:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8000fb8 <CalculateAccMPU6050+0x170>
 8000f10:	eeb0 0a47 	vmov.f32	s0, s14
 8000f14:	eef0 0a67 	vmov.f32	s1, s15
 8000f18:	f007 fe72 	bl	8008c00 <pow>
 8000f1c:	ec59 8b10 	vmov	r8, r9, d0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 7b06 	vldr	d7, [r3, #24]
 8000f26:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8000fb8 <CalculateAccMPU6050+0x170>
 8000f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f2e:	eef0 0a67 	vmov.f32	s1, s15
 8000f32:	f007 fe65 	bl	8008c00 <pow>
 8000f36:	ec53 2b10 	vmov	r2, r3, d0
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	f7ff f94d 	bl	80001dc <__adddf3>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	ec43 2b17 	vmov	d7, r2, r3
 8000f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f4e:	eef0 0a67 	vmov.f32	s1, s15
 8000f52:	f007 fec5 	bl	8008ce0 <sqrt>
 8000f56:	ec53 2b10 	vmov	r2, r3, d0
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f7ff fc1d 	bl	800079c <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	ec43 2b17 	vmov	d7, r2, r3
 8000f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6e:	eef0 0a67 	vmov.f32	s1, s15
 8000f72:	f007 fee1 	bl	8008d38 <atan>
 8000f76:	ec51 0b10 	vmov	r0, r1, d0
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <CalculateAccMPU6050+0x180>)
 8000f80:	f7ff fae2 	bl	8000548 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	a30c      	add	r3, pc, #48	; (adr r3, 8000fc0 <CalculateAccMPU6050+0x178>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fc03 	bl	800079c <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd83 	bl	8000aa8 <__aeabi_d2f>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	675a      	str	r2, [r3, #116]	; 0x74
	//	MPU6050->acc_yaw = atan(sqrt(pow(MPU6050->acc_x, 2) + pow(MPU6050->acc_y, 2)) / MPU6050->acc_z) * RADIAN_TO_DEGREE;
	//Can't use MPU6050->acc_yaw there is no reliability. It's based on my personal experimental view.
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40000000 	.word	0x40000000
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	400921fb 	.word	0x400921fb
 8000fc8:	40668000 	.word	0x40668000

08000fcc <CalculateCompliFilter>:
//	MPU6050->gyro_pitch += MPU6050->gyro_x * dt;
//	MPU6050->gyro_yaw   += MPU6050->gyro_z * dt;
//}

void CalculateCompliFilter(MPU6050_t* MPU6050)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	CalculateAccMPU6050(MPU6050); //Prepare Acc MPU6050 before using Complimentary Filter.
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff37 	bl	8000e48 <CalculateAccMPU6050>

	double dt = (double)(HAL_GetTick() - timer) / 1000;
 8000fda:	f001 fb43 	bl	8002664 <HAL_GetTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa37 	bl	8000454 <__aeabi_ui2d>
 8000fe6:	4b57      	ldr	r3, [pc, #348]	; (8001144 <CalculateCompliFilter+0x178>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f7ff f8f4 	bl	80001d8 <__aeabi_dsub>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <CalculateCompliFilter+0x17c>)
 8000ffe:	f7ff fbcd 	bl	800079c <__aeabi_ddiv>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	e9c7 2302 	strd	r2, r3, [r7, #8]
	timer = HAL_GetTick();
 800100a:	f001 fb2b 	bl	8002664 <HAL_GetTick>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa1f 	bl	8000454 <__aeabi_ui2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	494a      	ldr	r1, [pc, #296]	; (8001144 <CalculateCompliFilter+0x178>)
 800101c:	e9c1 2300 	strd	r2, r3, [r1]
	static float alpha = 0.96f;
	MPU6050->AngleX = alpha*(MPU6050->Gy * dt + MPU6050->AngleX) + (1-alpha) * MPU6050->acc_roll;
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <CalculateCompliFilter+0x180>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa37 	bl	8000498 <__aeabi_f2d>
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001038:	f7ff fa86 	bl	8000548 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800104a:	f7ff f8c7 	bl	80001dc <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	4b3a      	ldr	r3, [pc, #232]	; (800114c <CalculateCompliFilter+0x180>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800106c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa0b 	bl	8000498 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f8a7 	bl	80001dc <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	MPU6050->AngleY = alpha*(MPU6050->Gx * dt + MPU6050->AngleY) + (1-alpha) * MPU6050->acc_pitch;
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <CalculateCompliFilter+0x180>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f9fb 	bl	8000498 <__aeabi_f2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80010c2:	f7ff f88b 	bl	80001dc <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff fa3b 	bl	8000548 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4614      	mov	r4, r2
 80010d8:	461d      	mov	r5, r3
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <CalculateCompliFilter+0x180>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80010ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f2:	ee17 0a90 	vmov	r0, s15
 80010f6:	f7ff f9cf 	bl	8000498 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f86b 	bl	80001dc <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	MPU6050->AngleZ = MPU6050->AngleZ + MPU6050->Gz * dt;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800111c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4620      	mov	r0, r4
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff f856 	bl	80001dc <__adddf3>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	20000120 	.word	0x20000120
 8001148:	408f4000 	.word	0x408f4000
 800114c:	20000000 	.word	0x20000000

08001150 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <delay+0x30>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001162:	bf00      	nop
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <delay+0x30>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3f9      	bcc.n	8001164 <delay+0x14>
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000490 	.word	0x20000490

08001184 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	2102      	movs	r1, #2
 8001198:	4820      	ldr	r0, [pc, #128]	; (800121c <send_to_lcd+0x98>)
 800119a:	f002 f92b 	bl	80033f4 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	481b      	ldr	r0, [pc, #108]	; (800121c <send_to_lcd+0x98>)
 80011b0:	f002 f920 	bl	80033f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <send_to_lcd+0x98>)
 80011c6:	f002 f915 	bl	80033f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	2120      	movs	r1, #32
 80011da:	4810      	ldr	r0, [pc, #64]	; (800121c <send_to_lcd+0x98>)
 80011dc:	f002 f90a 	bl	80033f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	2110      	movs	r1, #16
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <send_to_lcd+0x98>)
 80011ee:	f002 f901 	bl	80033f4 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2108      	movs	r1, #8
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <send_to_lcd+0x98>)
 80011f8:	f002 f8fc 	bl	80033f4 <HAL_GPIO_WritePin>
	delay (20);
 80011fc:	2014      	movs	r0, #20
 80011fe:	f7ff ffa7 	bl	8001150 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <send_to_lcd+0x98>)
 8001208:	f002 f8f4 	bl	80033f4 <HAL_GPIO_WritePin>
	delay (20);
 800120c:	2014      	movs	r0, #20
 800120e:	f7ff ff9f 	bl	8001150 <delay>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020c00 	.word	0x40020c00

08001220 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffa5 	bl	8001184 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff9c 	bl	8001184 <send_to_lcd>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff8b 	bl	8001184 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff82 	bl	8001184 <send_to_lcd>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <lcd_clear>:

void lcd_clear (void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff ffc7 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(2);
 8001292:	2002      	movs	r0, #2
 8001294:	f001 f9f2 	bl	800267c <HAL_Delay>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    switch (row)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <lcd_put_cur+0x18>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <lcd_put_cur+0x22>
 80012b2:	e009      	b.n	80012c8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ba:	603b      	str	r3, [r7, #0]
            break;
 80012bc:	e004      	b.n	80012c8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012c4:	603b      	str	r3, [r7, #0]
            break;
 80012c6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ffa7 	bl	8001220 <lcd_send_cmd>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <lcd_init>:


void lcd_init (void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012de:	2032      	movs	r0, #50	; 0x32
 80012e0:	f001 f9cc 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x30);
 80012e4:	2030      	movs	r0, #48	; 0x30
 80012e6:	f7ff ff9b 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80012ea:	2005      	movs	r0, #5
 80012ec:	f001 f9c6 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x30);
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f7ff ff95 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012f6:	2001      	movs	r0, #1
 80012f8:	f001 f9c0 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x30);
 80012fc:	2030      	movs	r0, #48	; 0x30
 80012fe:	f7ff ff8f 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f001 f9ba 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001308:	2020      	movs	r0, #32
 800130a:	f7ff ff89 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(10);
 800130e:	200a      	movs	r0, #10
 8001310:	f001 f9b4 	bl	800267c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001314:	2028      	movs	r0, #40	; 0x28
 8001316:	f7ff ff83 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f001 f9ae 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001320:	2008      	movs	r0, #8
 8001322:	f7ff ff7d 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(1);
 8001326:	2001      	movs	r0, #1
 8001328:	f001 f9a8 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff ff77 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f001 f9a2 	bl	800267c <HAL_Delay>
	HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f001 f99f 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800133e:	2006      	movs	r0, #6
 8001340:	f7ff ff6e 	bl	8001220 <lcd_send_cmd>
	HAL_Delay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f001 f999 	bl	800267c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800134a:	200c      	movs	r0, #12
 800134c:	f7ff ff68 	bl	8001220 <lcd_send_cmd>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800135c:	e006      	b.n	800136c <lcd_send_string+0x18>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff74 	bl	8001254 <lcd_send_data>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f4      	bne.n	800135e <lcd_send_string+0xa>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <ConditionSelect>:
#include "gpio.h"
#include "string.h"
#include "LCD1602.h"

void ConditionSelect(MPU6050_t* mpu6050)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    if((mpu6050->AngleY>=40 && mpu6050->AngleY<=150) /*&& (mpu6050->AngleZ<=(25) && mpu6050->AngleZ>=(-25))*/)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <ConditionSelect+0x138>)
 8001394:	f7ff fb5e 	bl	8000a54 <__aeabi_dcmpge>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01c      	beq.n	80013d8 <ConditionSelect+0x58>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80013a4:	a342      	add	r3, pc, #264	; (adr r3, 80014b0 <ConditionSelect+0x130>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff fb49 	bl	8000a40 <__aeabi_dcmple>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d011      	beq.n	80013d8 <ConditionSelect+0x58>
    {
//    	uint8_t str1[]="Raising the baton vertically\n";
//    	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 100);
    	uint8_t buf[2]= "1\n";
 80013b4:	f640 2331 	movw	r3, #2609	; 0xa31
 80013b8:	82bb      	strh	r3, [r7, #20]
    	HAL_UART_Transmit_DMA(&huart4, buf, sizeof(buf));
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2202      	movs	r2, #2
 80013c0:	4619      	mov	r1, r3
 80013c2:	483e      	ldr	r0, [pc, #248]	; (80014bc <ConditionSelect+0x13c>)
 80013c4:	f004 fb2a 	bl	8005a1c <HAL_UART_Transmit_DMA>
  	    lcd_put_cur(1, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff66 	bl	800129c <lcd_put_cur>
  	    lcd_send_string("All Stop        ");
 80013d0:	483b      	ldr	r0, [pc, #236]	; (80014c0 <ConditionSelect+0x140>)
 80013d2:	f7ff ffbf 	bl	8001354 <lcd_send_string>
    {
 80013d6:	e067      	b.n	80014a8 <ConditionSelect+0x128>
    }
    else if((mpu6050->AngleY>=(-20) && mpu6050->AngleY<=20) && (mpu6050->Gz>=60 || mpu6050->Gz<=(-60)))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <ConditionSelect+0x144>)
 80013e4:	f7ff fb36 	bl	8000a54 <__aeabi_dcmpge>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d032      	beq.n	8001454 <ConditionSelect+0xd4>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <ConditionSelect+0x148>)
 80013fa:	f7ff fb21 	bl	8000a40 <__aeabi_dcmple>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d027      	beq.n	8001454 <ConditionSelect+0xd4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <ConditionSelect+0x14c>)
 8001410:	f7ff fb20 	bl	8000a54 <__aeabi_dcmpge>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10a      	bne.n	8001430 <ConditionSelect+0xb0>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <ConditionSelect+0x150>)
 8001426:	f7ff fb0b 	bl	8000a40 <__aeabi_dcmple>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d011      	beq.n	8001454 <ConditionSelect+0xd4>
    {
//    	uint8_t str1[]="Holding the baton horizontally and swing it continuously\n";
//    	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 100);
    	uint8_t buf[2]= "1\n";
 8001430:	f640 2331 	movw	r3, #2609	; 0xa31
 8001434:	823b      	strh	r3, [r7, #16]
    	HAL_UART_Transmit_DMA(&huart4, buf, sizeof(buf));
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2202      	movs	r2, #2
 800143c:	4619      	mov	r1, r3
 800143e:	481f      	ldr	r0, [pc, #124]	; (80014bc <ConditionSelect+0x13c>)
 8001440:	f004 faec 	bl	8005a1c <HAL_UART_Transmit_DMA>
  	    lcd_put_cur(1, 0);
 8001444:	2100      	movs	r1, #0
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff ff28 	bl	800129c <lcd_put_cur>
  	    lcd_send_string("Go              ");
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <ConditionSelect+0x154>)
 800144e:	f7ff ff81 	bl	8001354 <lcd_send_string>
    {
 8001452:	e029      	b.n	80014a8 <ConditionSelect+0x128>
    }
    else if((mpu6050->AngleY>=(-20) && mpu6050->AngleY<=20) /*&& (mpu6050->AngleZ<=(25) && mpu6050->AngleZ>=(-25))*/)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <ConditionSelect+0x144>)
 8001460:	f7ff faf8 	bl	8000a54 <__aeabi_dcmpge>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d100      	bne.n	800146c <ConditionSelect+0xec>
    	uint8_t buf[2]= "2\n";
    	HAL_UART_Transmit_DMA(&huart4, buf, sizeof(buf));
  	    lcd_put_cur(1, 0);
  	    lcd_send_string("Stop            ");
    }
}
 800146a:	e01d      	b.n	80014a8 <ConditionSelect+0x128>
    else if((mpu6050->AngleY>=(-20) && mpu6050->AngleY<=20) /*&& (mpu6050->AngleZ<=(25) && mpu6050->AngleZ>=(-25))*/)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <ConditionSelect+0x148>)
 8001478:	f7ff fae2 	bl	8000a40 <__aeabi_dcmple>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d100      	bne.n	8001484 <ConditionSelect+0x104>
}
 8001482:	e011      	b.n	80014a8 <ConditionSelect+0x128>
    	uint8_t buf[2]= "2\n";
 8001484:	f640 2332 	movw	r3, #2610	; 0xa32
 8001488:	81bb      	strh	r3, [r7, #12]
    	HAL_UART_Transmit_DMA(&huart4, buf, sizeof(buf));
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2202      	movs	r2, #2
 8001490:	4619      	mov	r1, r3
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <ConditionSelect+0x13c>)
 8001494:	f004 fac2 	bl	8005a1c <HAL_UART_Transmit_DMA>
  	    lcd_put_cur(1, 0);
 8001498:	2100      	movs	r1, #0
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fefe 	bl	800129c <lcd_put_cur>
  	    lcd_send_string("Stop            ");
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <ConditionSelect+0x158>)
 80014a2:	f7ff ff57 	bl	8001354 <lcd_send_string>
}
 80014a6:	e7ff      	b.n	80014a8 <ConditionSelect+0x128>
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	00000000 	.word	0x00000000
 80014b4:	4062c000 	.word	0x4062c000
 80014b8:	40440000 	.word	0x40440000
 80014bc:	200004d8 	.word	0x200004d8
 80014c0:	08009e28 	.word	0x08009e28
 80014c4:	c0340000 	.word	0xc0340000
 80014c8:	40340000 	.word	0x40340000
 80014cc:	404e0000 	.word	0x404e0000
 80014d0:	c04e0000 	.word	0xc04e0000
 80014d4:	08009e3c 	.word	0x08009e3c
 80014d8:	08009e50 	.word	0x08009e50

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_DMA_Init+0x4c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <MX_DMA_Init+0x4c>)
 80014ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_DMA_Init+0x4c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2105      	movs	r1, #5
 8001502:	200d      	movs	r0, #13
 8001504:	f001 f996 	bl	8002834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001508:	200d      	movs	r0, #13
 800150a:	f001 f9af 	bl	800286c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2105      	movs	r1, #5
 8001512:	200f      	movs	r0, #15
 8001514:	f001 f98e 	bl	8002834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001518:	200f      	movs	r0, #15
 800151a:	f001 f9a7 	bl	800286c <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <vApplicationGetIdleTaskMemory+0x2c>)
 800153c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <vApplicationGetIdleTaskMemory+0x30>)
 8001542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000144 	.word	0x20000144
 800155c:	200001e4 	.word	0x200001e4

08001560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b0aa      	sub	sp, #168	; 0xa8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	MyEvent01Handle = xEventGroupCreate();
 8001566:	f005 fcfc 	bl	8006f62 <xEventGroupCreate>
 800156a:	4603      	mov	r3, r0
 800156c:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <MX_FREERTOS_Init+0xf8>)
 800156e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MPU6050Task */
  osThreadDef(MPU6050Task, StartMPU6050Task, osPriorityHigh, 0, 128);
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <MX_FREERTOS_Init+0xfc>)
 8001572:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001576:	461d      	mov	r5, r3
 8001578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 8001584:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fc89 	bl	8006ea2 <osThreadCreate>
 8001590:	4603      	mov	r3, r0
 8001592:	4a33      	ldr	r2, [pc, #204]	; (8001660 <MX_FREERTOS_Init+0x100>)
 8001594:	6013      	str	r3, [r2, #0]

  /* definition and creation of LcdTask */
  osThreadDef(LcdTask, StartLcdTask, osPriorityIdle, 0, 128);
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <MX_FREERTOS_Init+0x104>)
 8001598:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800159c:	461d      	mov	r5, r3
 800159e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LcdTaskHandle = osThreadCreate(osThread(LcdTask), NULL);
 80015aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fc76 	bl	8006ea2 <osThreadCreate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a2b      	ldr	r2, [pc, #172]	; (8001668 <MX_FREERTOS_Init+0x108>)
 80015ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of SwitchTask */
  osThreadDef(SwitchTask, StartSwitchTask, osPriorityAboveNormal, 0, 128);
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <MX_FREERTOS_Init+0x10c>)
 80015be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80015c2:	461d      	mov	r5, r3
 80015c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SwitchTaskHandle = osThreadCreate(osThread(SwitchTask), NULL);
 80015d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fc63 	bl	8006ea2 <osThreadCreate>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a24      	ldr	r2, [pc, #144]	; (8001670 <MX_FREERTOS_Init+0x110>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TrafficTask */
  osThreadDef(TrafficTask, StartTrafficTask, osPriorityIdle, 0, 128);
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_FREERTOS_Init+0x114>)
 80015e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TrafficTaskHandle = osThreadCreate(osThread(TrafficTask), NULL);
 80015f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 fc50 	bl	8006ea2 <osThreadCreate>
 8001602:	4603      	mov	r3, r0
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <MX_FREERTOS_Init+0x118>)
 8001606:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReceiveTask */
  osThreadDef(ReceiveTask, StartRecieveTask, osPriorityNormal, 0, 128);
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_FREERTOS_Init+0x11c>)
 800160a:	f107 041c 	add.w	r4, r7, #28
 800160e:	461d      	mov	r5, r3
 8001610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiveTaskHandle = osThreadCreate(osThread(ReceiveTask), NULL);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f005 fc3d 	bl	8006ea2 <osThreadCreate>
 8001628:	4603      	mov	r3, r0
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <MX_FREERTOS_Init+0x120>)
 800162c:	6013      	str	r3, [r2, #0]

  /* definition and creation of IWDG_Monitor */
  osThreadDef(IWDG_Monitor, StartIWDG_Monitor, osPriorityRealtime, 0, 128);
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_FREERTOS_Init+0x124>)
 8001630:	463c      	mov	r4, r7
 8001632:	461d      	mov	r5, r3
 8001634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IWDG_MonitorHandle = osThreadCreate(osThread(IWDG_Monitor), NULL);
 8001640:	463b      	mov	r3, r7
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fc2c 	bl	8006ea2 <osThreadCreate>
 800164a:	4603      	mov	r3, r0
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <MX_FREERTOS_Init+0x128>)
 800164e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001650:	bf00      	nop
 8001652:	37a8      	adds	r7, #168	; 0xa8
 8001654:	46bd      	mov	sp, r7
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	20000128 	.word	0x20000128
 800165c:	08009e70 	.word	0x08009e70
 8001660:	2000012c 	.word	0x2000012c
 8001664:	08009e94 	.word	0x08009e94
 8001668:	20000130 	.word	0x20000130
 800166c:	08009ebc 	.word	0x08009ebc
 8001670:	20000134 	.word	0x20000134
 8001674:	08009ee4 	.word	0x08009ee4
 8001678:	20000138 	.word	0x20000138
 800167c:	08009f0c 	.word	0x08009f0c
 8001680:	2000013c 	.word	0x2000013c
 8001684:	08009f38 	.word	0x08009f38
 8001688:	20000140 	.word	0x20000140

0800168c <StartMPU6050Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMPU6050Task */
void StartMPU6050Task(void const * argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMPU6050Task */
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_Read_All(&hi2c3, &MPU6050);
 8001694:	4909      	ldr	r1, [pc, #36]	; (80016bc <StartMPU6050Task+0x30>)
 8001696:	480a      	ldr	r0, [pc, #40]	; (80016c0 <StartMPU6050Task+0x34>)
 8001698:	f000 fb46 	bl	8001d28 <MPU6050_Read_All>
	  //Calibration
	  MPU6050_Correction(&MPU6050);
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <StartMPU6050Task+0x30>)
 800169e:	f000 fc95 	bl	8001fcc <MPU6050_Correction>
	  //CalculateCompliFilter
	  CalculateCompliFilter(&MPU6050);
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <StartMPU6050Task+0x30>)
 80016a4:	f7ff fc92 	bl	8000fcc <CalculateCompliFilter>

//	  char data[100];
//	  gcvt(MPU6050.AngleY, 6, data);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);

	  osDelay(10);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f005 fc46 	bl	8006f3a <osDelay>
	  xEventGroupSetBits(MyEvent01Handle, BIT_Task01_EVENT);
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <StartMPU6050Task+0x38>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2101      	movs	r1, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fd3d 	bl	8007134 <xEventGroupSetBits>
	  MPU6050_Read_All(&hi2c3, &MPU6050);
 80016ba:	e7eb      	b.n	8001694 <StartMPU6050Task+0x8>
 80016bc:	20000098 	.word	0x20000098
 80016c0:	200003e4 	.word	0x200003e4
 80016c4:	20000128 	.word	0x20000128

080016c8 <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void const * argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLcdTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, receiveData, sizeof(receiveData), HAL_MAX_DELAY);
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d4:	2202      	movs	r2, #2
 80016d6:	4911      	ldr	r1, [pc, #68]	; (800171c <StartLcdTask+0x54>)
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <StartLcdTask+0x58>)
 80016da:	f004 f913 	bl	8005904 <HAL_UART_Transmit>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80016de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e2:	2001      	movs	r0, #1
 80016e4:	f006 fc42 	bl	8007f6c <ulTaskNotifyTake>

	  lcd_put_cur(0, 0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fdd6 	bl	800129c <lcd_put_cur>
	  lcd_send_string("CAR:            ");
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <StartLcdTask+0x5c>)
 80016f2:	f7ff fe2f 	bl	8001354 <lcd_send_string>
	  lcd_put_cur(0, 5);
 80016f6:	2105      	movs	r1, #5
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fdcf 	bl	800129c <lcd_put_cur>
	  lcd_send_string((char*)receiveData);
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <StartLcdTask+0x54>)
 8001700:	f7ff fe28 	bl	8001354 <lcd_send_string>

	  receiveData[0] = '\0';
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <StartLcdTask+0x54>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	  receiveData[1] = '\0';
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <StartLcdTask+0x54>)
 800170c:	2200      	movs	r2, #0
 800170e:	705a      	strb	r2, [r3, #1]

//	  uint8_t str2[]="LCD\n";
//	  HAL_UART_Transmit(&huart2, str2, sizeof(str2), HAL_MAX_DELAY);

	  osDelay(300);
 8001710:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001714:	f005 fc11 	bl	8006f3a <osDelay>
	  HAL_UART_Transmit(&huart2, receiveData, sizeof(receiveData), HAL_MAX_DELAY);
 8001718:	e7da      	b.n	80016d0 <StartLcdTask+0x8>
 800171a:	bf00      	nop
 800171c:	20000444 	.word	0x20000444
 8001720:	20000520 	.word	0x20000520
 8001724:	08009f54 	.word	0x08009f54

08001728 <StartSwitchTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSwitchTask */
void StartSwitchTask(void const * argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSwitchTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(15);
 8001730:	200f      	movs	r0, #15
 8001732:	f006 f80b 	bl	800774c <vTaskDelay>
	  if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)){
 8001736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <StartSwitchTask+0x58>)
 800173c:	f001 fe42 	bl	80033c4 <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <StartSwitchTask+0x44>
		  vTaskDelay(2000);
 8001746:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800174a:	f005 ffff 	bl	800774c <vTaskDelay>
		  if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)){
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	480b      	ldr	r0, [pc, #44]	; (8001780 <StartSwitchTask+0x58>)
 8001754:	f001 fe36 	bl	80033c4 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <StartSwitchTask+0x44>
			  xTaskNotifyGive(TrafficTaskHandle);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <StartSwitchTask+0x5c>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	2300      	movs	r3, #0
 8001764:	2202      	movs	r2, #2
 8001766:	2100      	movs	r1, #0
 8001768:	f006 fc4c 	bl	8008004 <xTaskGenericNotify>
		  }
	  }

	  osDelay(50);
 800176c:	2032      	movs	r0, #50	; 0x32
 800176e:	f005 fbe4 	bl	8006f3a <osDelay>
	  xEventGroupSetBits(MyEvent01Handle, BIT_Task02_EVENT);
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <StartSwitchTask+0x60>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f005 fcdb 	bl	8007134 <xEventGroupSetBits>
	  vTaskDelay(15);
 800177e:	e7d7      	b.n	8001730 <StartSwitchTask+0x8>
 8001780:	40020800 	.word	0x40020800
 8001784:	20000138 	.word	0x20000138
 8001788:	20000128 	.word	0x20000128

0800178c <StartTrafficTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrafficTask */
void StartTrafficTask(void const * argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrafficTask */
  /* Infinite loop */
  for(;;)
  {
	  //wait for a Task Notification from Button Task
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001798:	2001      	movs	r0, #1
 800179a:	f006 fbe7 	bl	8007f6c <ulTaskNotifyTake>
	  ConditionSelect(&MPU6050);
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <StartTrafficTask+0x24>)
 80017a0:	f7ff fdee 	bl	8001380 <ConditionSelect>

//	  uint8_t str4[]="Traffic\n";
//	  HAL_UART_Transmit(&huart2, str4, sizeof(str4), HAL_MAX_DELAY);

	  osDelay(300);
 80017a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017a8:	f005 fbc7 	bl	8006f3a <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80017ac:	e7f2      	b.n	8001794 <StartTrafficTask+0x8>
 80017ae:	bf00      	nop
 80017b0:	20000098 	.word	0x20000098

080017b4 <StartRecieveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecieveTask */
void StartRecieveTask(void const * argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecieveTask */
  /* Infinite loop */
  for(;;)
  {
	  if(receiveData[0]>='0'){
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <StartRecieveTask+0x40>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b2f      	cmp	r3, #47	; 0x2f
 80017c2:	d90d      	bls.n	80017e0 <StartRecieveTask+0x2c>
		  lcd_put_cur(0, 0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fd68 	bl	800129c <lcd_put_cur>
		  lcd_send_string("CAR:   ");
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <StartRecieveTask+0x44>)
 80017ce:	f7ff fdc1 	bl	8001354 <lcd_send_string>
		  xTaskNotifyGive(LcdTaskHandle);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <StartRecieveTask+0x48>)
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	2202      	movs	r2, #2
 80017da:	2100      	movs	r1, #0
 80017dc:	f006 fc12 	bl	8008004 <xTaskGenericNotify>
	  }
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiveData, sizeof(receiveData));
 80017e0:	2202      	movs	r2, #2
 80017e2:	4904      	ldr	r1, [pc, #16]	; (80017f4 <StartRecieveTask+0x40>)
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <StartRecieveTask+0x4c>)
 80017e6:	f004 f989 	bl	8005afc <HAL_UARTEx_ReceiveToIdle_DMA>

      osDelay(10);
 80017ea:	200a      	movs	r0, #10
 80017ec:	f005 fba5 	bl	8006f3a <osDelay>
	  if(receiveData[0]>='0'){
 80017f0:	e7e4      	b.n	80017bc <StartRecieveTask+0x8>
 80017f2:	bf00      	nop
 80017f4:	20000444 	.word	0x20000444
 80017f8:	08009f68 	.word	0x08009f68
 80017fc:	20000130 	.word	0x20000130
 8001800:	200004d8 	.word	0x200004d8

08001804 <StartIWDG_Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIWDG_Monitor */
void StartIWDG_Monitor(void const * argument)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIWDG_Monitor */
  EventBits_t xEvent;
  const TickType_t xTicksToWait = 6000 / portTICK_PERIOD_MS;
 800180c:	f241 7370 	movw	r3, #6000	; 0x1770
 8001810:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  xEvent = xEventGroupWaitBits(
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <StartIWDG_Monitor+0x34>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	2103      	movs	r1, #3
 8001820:	f005 fbba 	bl	8006f98 <xEventGroupWaitBits>
 8001824:	60b8      	str	r0, [r7, #8]
			  BIT_TaskALL_EVENT, //uxBitsToWaitFor
			  pdTRUE,	//xClearOnExit
			  pdTRUE,	//xWaitForAllBits
			  xTicksToWait
	  );
	  if((xEvent&(BIT_TaskALL_EVENT)) == (BIT_TaskALL_EVENT)){
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b03      	cmp	r3, #3
 800182e:	d1f0      	bne.n	8001812 <StartIWDG_Monitor+0xe>
//	  	  uint8_t str5[]="Woof Woof\n";
//	  	  HAL_UART_Transmit(&huart2, str5, sizeof(str5), HAL_MAX_DELAY);
		  HAL_IWDG_Refresh(&hiwdg);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <StartIWDG_Monitor+0x38>)
 8001832:	f002 fe5f 	bl	80044f4 <HAL_IWDG_Refresh>
	  xEvent = xEventGroupWaitBits(
 8001836:	e7ec      	b.n	8001812 <StartIWDG_Monitor+0xe>
 8001838:	20000128 	.word	0x20000128
 800183c:	20000438 	.word	0x20000438

08001840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <MX_GPIO_Init+0xf8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a36      	ldr	r2, [pc, #216]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <MX_GPIO_Init+0xf8>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a28      	ldr	r2, [pc, #160]	; (8001938 <MX_GPIO_Init+0xf8>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <MX_GPIO_Init+0xf8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_GPIO_Init+0xf8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a21      	ldr	r2, [pc, #132]	; (8001938 <MX_GPIO_Init+0xf8>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_GPIO_Init+0xf8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <MX_GPIO_Init+0xfc>)
 80018ce:	f001 fd91 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80018d2:	2200      	movs	r2, #0
 80018d4:	21fe      	movs	r1, #254	; 0xfe
 80018d6:	481a      	ldr	r0, [pc, #104]	; (8001940 <MX_GPIO_Init+0x100>)
 80018d8:	f001 fd8c 	bl	80033f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Button_Pin|MPU6050_Pin;
 80018dc:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <MX_GPIO_Init+0x104>)
 80018f2:	f001 fbcb 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <MX_GPIO_Init+0xfc>)
 8001910:	f001 fbbc 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001914:	23fe      	movs	r3, #254	; 0xfe
 8001916:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_GPIO_Init+0x100>)
 800192c:	f001 fbae 	bl	800308c <HAL_GPIO_Init>

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40020800 	.word	0x40020800

08001948 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C3_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C3_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C3_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C3_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C3_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C3_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C3_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C3_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C3_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C3_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C3_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C3_Init+0x50>)
 8001986:	f001 fd4f 	bl	8003428 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 f96b 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200003e4 	.word	0x200003e4
 800199c:	40005c00 	.word	0x40005c00
 80019a0:	00061a80 	.word	0x00061a80

080019a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <HAL_I2C_MspInit+0xc4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d14b      	bne.n	8001a5e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a04:	2312      	movs	r3, #18
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a10:	2304      	movs	r3, #4
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <HAL_I2C_MspInit+0xcc>)
 8001a1c:	f001 fb36 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a26:	2312      	movs	r3, #18
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a32:	2304      	movs	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <HAL_I2C_MspInit+0xd0>)
 8001a3e:	f001 fb25 	bl	800308c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40005c00 	.word	0x40005c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020000 	.word	0x40020000

08001a78 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_IWDG_Init+0x2c>)
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <MX_IWDG_Init+0x30>)
 8001a80:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_IWDG_Init+0x2c>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3000-1;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_IWDG_Init+0x2c>)
 8001a8a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a8e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_IWDG_Init+0x2c>)
 8001a92:	f002 fced 	bl	8004470 <HAL_IWDG_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001a9c:	f000 f8e5 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000438 	.word	0x20000438
 8001aa8:	40003000 	.word	0x40003000

08001aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab0:	f000 fda2 	bl	80025f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  receiveData[0] = '\0';
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <main+0xa8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
  receiveData[1] = '\0';
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <main+0xa8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	705a      	strb	r2, [r3, #1]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac0:	f000 f858 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_IWDG_Init();
 8001ac4:	f7ff ffd8 	bl	8001a78 <MX_IWDG_Init>
  MX_GPIO_Init();
 8001ac8:	f7ff feba 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 8001acc:	f7ff fd06 	bl	80014dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ad0:	f000 fc52 	bl	8002378 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001ad4:	f000 fbb4 	bl	8002240 <MX_TIM1_Init>
  MX_UART4_Init();
 8001ad8:	f000 fc24 	bl	8002324 <MX_UART4_Init>
  MX_I2C3_Init();
 8001adc:	f7ff ff34 	bl	8001948 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001ae0:	481d      	ldr	r0, [pc, #116]	; (8001b58 <main+0xac>)
 8001ae2:	f003 fa31 	bl	8004f48 <HAL_TIM_Base_Start>
  lcd_init();
 8001ae6:	f7ff fbf8 	bl	80012da <lcd_init>

  while (MPU6050_Init(&hi2c3) == 1){
 8001aea:	e010      	b.n	8001b0e <main+0x62>
// 	  printf("error!\n");
 	  lcd_put_cur(0, 0);
 8001aec:	2100      	movs	r1, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fbd4 	bl	800129c <lcd_put_cur>
 	  lcd_send_string("ERROR! RESTART");
 8001af4:	4819      	ldr	r0, [pc, #100]	; (8001b5c <main+0xb0>)
 8001af6:	f7ff fc2d 	bl	8001354 <lcd_send_string>
 	  HAL_Delay(500);
 8001afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001afe:	f000 fdbd 	bl	800267c <HAL_Delay>
 	  lcd_clear();
 8001b02:	f7ff fbc1 	bl	8001288 <lcd_clear>
 	  HAL_Delay(500);
 8001b06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b0a:	f000 fdb7 	bl	800267c <HAL_Delay>
  while (MPU6050_Init(&hi2c3) == 1){
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <main+0xb4>)
 8001b10:	f000 f8b0 	bl	8001c74 <MPU6050_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d0e8      	beq.n	8001aec <main+0x40>
   }
  MPU6050_Calibration(&MPU6050);
 8001b1a:	4812      	ldr	r0, [pc, #72]	; (8001b64 <main+0xb8>)
 8001b1c:	f000 f9d6 	bl	8001ecc <MPU6050_Calibration>

  lcd_put_cur(0, 0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fbba 	bl	800129c <lcd_put_cur>
  lcd_send_string("HELLO STM32");
 8001b28:	480f      	ldr	r0, [pc, #60]	; (8001b68 <main+0xbc>)
 8001b2a:	f7ff fc13 	bl	8001354 <lcd_send_string>
  HAL_Delay(2000);
 8001b2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b32:	f000 fda3 	bl	800267c <HAL_Delay>
  lcd_clear();
 8001b36:	f7ff fba7 	bl	8001288 <lcd_clear>
  lcd_send_string("CAR: #");
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <main+0xc0>)
 8001b3c:	f7ff fc0a 	bl	8001354 <lcd_send_string>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiveData, sizeof(receiveData));
 8001b40:	2202      	movs	r2, #2
 8001b42:	4904      	ldr	r1, [pc, #16]	; (8001b54 <main+0xa8>)
 8001b44:	480a      	ldr	r0, [pc, #40]	; (8001b70 <main+0xc4>)
 8001b46:	f003 ffd9 	bl	8005afc <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b4a:	f7ff fd09 	bl	8001560 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b4e:	f005 f9a1 	bl	8006e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <main+0xa6>
 8001b54:	20000444 	.word	0x20000444
 8001b58:	20000490 	.word	0x20000490
 8001b5c:	08009f70 	.word	0x08009f70
 8001b60:	200003e4 	.word	0x200003e4
 8001b64:	20000098 	.word	0x20000098
 8001b68:	08009f80 	.word	0x08009f80
 8001b6c:	08009f8c 	.word	0x08009f8c
 8001b70:	200004d8 	.word	0x200004d8

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	; 0x50
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	2230      	movs	r2, #48	; 0x30
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f006 ff5a 	bl	8008a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <SystemClock_Config+0xd0>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <SystemClock_Config+0xd0>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <SystemClock_Config+0xd0>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <SystemClock_Config+0xd4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <SystemClock_Config+0xd4>)
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <SystemClock_Config+0xd4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2309      	movs	r3, #9
 8001bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bde:	2302      	movs	r3, #2
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001be8:	2319      	movs	r3, #25
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fc88 	bl	8004514 <HAL_RCC_OscConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c0a:	f000 f82e 	bl	8001c6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0e:	230f      	movs	r3, #15
 8001c10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c12:	2302      	movs	r3, #2
 8001c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fee9 	bl	8004a04 <HAL_RCC_ClockConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c38:	f000 f817 	bl	8001c6a <Error_Handler>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3750      	adds	r7, #80	; 0x50
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c5e:	f000 fced 	bl	800263c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6e:	b672      	cpsid	i
}
 8001c70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <Error_Handler+0x8>

08001c74 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af04      	add	r7, sp, #16
 8001c7a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	f107 030f 	add.w	r3, r7, #15
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2275      	movs	r2, #117	; 0x75
 8001c8e:	21d0      	movs	r1, #208	; 0xd0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f001 fe07 	bl	80038a4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b68      	cmp	r3, #104	; 0x68
 8001c9a:	d13d      	bne.n	8001d18 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001ca0:	2364      	movs	r3, #100	; 0x64
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	f107 030e 	add.w	r3, r7, #14
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	226b      	movs	r2, #107	; 0x6b
 8001cb2:	21d0      	movs	r1, #208	; 0xd0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f001 fcfb 	bl	80036b0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001cbe:	2364      	movs	r3, #100	; 0x64
 8001cc0:	9302      	str	r3, [sp, #8]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	f107 030e 	add.w	r3, r7, #14
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2219      	movs	r2, #25
 8001cd0:	21d0      	movs	r1, #208	; 0xd0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f001 fcec 	bl	80036b0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	f107 030e 	add.w	r3, r7, #14
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	221c      	movs	r2, #28
 8001cee:	21d0      	movs	r1, #208	; 0xd0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 fcdd 	bl	80036b0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	f107 030e 	add.w	r3, r7, #14
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	221b      	movs	r2, #27
 8001d0c:	21d0      	movs	r1, #208	; 0xd0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f001 fcce 	bl	80036b0 <HAL_I2C_Mem_Write>
        return 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <MPU6050_Init+0xa6>
    }
    return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	0000      	movs	r0, r0
 8001d24:	0000      	movs	r0, r0
	...

08001d28 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af04      	add	r7, sp, #16
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001d32:	2364      	movs	r3, #100	; 0x64
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	230e      	movs	r3, #14
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	223b      	movs	r2, #59	; 0x3b
 8001d44:	21d0      	movs	r1, #208	; 0xd0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f001 fdac 	bl	80038a4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001d4c:	7a3b      	ldrb	r3, [r7, #8]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	7a7b      	ldrb	r3, [r7, #9]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	7afb      	ldrb	r3, [r7, #11]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001d70:	7b3b      	ldrb	r3, [r7, #12]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	7b7b      	ldrb	r3, [r7, #13]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001d90:	7c3b      	ldrb	r3, [r7, #16]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	7c7b      	ldrb	r3, [r7, #17]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001da2:	7cbb      	ldrb	r3, [r7, #18]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001db4:	7d3b      	ldrb	r3, [r7, #20]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	7d7b      	ldrb	r3, [r7, #21]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb51 	bl	8000474 <__aeabi_i2d>
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <MPU6050_Read_All+0x198>)
 8001dd8:	f7fe fce0 	bl	800079c <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	6839      	ldr	r1, [r7, #0]
 8001de2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb41 	bl	8000474 <__aeabi_i2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <MPU6050_Read_All+0x198>)
 8001df8:	f7fe fcd0 	bl	800079c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb31 	bl	8000474 <__aeabi_i2d>
 8001e12:	a327      	add	r3, pc, #156	; (adr r3, 8001eb0 <MPU6050_Read_All+0x188>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fcc0 	bl	800079c <__aeabi_ddiv>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001e26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e32:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001ec4 <MPU6050_Read_All+0x19c>
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001ec8 <MPU6050_Read_All+0x1a0>
 8001e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb10 	bl	8000474 <__aeabi_i2d>
 8001e54:	a318      	add	r3, pc, #96	; (adr r3, 8001eb8 <MPU6050_Read_All+0x190>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fc9f 	bl	800079c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb00 	bl	8000474 <__aeabi_i2d>
 8001e74:	a310      	add	r3, pc, #64	; (adr r3, 8001eb8 <MPU6050_Read_All+0x190>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fc8f 	bl	800079c <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe faf0 	bl	8000474 <__aeabi_i2d>
 8001e94:	a308      	add	r3, pc, #32	; (adr r3, 8001eb8 <MPU6050_Read_All+0x190>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fc7f 	bl	800079c <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
//        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
//    }
//    if (fabs(DataStruct->KalmanAngleY) > 90)
//        DataStruct->Gx = -DataStruct->Gx;
//    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}
 8001ea8:	bf00      	nop
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40cc2900 	.word	0x40cc2900
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40606000 	.word	0x40606000
 8001ec0:	40d00000 	.word	0x40d00000
 8001ec4:	43aa0000 	.word	0x43aa0000
 8001ec8:	42121eb8 	.word	0x42121eb8

08001ecc <MPU6050_Calibration>:

void MPU6050_Calibration(MPU6050_t* mpu6050)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	mpu6050->gyro_cali_x = 0.0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	679a      	str	r2, [r3, #120]	; 0x78
	mpu6050->gyro_cali_y = 0.0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	67da      	str	r2, [r3, #124]	; 0x7c
	mpu6050->gyro_cali_z = 0.0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	for(int i = 0; i < 2000; i++){
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e041      	b.n	8001f78 <MPU6050_Calibration+0xac>
		MPU6050_Read_All(&hi2c3, mpu6050);
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4833      	ldr	r0, [pc, #204]	; (8001fc4 <MPU6050_Calibration+0xf8>)
 8001ef8:	f7ff ff16 	bl	8001d28 <MPU6050_Read_All>
		mpu6050->gyro_cali_x += mpu6050->Gx;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fac9 	bl	8000498 <__aeabi_f2d>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f0c:	f7fe f966 	bl	80001dc <__adddf3>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fdc6 	bl	8000aa8 <__aeabi_d2f>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	679a      	str	r2, [r3, #120]	; 0x78
		mpu6050->gyro_cali_y += mpu6050->Gy;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fab6 	bl	8000498 <__aeabi_f2d>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f32:	f7fe f953 	bl	80001dc <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fdb3 	bl	8000aa8 <__aeabi_d2f>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	67da      	str	r2, [r3, #124]	; 0x7c
		mpu6050->gyro_cali_z += mpu6050->Gz;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe faa2 	bl	8000498 <__aeabi_f2d>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f5a:	f7fe f93f 	bl	80001dc <__adddf3>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fd9f 	bl	8000aa8 <__aeabi_d2f>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	for(int i = 0; i < 2000; i++){
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f7e:	dbb9      	blt.n	8001ef4 <MPU6050_Calibration+0x28>
	}

	mpu6050->gyro_cali_x /= 2000;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001f86:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001fc8 <MPU6050_Calibration+0xfc>
 8001f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	mpu6050->gyro_cali_y /= 2000;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8001f9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001fc8 <MPU6050_Calibration+0xfc>
 8001f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	mpu6050->gyro_cali_z /= 2000;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001fae:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001fc8 <MPU6050_Calibration+0xfc>
 8001fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200003e4 	.word	0x200003e4
 8001fc8:	44fa0000 	.word	0x44fa0000

08001fcc <MPU6050_Correction>:

void MPU6050_Correction(MPU6050_t* mpu6050)
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	mpu6050->Gx -= mpu6050->gyro_cali_x;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fa5a 	bl	8000498 <__aeabi_f2d>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4620      	mov	r0, r4
 8001fea:	4629      	mov	r1, r5
 8001fec:	f7fe f8f4 	bl	80001d8 <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mpu6050->Gy -= mpu6050->gyro_cali_y;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa47 	bl	8000498 <__aeabi_f2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f8e1 	bl	80001d8 <__aeabi_dsub>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mpu6050->Gz -= mpu6050->gyro_cali_z;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa33 	bl	8000498 <__aeabi_f2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4620      	mov	r0, r4
 8002038:	4629      	mov	r1, r5
 800203a:	f7fe f8cd 	bl	80001d8 <__aeabi_dsub>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bdb0      	pop	{r4, r5, r7, pc}

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_MspInit+0x54>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_MspInit+0x54>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_MspInit+0x54>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_MspInit+0x54>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_MspInit+0x54>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_MspInit+0x54>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	210f      	movs	r1, #15
 8002092:	f06f 0001 	mvn.w	r0, #1
 8002096:	f000 fbcd 	bl	8002834 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08e      	sub	sp, #56	; 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_InitTick+0xe8>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a33      	ldr	r2, [pc, #204]	; (8002190 <HAL_InitTick+0xe8>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_InitTick+0xe8>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d4:	f107 0210 	add.w	r2, r7, #16
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 feb0 	bl	8004e44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ee:	f002 fe81 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 80020f2:	6378      	str	r0, [r7, #52]	; 0x34
 80020f4:	e004      	b.n	8002100 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020f6:	f002 fe7d 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 80020fa:	4603      	mov	r3, r0
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	4a24      	ldr	r2, [pc, #144]	; (8002194 <HAL_InitTick+0xec>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9b      	lsrs	r3, r3, #18
 800210a:	3b01      	subs	r3, #1
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_InitTick+0xf0>)
 8002110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002114:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_InitTick+0xf0>)
 8002118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800211c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_InitTick+0xf0>)
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_InitTick+0xf0>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_InitTick+0xf0>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_InitTick+0xf0>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002136:	4818      	ldr	r0, [pc, #96]	; (8002198 <HAL_InitTick+0xf0>)
 8002138:	f002 feb6 	bl	8004ea8 <HAL_TIM_Base_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11b      	bne.n	8002182 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800214a:	4813      	ldr	r0, [pc, #76]	; (8002198 <HAL_InitTick+0xf0>)
 800214c:	f002 ff64 	bl	8005018 <HAL_TIM_Base_Start_IT>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002156:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800215a:	2b00      	cmp	r3, #0
 800215c:	d111      	bne.n	8002182 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800215e:	201c      	movs	r0, #28
 8002160:	f000 fb84 	bl	800286c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	d808      	bhi.n	800217c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800216a:	2200      	movs	r2, #0
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	201c      	movs	r0, #28
 8002170:	f000 fb60 	bl	8002834 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_InitTick+0xf4>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e002      	b.n	8002182 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002186:	4618      	mov	r0, r3
 8002188:	3738      	adds	r7, #56	; 0x38
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	431bde83 	.word	0x431bde83
 8002198:	20000448 	.word	0x20000448
 800219c:	20000008 	.word	0x20000008

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021a4:	e7fe      	b.n	80021a4 <NMI_Handler+0x4>

080021a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler+0x4>

080021b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler+0x4>

080021be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <DMA1_Stream2_IRQHandler+0x10>)
 80021d2:	f000 fcf1 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000568 	.word	0x20000568

080021e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA1_Stream4_IRQHandler+0x10>)
 80021e6:	f000 fce7 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200005c8 	.word	0x200005c8

080021f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <TIM2_IRQHandler+0x10>)
 80021fa:	f002 ff7d 	bl	80050f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000448 	.word	0x20000448

08002208 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <UART4_IRQHandler+0x10>)
 800220e:	f003 fcd3 	bl	8005bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200004d8 	.word	0x200004d8

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <MX_TIM1_Init+0x98>)
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <MX_TIM1_Init+0x9c>)
 8002260:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002264:	22a7      	movs	r2, #167	; 0xa7
 8002266:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <MX_TIM1_Init+0x98>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002270:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002274:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_TIM1_Init+0x98>)
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <MX_TIM1_Init+0x98>)
 800228a:	f002 fe0d 	bl	8004ea8 <HAL_TIM_Base_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002294:	f7ff fce9 	bl	8001c6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <MX_TIM1_Init+0x98>)
 80022a6:	f003 f817 	bl	80052d8 <HAL_TIM_ConfigClockSource>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022b0:	f7ff fcdb 	bl	8001c6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_TIM1_Init+0x98>)
 80022c2:	f003 fa3f 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022cc:	f7ff fccd 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000490 	.word	0x20000490
 80022dc:	40010000 	.word	0x40010000

080022e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_TIM_Base_MspInit+0x3c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10d      	bne.n	800230e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_TIM_Base_MspInit+0x40>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_TIM_Base_MspInit+0x40>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_TIM_Base_MspInit+0x40>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40023800 	.word	0x40023800

08002324 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_UART4_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_UART4_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_UART4_Init+0x4c>)
 8002330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002334:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_UART4_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_UART4_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_UART4_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_UART4_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_UART4_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_UART4_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_UART4_Init+0x4c>)
 800235c:	f003 fa82 	bl	8005864 <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002366:	f7ff fc80 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200004d8 	.word	0x200004d8
 8002374:	40004c00 	.word	0x40004c00

08002378 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART2_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 80023b0:	f003 fa58 	bl	8005864 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ba:	f7ff fc56 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000520 	.word	0x20000520
 80023c8:	40004400 	.word	0x40004400

080023cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_UART_MspInit+0x1b4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	f040 8092 	bne.w	8002514 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a62      	ldr	r2, [pc, #392]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 80023fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002400:	4b60      	ldr	r3, [pc, #384]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6313      	str	r3, [r2, #48]	; 0x30
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002428:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800243a:	2308      	movs	r3, #8
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	4850      	ldr	r0, [pc, #320]	; (8002588 <HAL_UART_MspInit+0x1bc>)
 8002446:	f000 fe21 	bl	800308c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800244a:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_UART_MspInit+0x1c0>)
 800244c:	4a50      	ldr	r2, [pc, #320]	; (8002590 <HAL_UART_MspInit+0x1c4>)
 800244e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002450:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_UART_MspInit+0x1c0>)
 8002452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002456:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_UART_MspInit+0x1c0>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_UART_MspInit+0x1c0>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_UART_MspInit+0x1c0>)
 8002466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_UART_MspInit+0x1c0>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_UART_MspInit+0x1c0>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002478:	4b44      	ldr	r3, [pc, #272]	; (800258c <HAL_UART_MspInit+0x1c0>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_UART_MspInit+0x1c0>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_UART_MspInit+0x1c0>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800248a:	4840      	ldr	r0, [pc, #256]	; (800258c <HAL_UART_MspInit+0x1c0>)
 800248c:	f000 f9fc 	bl	8002888 <HAL_DMA_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002496:	f7ff fbe8 	bl	8001c6a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_UART_MspInit+0x1c0>)
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
 80024a0:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_UART_MspInit+0x1c0>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024a8:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_UART_MspInit+0x1cc>)
 80024aa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80024ac:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b4:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80024e6:	482b      	ldr	r0, [pc, #172]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024e8:	f000 f9ce 	bl	8002888 <HAL_DMA_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80024f2:	f7ff fbba 	bl	8001c6a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a26      	ldr	r2, [pc, #152]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
 80024fc:	4a25      	ldr	r2, [pc, #148]	; (8002594 <HAL_UART_MspInit+0x1c8>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	2034      	movs	r0, #52	; 0x34
 8002508:	f000 f994 	bl	8002834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800250c:	2034      	movs	r0, #52	; 0x34
 800250e:	f000 f9ad 	bl	800286c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002512:	e030      	b.n	8002576 <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a20      	ldr	r2, [pc, #128]	; (800259c <HAL_UART_MspInit+0x1d0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12b      	bne.n	8002576 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_UART_MspInit+0x1b8>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002556:	230c      	movs	r3, #12
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002566:	2307      	movs	r3, #7
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	4619      	mov	r1, r3
 8002570:	480b      	ldr	r0, [pc, #44]	; (80025a0 <HAL_UART_MspInit+0x1d4>)
 8002572:	f000 fd8b 	bl	800308c <HAL_GPIO_Init>
}
 8002576:	bf00      	nop
 8002578:	3730      	adds	r7, #48	; 0x30
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40004c00 	.word	0x40004c00
 8002584:	40023800 	.word	0x40023800
 8002588:	40020800 	.word	0x40020800
 800258c:	20000568 	.word	0x20000568
 8002590:	40026040 	.word	0x40026040
 8002594:	200005c8 	.word	0x200005c8
 8002598:	40026070 	.word	0x40026070
 800259c:	40004400 	.word	0x40004400
 80025a0:	40020000 	.word	0x40020000

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025a8:	f7ff fe38 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	; (80025f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f006 fa97 	bl	8008b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff fa69 	bl	8001aac <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80025e8:	0800a040 	.word	0x0800a040
  ldr r2, =_sbss
 80025ec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80025f0:	200044c0 	.word	0x200044c0

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 f8fc 	bl	800281e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	2005      	movs	r0, #5
 8002628:	f7ff fd3e 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fd10 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c
 8002660:	20000628 	.word	0x20000628

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000628 	.word	0x20000628

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
         );
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ff4c 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002846:	f7ff ff61 	bl	800270c <__NVIC_GetPriorityGrouping>
 800284a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	6978      	ldr	r0, [r7, #20]
 8002852:	f7ff ffb1 	bl	80027b8 <NVIC_EncodePriority>
 8002856:	4602      	mov	r2, r0
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff80 	bl	8002764 <__NVIC_SetPriority>
}
 8002864:	bf00      	nop
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff54 	bl	8002728 <__NVIC_EnableIRQ>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fee6 	bl	8002664 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e099      	b.n	80029d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c4:	e00f      	b.n	80028e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c6:	f7ff fecd 	bl	8002664 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d908      	bls.n	80028e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e078      	b.n	80029d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e8      	bne.n	80028c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_DMA_Init+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4313      	orrs	r3, r2
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0307 	bic.w	r3, r3, #7
 8002966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b04      	cmp	r3, #4
 8002978:	d117      	bne.n	80029aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fb01 	bl	8002f94 <DMA_CheckFifoParam>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029a6:	2301      	movs	r3, #1
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fab8 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 80029b8:	4603      	mov	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	223f      	movs	r2, #63	; 0x3f
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	f010803f 	.word	0xf010803f

080029e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Start_IT+0x26>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e040      	b.n	8002a8c <HAL_DMA_Start_IT+0xa8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d12f      	bne.n	8002a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa4a 	bl	8002ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	223f      	movs	r2, #63	; 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0216 	orr.w	r2, r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0208 	orr.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	f7ff fddf 	bl	8002664 <HAL_GetTick>
 8002aa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e052      	b.n	8002b6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0216 	bic.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_DMA_Abort+0x62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b16:	e013      	b.n	8002b40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b18:	f7ff fda4 	bl	8002664 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d90c      	bls.n	8002b40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e015      	b.n	8002b6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e4      	bne.n	8002b18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00c      	b.n	8002bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc4:	4b8e      	ldr	r3, [pc, #568]	; (8002e00 <HAL_DMA_IRQHandler+0x248>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a8e      	ldr	r2, [pc, #568]	; (8002e04 <HAL_DMA_IRQHandler+0x24c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2208      	movs	r2, #8
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2208      	movs	r2, #8
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2210      	movs	r2, #16
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03c      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d024      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e01f      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e016      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 808f 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8087 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2220      	movs	r2, #32
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d136      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0216 	bic.w	r2, r2, #22
 8002d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x1da>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	223f      	movs	r2, #63	; 0x3f
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d07e      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
        }
        return;
 8002dce:	e079      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d031      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e02c      	b.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
 8002dfe:	bf00      	nop
 8002e00:	20000004 	.word	0x20000004
 8002e04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e01e      	b.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0210 	bic.w	r2, r2, #16
 8002e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d032      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2205      	movs	r2, #5
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d307      	bcc.n	8002ea0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f2      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x2cc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ea0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e000      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ec4:	bf00      	nop
    }
  }
}
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d108      	bne.n	8002f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f0a:	e007      	b.n	8002f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3b10      	subs	r3, #16
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <DMA_CalcBaseAndBitshift+0x64>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <DMA_CalcBaseAndBitshift+0x68>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d909      	bls.n	8002f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
 8002f68:	e007      	b.n	8002f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	aaaaaaab 	.word	0xaaaaaaab
 8002f90:	08009fb4 	.word	0x08009fb4

08002f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d856      	bhi.n	8003062 <DMA_CheckFifoParam+0xce>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <DMA_CheckFifoParam+0x28>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdf 	.word	0x08002fdf
 8002fc4:	08002fcd 	.word	0x08002fcd
 8002fc8:	08003063 	.word	0x08003063
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d046      	beq.n	8003066 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e043      	b.n	8003066 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe6:	d140      	bne.n	800306a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e03d      	b.n	800306a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	d121      	bne.n	800303c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d837      	bhi.n	800306e <DMA_CheckFifoParam+0xda>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <DMA_CheckFifoParam+0x70>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	0800301b 	.word	0x0800301b
 800300c:	08003015 	.word	0x08003015
 8003010:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e030      	b.n	800307c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d025      	beq.n	8003072 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e022      	b.n	8003072 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003034:	d11f      	bne.n	8003076 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800303a:	e01c      	b.n	8003076 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d903      	bls.n	800304a <DMA_CheckFifoParam+0xb6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003048:	e018      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      break;
 800304e:	e015      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e00b      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003062:	bf00      	nop
 8003064:	e00a      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 8003066:	bf00      	nop
 8003068:	e008      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
 800306c:	e006      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800306e:	bf00      	nop
 8003070:	e004      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 8003072:	bf00      	nop
 8003074:	e002      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;   
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800307a:	bf00      	nop
    }
  } 
  
  return status; 
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e16b      	b.n	8003380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a8:	2201      	movs	r2, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	f040 815a 	bne.w	800337a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d005      	beq.n	80030de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d130      	bne.n	8003140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 0201 	and.w	r2, r3, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b03      	cmp	r3, #3
 800314a:	d017      	beq.n	800317c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d123      	bne.n	80031d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	08da      	lsrs	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3208      	adds	r2, #8
 8003190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80b4 	beq.w	800337a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	4b60      	ldr	r3, [pc, #384]	; (8003398 <HAL_GPIO_Init+0x30c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a5f      	ldr	r2, [pc, #380]	; (8003398 <HAL_GPIO_Init+0x30c>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_GPIO_Init+0x30c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322e:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_GPIO_Init+0x310>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_GPIO_Init+0x314>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d02b      	beq.n	80032b2 <HAL_GPIO_Init+0x226>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a51      	ldr	r2, [pc, #324]	; (80033a4 <HAL_GPIO_Init+0x318>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d025      	beq.n	80032ae <HAL_GPIO_Init+0x222>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a50      	ldr	r2, [pc, #320]	; (80033a8 <HAL_GPIO_Init+0x31c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <HAL_GPIO_Init+0x21e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4f      	ldr	r2, [pc, #316]	; (80033ac <HAL_GPIO_Init+0x320>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d019      	beq.n	80032a6 <HAL_GPIO_Init+0x21a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4e      	ldr	r2, [pc, #312]	; (80033b0 <HAL_GPIO_Init+0x324>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_GPIO_Init+0x216>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <HAL_GPIO_Init+0x328>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00d      	beq.n	800329e <HAL_GPIO_Init+0x212>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <HAL_GPIO_Init+0x32c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <HAL_GPIO_Init+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_GPIO_Init+0x330>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_GPIO_Init+0x20a>
 8003292:	2307      	movs	r3, #7
 8003294:	e00e      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 8003296:	2308      	movs	r3, #8
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 800329a:	2306      	movs	r3, #6
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032b2:	2300      	movs	r3, #0
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c4:	4935      	ldr	r1, [pc, #212]	; (800339c <HAL_GPIO_Init+0x310>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_GPIO_Init+0x334>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f6:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_GPIO_Init+0x334>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032fc:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_GPIO_Init+0x334>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_GPIO_Init+0x334>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <HAL_GPIO_Init+0x334>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_GPIO_Init+0x334>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <HAL_GPIO_Init+0x334>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003374:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <HAL_GPIO_Init+0x334>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f67f ae90 	bls.w	80030a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40013800 	.word	0x40013800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40021400 	.word	0x40021400
 80033b8:	40021800 	.word	0x40021800
 80033bc:	40021c00 	.word	0x40021c00
 80033c0:	40013c00 	.word	0x40013c00

080033c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e001      	b.n	80033e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e12b      	b.n	8003692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe faa8 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800348a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800348c:	f001 fcb2 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 8003490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a81      	ldr	r2, [pc, #516]	; (800369c <HAL_I2C_Init+0x274>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d807      	bhi.n	80034ac <HAL_I2C_Init+0x84>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a80      	ldr	r2, [pc, #512]	; (80036a0 <HAL_I2C_Init+0x278>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	bf94      	ite	ls
 80034a4:	2301      	movls	r3, #1
 80034a6:	2300      	movhi	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e006      	b.n	80034ba <HAL_I2C_Init+0x92>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a7d      	ldr	r2, [pc, #500]	; (80036a4 <HAL_I2C_Init+0x27c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bf94      	ite	ls
 80034b4:	2301      	movls	r3, #1
 80034b6:	2300      	movhi	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0e7      	b.n	8003692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a78      	ldr	r2, [pc, #480]	; (80036a8 <HAL_I2C_Init+0x280>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a6a      	ldr	r2, [pc, #424]	; (800369c <HAL_I2C_Init+0x274>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d802      	bhi.n	80034fc <HAL_I2C_Init+0xd4>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	3301      	adds	r3, #1
 80034fa:	e009      	b.n	8003510 <HAL_I2C_Init+0xe8>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	4a69      	ldr	r2, [pc, #420]	; (80036ac <HAL_I2C_Init+0x284>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	3301      	adds	r3, #1
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	495c      	ldr	r1, [pc, #368]	; (800369c <HAL_I2C_Init+0x274>)
 800352c:	428b      	cmp	r3, r1
 800352e:	d819      	bhi.n	8003564 <HAL_I2C_Init+0x13c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e59      	subs	r1, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fbb1 f3f3 	udiv	r3, r1, r3
 800353e:	1c59      	adds	r1, r3, #1
 8003540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003544:	400b      	ands	r3, r1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_I2C_Init+0x138>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e59      	subs	r1, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fbb1 f3f3 	udiv	r3, r1, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355e:	e051      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 8003560:	2304      	movs	r3, #4
 8003562:	e04f      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d111      	bne.n	8003590 <HAL_I2C_Init+0x168>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e58      	subs	r0, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e012      	b.n	80035b6 <HAL_I2C_Init+0x18e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	0099      	lsls	r1, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Init+0x196>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e022      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10e      	bne.n	80035e4 <HAL_I2C_Init+0x1bc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e58      	subs	r0, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e2:	e00f      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	6809      	ldr	r1, [r1, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6911      	ldr	r1, [r2, #16]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68d2      	ldr	r2, [r2, #12]
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	000186a0 	.word	0x000186a0
 80036a0:	001e847f 	.word	0x001e847f
 80036a4:	003d08ff 	.word	0x003d08ff
 80036a8:	431bde83 	.word	0x431bde83
 80036ac:	10624dd3 	.word	0x10624dd3

080036b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ca:	f7fe ffcb 	bl	8002664 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b20      	cmp	r3, #32
 80036da:	f040 80d9 	bne.w	8003890 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2319      	movs	r3, #25
 80036e4:	2201      	movs	r2, #1
 80036e6:	496d      	ldr	r1, [pc, #436]	; (800389c <HAL_I2C_Mem_Write+0x1ec>)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fc8b 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0cc      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Mem_Write+0x56>
 8003702:	2302      	movs	r3, #2
 8003704:	e0c5      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d007      	beq.n	800372c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2221      	movs	r2, #33	; 0x21
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2240      	movs	r2, #64	; 0x40
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800375c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <HAL_I2C_Mem_Write+0x1f0>)
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800376e:	88f8      	ldrh	r0, [r7, #6]
 8003770:	893a      	ldrh	r2, [r7, #8]
 8003772:	8979      	ldrh	r1, [r7, #10]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	4603      	mov	r3, r0
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fac2 	bl	8003d08 <I2C_RequestMemoryWrite>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d052      	beq.n	8003830 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e081      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fd50 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06b      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_I2C_Mem_Write+0x180>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1aa      	bne.n	800378e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fd43 	bl	80042c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2b04      	cmp	r3, #4
 800384e:	d107      	bne.n	8003860 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e016      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	00100002 	.word	0x00100002
 80038a0:	ffff0000 	.word	0xffff0000

080038a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	460b      	mov	r3, r1
 80038b8:	813b      	strh	r3, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038be:	f7fe fed1 	bl	8002664 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	f040 8214 	bne.w	8003cfa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2319      	movs	r3, #25
 80038d8:	2201      	movs	r2, #1
 80038da:	497b      	ldr	r1, [pc, #492]	; (8003ac8 <HAL_I2C_Mem_Read+0x224>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb91 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
 80038ea:	e207      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Mem_Read+0x56>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e200      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d007      	beq.n	8003920 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2222      	movs	r2, #34	; 0x22
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a5b      	ldr	r2, [pc, #364]	; (8003acc <HAL_I2C_Mem_Read+0x228>)
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	893a      	ldrh	r2, [r7, #8]
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4603      	mov	r3, r0
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fa5e 	bl	8003e34 <I2C_RequestMemoryRead>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1bc      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d113      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e190      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d11b      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e170      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d11b      	bne.n	8003a32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	e150      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a48:	e144      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	f200 80f1 	bhi.w	8003c36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d123      	bne.n	8003aa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fc79 	bl	8004358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e145      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa2:	e117      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d14e      	bne.n	8003b4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4906      	ldr	r1, [pc, #24]	; (8003ad0 <HAL_I2C_Mem_Read+0x22c>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 faa4 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e11a      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b48:	e0c4      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2200      	movs	r2, #0
 8003b52:	496c      	ldr	r1, [pc, #432]	; (8003d04 <HAL_I2C_Mem_Read+0x460>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa55 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0cb      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2200      	movs	r2, #0
 8003bae:	4955      	ldr	r1, [pc, #340]	; (8003d04 <HAL_I2C_Mem_Read+0x460>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fa27 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e09d      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c34:	e04e      	b.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fb8c 	bl	8004358 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e058      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d124      	bne.n	8003cd4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f47f aeb6 	bne.w	8003a4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00010004 	.word	0x00010004

08003d08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f960 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d58:	d103      	bne.n	8003d62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e05f      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	492d      	ldr	r1, [pc, #180]	; (8003e30 <I2C_RequestMemoryWrite+0x128>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f9bb 	bl	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e04c      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa46 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d107      	bne.n	8003dca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e02b      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e021      	b.n	8003e24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fa20 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d107      	bne.n	8003e16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e005      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1a:	893b      	ldrh	r3, [r7, #8]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	00010002 	.word	0x00010002

08003e34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f8c2 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d103      	bne.n	8003e9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0aa      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	4952      	ldr	r1, [pc, #328]	; (8004000 <I2C_RequestMemoryRead+0x1cc>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f91d 	bl	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e097      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f9a8 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e076      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e021      	b.n	8003f60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f982 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e050      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f56:	893b      	ldrh	r3, [r7, #8]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f967 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e035      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f82b 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc2:	d103      	bne.n	8003fcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e013      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	4906      	ldr	r1, [pc, #24]	; (8004000 <I2C_RequestMemoryRead+0x1cc>)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f886 	bl	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	e048      	b.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401c:	d044      	beq.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe fb21 	bl	8002664 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d139      	bne.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	0c1b      	lsrs	r3, r3, #16
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d10d      	bne.n	800405a <I2C_WaitOnFlagUntilTimeout+0x56>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	43da      	mvns	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	e00c      	b.n	8004074 <I2C_WaitOnFlagUntilTimeout+0x70>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	43da      	mvns	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	d116      	bne.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e023      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10d      	bne.n	80040ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	43da      	mvns	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4013      	ands	r3, r2
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	e00c      	b.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	43da      	mvns	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4013      	ands	r3, r2
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d093      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004106:	e071      	b.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	d123      	bne.n	8004160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004126:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e067      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004166:	d041      	beq.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004168:	f7fe fa7c 	bl	8002664 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d136      	bne.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10c      	bne.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e00b      	b.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e021      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	0c1b      	lsrs	r3, r3, #16
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10c      	bne.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e00b      	b.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	43da      	mvns	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	bf14      	ite	ne
 8004222:	2301      	movne	r3, #1
 8004224:	2300      	moveq	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	f47f af6d 	bne.w	8004108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004244:	e034      	b.n	80042b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f8e3 	bl	8004412 <I2C_IsAcknowledgeFailed>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e034      	b.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425c:	d028      	beq.n	80042b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe fa01 	bl	8002664 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11d      	bne.n	80042b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d016      	beq.n	80042b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e007      	b.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d1c3      	bne.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d4:	e034      	b.n	8004340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f89b 	bl	8004412 <I2C_IsAcknowledgeFailed>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e034      	b.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ec:	d028      	beq.n	8004340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fe f9b9 	bl	8002664 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11d      	bne.n	8004340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b04      	cmp	r3, #4
 8004310:	d016      	beq.n	8004340 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e007      	b.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d1c3      	bne.n	80042d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004364:	e049      	b.n	80043fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d119      	bne.n	80043a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0210 	mvn.w	r2, #16
 800437c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e030      	b.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a8:	f7fe f95c 	bl	8002664 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d11d      	bne.n	80043fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d016      	beq.n	80043fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e007      	b.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d1ae      	bne.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d11b      	bne.n	8004462 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004432:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0204 	orr.w	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e034      	b.n	80044ec <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800448a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f245 5255 	movw	r2, #21845	; 0x5555
 8004494:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6852      	ldr	r2, [r2, #4]
 800449e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80044aa:	f7fe f8db 	bl	8002664 <HAL_GetTick>
 80044ae:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80044b0:	e00f      	b.n	80044d2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80044b2:	f7fe f8d7 	bl	8002664 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b31      	cmp	r3, #49	; 0x31
 80044be:	d908      	bls.n	80044d2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e00c      	b.n	80044ec <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e8      	bne.n	80044b2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80044e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004504:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe f84a 	bl	8002664 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe f846 	bl	8002664 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fe f836 	bl	8002664 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe f832 	bl	8002664 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd ffeb 	bl	8002664 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd ffe7 	bl	8002664 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd ffca 	bl	8002664 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fd ffc6 	bl	8002664 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fd ffaa 	bl	8002664 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fd ffa6 	bl	8002664 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fd ff93 	bl	8002664 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fd ff8f 	bl	8002664 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fd ff4f 	bl	8002664 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd ff4b 	bl	8002664 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd ff10 	bl	8002664 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd ff0c 	bl	8002664 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fd fefa 	bl	8002664 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fd fef6 	bl	8002664 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fd feca 	bl	8002664 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd fec6 	bl	8002664 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd fe9f 	bl	8002664 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd fe9b 	bl	8002664 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd fe88 	bl	8002664 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fe84 	bl	8002664 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fd fdb6 	bl	8002664 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd fdb2 	bl	8002664 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fa7c 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	08009f9c 	.word	0x08009f9c
 8004bc8:	20000004 	.word	0x20000004
 8004bcc:	20000008 	.word	0x20000008

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb ff32 	bl	8000b48 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb fed8 	bl	8000b48 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000004 	.word	0x20000004

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	08009fac 	.word	0x08009fac

08004e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e20:	f7ff ffdc 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0b5b      	lsrs	r3, r3, #13
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	08009fac 	.word	0x08009fac

08004e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	220f      	movs	r2, #15
 8004e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0203 	and.w	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_RCC_GetClockConfig+0x60>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0207 	and.w	r2, r3, #7
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	601a      	str	r2, [r3, #0]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40023c00 	.word	0x40023c00

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e041      	b.n	8004f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd fa06 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 fae6 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d001      	beq.n	8004f60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e046      	b.n	8004fee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <HAL_TIM_Base_Start+0xb4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d01d      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <HAL_TIM_Base_Start+0xb8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_TIM_Base_Start+0xbc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_TIM_Base_Start+0xc0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_TIM_Base_Start+0xc4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_TIM_Base_Start+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x70>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_TIM_Base_Start+0xcc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d111      	bne.n	8004fdc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d010      	beq.n	8004fec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fda:	e007      	b.n	8004fec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800

08005018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e04e      	b.n	80050ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a23      	ldr	r2, [pc, #140]	; (80050dc <HAL_TIM_Base_Start_IT+0xc4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505a:	d01d      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a18      	ldr	r2, [pc, #96]	; (80050f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d010      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	e007      	b.n	80050cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40001800 	.word	0x40001800

080050f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01b      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0202 	mvn.w	r2, #2
 800512c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f999 	bl	800547a <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f98b 	bl	8005466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f99c 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0204 	mvn.w	r2, #4
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f973 	bl	800547a <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f965 	bl	8005466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f976 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0208 	mvn.w	r2, #8
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2204      	movs	r2, #4
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f94d 	bl	800547a <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f93f 	bl	8005466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f950 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2208      	movs	r2, #8
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f927 	bl	800547a <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f919 	bl	8005466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f92a 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc fcf4 	bl	8001c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fae4 	bl	8005850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8fb 	bl	80054a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0220 	mvn.w	r2, #32
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fab6 	bl	800583c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_ConfigClockSource+0x1c>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e0b4      	b.n	800545e <HAL_TIM_ConfigClockSource+0x186>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532c:	d03e      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0xd4>
 800532e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005332:	f200 8087 	bhi.w	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	f000 8086 	beq.w	800544a <HAL_TIM_ConfigClockSource+0x172>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	d87f      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b70      	cmp	r3, #112	; 0x70
 8005346:	d01a      	beq.n	800537e <HAL_TIM_ConfigClockSource+0xa6>
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d87b      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b60      	cmp	r3, #96	; 0x60
 800534e:	d050      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d877      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b50      	cmp	r3, #80	; 0x50
 8005356:	d03c      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005358:	2b50      	cmp	r3, #80	; 0x50
 800535a:	d873      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d058      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x13a>
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d86f      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b30      	cmp	r3, #48	; 0x30
 8005366:	d064      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x15a>
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d86b      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b20      	cmp	r3, #32
 800536e:	d060      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x15a>
 8005370:	2b20      	cmp	r3, #32
 8005372:	d867      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d05c      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x15a>
 8005378:	2b10      	cmp	r3, #16
 800537a:	d05a      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	e062      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800538e:	f000 f9b9 	bl	8005704 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	609a      	str	r2, [r3, #8]
      break;
 80053aa:	e04f      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053bc:	f000 f9a2 	bl	8005704 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ce:	609a      	str	r2, [r3, #8]
      break;
 80053d0:	e03c      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	461a      	mov	r2, r3
 80053e0:	f000 f916 	bl	8005610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2150      	movs	r1, #80	; 0x50
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f96f 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 80053f0:	e02c      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fe:	461a      	mov	r2, r3
 8005400:	f000 f935 	bl	800566e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2160      	movs	r1, #96	; 0x60
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f95f 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8005410:	e01c      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	461a      	mov	r2, r3
 8005420:	f000 f8f6 	bl	8005610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2140      	movs	r1, #64	; 0x40
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f94f 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8005430:	e00c      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f000 f946 	bl	80056ce <TIM_ITRx_SetConfig>
      break;
 8005442:	e003      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
      break;
 8005448:	e000      	b.n	800544c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800544a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a46      	ldr	r2, [pc, #280]	; (80055e4 <TIM_Base_SetConfig+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d00f      	beq.n	80054f8 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a43      	ldr	r2, [pc, #268]	; (80055e8 <TIM_Base_SetConfig+0x130>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a42      	ldr	r2, [pc, #264]	; (80055ec <TIM_Base_SetConfig+0x134>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a41      	ldr	r2, [pc, #260]	; (80055f0 <TIM_Base_SetConfig+0x138>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a40      	ldr	r2, [pc, #256]	; (80055f4 <TIM_Base_SetConfig+0x13c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d108      	bne.n	800550a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a35      	ldr	r2, [pc, #212]	; (80055e4 <TIM_Base_SetConfig+0x12c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d02b      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d027      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a32      	ldr	r2, [pc, #200]	; (80055e8 <TIM_Base_SetConfig+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d023      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a31      	ldr	r2, [pc, #196]	; (80055ec <TIM_Base_SetConfig+0x134>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a30      	ldr	r2, [pc, #192]	; (80055f0 <TIM_Base_SetConfig+0x138>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01b      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <TIM_Base_SetConfig+0x13c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d017      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2e      	ldr	r2, [pc, #184]	; (80055f8 <TIM_Base_SetConfig+0x140>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2d      	ldr	r2, [pc, #180]	; (80055fc <TIM_Base_SetConfig+0x144>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00f      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2c      	ldr	r2, [pc, #176]	; (8005600 <TIM_Base_SetConfig+0x148>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <TIM_Base_SetConfig+0x14c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <TIM_Base_SetConfig+0x150>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a29      	ldr	r2, [pc, #164]	; (800560c <TIM_Base_SetConfig+0x154>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d108      	bne.n	800557c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <TIM_Base_SetConfig+0x12c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0xf8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <TIM_Base_SetConfig+0x13c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d105      	bne.n	80055d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]
  }
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800
 8005604:	40001800 	.word	0x40001800
 8005608:	40001c00 	.word	0x40001c00
 800560c:	40002000 	.word	0x40002000

08005610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 030a 	bic.w	r3, r3, #10
 800564c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f023 0210 	bic.w	r2, r3, #16
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f043 0307 	orr.w	r3, r3, #7
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	431a      	orrs	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e05a      	b.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a15      	ldr	r2, [pc, #84]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40001800 	.word	0x40001800

0800583c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e042      	b.n	80058fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fd9e 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	; 0x24
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 f867 	bl	800697c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b20      	cmp	r3, #32
 8005922:	d175      	bne.n	8005a10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_UART_Transmit+0x2c>
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e06e      	b.n	8005a12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2221      	movs	r2, #33	; 0x21
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005942:	f7fc fe8f 	bl	8002664 <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	88fa      	ldrh	r2, [r7, #6]
 8005952:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d108      	bne.n	8005970 <HAL_UART_Transmit+0x6c>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e003      	b.n	8005978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005978:	e02e      	b.n	80059d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	2180      	movs	r1, #128	; 0x80
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fd40 	bl	800640a <UART_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e03a      	b.n	8005a12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3302      	adds	r3, #2
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e007      	b.n	80059ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1cb      	bne.n	800597a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2140      	movs	r1, #64	; 0x40
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fd0c 	bl	800640a <UART_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e006      	b.n	8005a12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d156      	bne.n	8005ae4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_UART_Transmit_DMA+0x26>
 8005a3c:	88fb      	ldrh	r3, [r7, #6]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e04f      	b.n	8005ae6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2221      	movs	r2, #33	; 0x21
 8005a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <HAL_UART_Transmit_DMA+0xd4>)
 8005a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <HAL_UART_Transmit_DMA+0xd8>)
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_UART_Transmit_DMA+0xdc>)
 8005a7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	2200      	movs	r2, #0
 8005a84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	f7fc ffa1 	bl	80029e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	617b      	str	r3, [r7, #20]
   return(result);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005acc:	627a      	str	r2, [r7, #36]	; 0x24
 8005ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6a39      	ldr	r1, [r7, #32]
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3730      	adds	r7, #48	; 0x30
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08006159 	.word	0x08006159
 8005af4:	080061f3 	.word	0x080061f3
 8005af8:	08006377 	.word	0x08006377

08005afc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d14a      	bne.n	8005bac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e043      	b.n	8005bae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	461a      	mov	r2, r3
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fcbf 	bl	80064bc <UART_Start_Receive_DMA>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005b44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d12c      	bne.n	8005ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d125      	bne.n	8005ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	617b      	str	r3, [r7, #20]
   return(result);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f043 0310 	orr.w	r3, r3, #16
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6a39      	ldr	r1, [r7, #32]
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005b9e:	e002      	b.n	8005ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005baa:	e000      	b.n	8005bae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3730      	adds	r7, #48	; 0x30
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b0ba      	sub	sp, #232	; 0xe8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10f      	bne.n	8005c1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_UART_IRQHandler+0x66>
 8005c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fdf1 	bl	80067fe <UART_Receive_IT>
      return;
 8005c1c:	e25b      	b.n	80060d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80de 	beq.w	8005de4 <HAL_UART_IRQHandler+0x22c>
 8005c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80d1 	beq.w	8005de4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <HAL_UART_IRQHandler+0xae>
 8005c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	f043 0201 	orr.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <HAL_UART_IRQHandler+0xd2>
 8005c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	f043 0202 	orr.w	r2, r3, #2
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00b      	beq.n	8005cae <HAL_UART_IRQHandler+0xf6>
 8005c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	f043 0204 	orr.w	r2, r3, #4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <HAL_UART_IRQHandler+0x126>
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	f043 0208 	orr.w	r2, r3, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 81f2 	beq.w	80060cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_UART_IRQHandler+0x14e>
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fd7c 	bl	80067fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <HAL_UART_IRQHandler+0x17a>
 8005d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d04f      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fc84 	bl	8006640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d141      	bne.n	8005dca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1d9      	bne.n	8005d46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d013      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	4a7e      	ldr	r2, [pc, #504]	; (8005f98 <HAL_UART_IRQHandler+0x3e0>)
 8005da0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc fee4 	bl	8002b74 <HAL_DMA_Abort_IT>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	e00e      	b.n	8005de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f9b2 	bl	800612c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	e00a      	b.n	8005de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9ae 	bl	800612c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd0:	e006      	b.n	8005de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f9aa 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005dde:	e175      	b.n	80060cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	bf00      	nop
    return;
 8005de2:	e173      	b.n	80060cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 814f 	bne.w	800608c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8148 	beq.w	800608c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8141 	beq.w	800608c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	f040 80b6 	bne.w	8005f9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8145 	beq.w	80060d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	f080 813e 	bcs.w	80060d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	f000 8088 	beq.w	8005f7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1d9      	bne.n	8005e6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3314      	adds	r3, #20
 8005ebc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ede:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e1      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3314      	adds	r3, #20
 8005f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e3      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e3      	bne.n	8005f38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fc fd8d 	bl	8002a94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f8d5 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f96:	e09b      	b.n	80060d0 <HAL_UART_IRQHandler+0x518>
 8005f98:	08006707 	.word	0x08006707
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 808e 	beq.w	80060d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8089 	beq.w	80060d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	623b      	str	r3, [r7, #32]
   return(result);
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3314      	adds	r3, #20
 800601a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800601e:	633a      	str	r2, [r7, #48]	; 0x30
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e3      	bne.n	8005ffa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006064:	61fa      	str	r2, [r7, #28]
 8006066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	617b      	str	r3, [r7, #20]
   return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e3      	bne.n	8006040 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800607e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f85b 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800608a:	e023      	b.n	80060d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_UART_IRQHandler+0x4f4>
 8006098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb42 	bl	800672e <UART_Transmit_IT>
    return;
 80060aa:	e014      	b.n	80060d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <HAL_UART_IRQHandler+0x51e>
 80060b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fb82 	bl	80067ce <UART_EndTransmit_IT>
    return;
 80060ca:	e004      	b.n	80060d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80060cc:	bf00      	nop
 80060ce:	e002      	b.n	80060d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80060d4:	bf00      	nop
  }
}
 80060d6:	37e8      	adds	r7, #232	; 0xe8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b090      	sub	sp, #64	; 0x40
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d137      	bne.n	80061e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006176:	2200      	movs	r2, #0
 8006178:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	623b      	str	r3, [r7, #32]
   return(result);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
 8006192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619a:	633a      	str	r2, [r7, #48]	; 0x30
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ce:	61fa      	str	r2, [r7, #28]
 80061d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69b9      	ldr	r1, [r7, #24]
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	617b      	str	r3, [r7, #20]
   return(result);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061e2:	e002      	b.n	80061ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80061e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061e6:	f7ff ff79 	bl	80060dc <HAL_UART_TxCpltCallback>
}
 80061ea:	bf00      	nop
 80061ec:	3740      	adds	r7, #64	; 0x40
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff ff75 	bl	80060f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b09c      	sub	sp, #112	; 0x70
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d172      	bne.n	8006310 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	2200      	movs	r2, #0
 800622e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006246:	66bb      	str	r3, [r7, #104]	; 0x68
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006250:	65ba      	str	r2, [r7, #88]	; 0x58
 8006252:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800625e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	667b      	str	r3, [r7, #100]	; 0x64
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006284:	647a      	str	r2, [r7, #68]	; 0x44
 8006286:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800628a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	623b      	str	r3, [r7, #32]
   return(result);
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ae:	663b      	str	r3, [r7, #96]	; 0x60
 80062b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062b8:	633a      	str	r2, [r7, #48]	; 0x30
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e5      	bne.n	8006298 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d119      	bne.n	8006310 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0310 	bic.w	r3, r3, #16
 80062f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062fc:	61fa      	str	r2, [r7, #28]
 80062fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	69b9      	ldr	r1, [r7, #24]
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	617b      	str	r3, [r7, #20]
   return(result);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e5      	bne.n	80062dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	2200      	movs	r2, #0
 8006314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	2b01      	cmp	r3, #1
 800631c:	d106      	bne.n	800632c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800631e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006322:	4619      	mov	r1, r3
 8006324:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006326:	f7ff ff0b 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800632a:	e002      	b.n	8006332 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800632c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800632e:	f7ff fee9 	bl	8006104 <HAL_UART_RxCpltCallback>
}
 8006332:	bf00      	nop
 8006334:	3770      	adds	r7, #112	; 0x70
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	2b01      	cmp	r3, #1
 8006354:	d108      	bne.n	8006368 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	b29b      	uxth	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff feed 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006366:	e002      	b.n	800636e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff fed5 	bl	8006118 <HAL_UART_RxHalfCpltCallback>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b21      	cmp	r3, #33	; 0x21
 80063a8:	d108      	bne.n	80063bc <UART_DMAError+0x46>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063b6:	68b8      	ldr	r0, [r7, #8]
 80063b8:	f000 f91a 	bl	80065f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	bf0c      	ite	eq
 80063ca:	2301      	moveq	r3, #1
 80063cc:	2300      	movne	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b22      	cmp	r3, #34	; 0x22
 80063dc:	d108      	bne.n	80063f0 <UART_DMAError+0x7a>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063ea:	68b8      	ldr	r0, [r7, #8]
 80063ec:	f000 f928 	bl	8006640 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f043 0210 	orr.w	r2, r3, #16
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063fc:	68b8      	ldr	r0, [r7, #8]
 80063fe:	f7ff fe95 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641a:	e03b      	b.n	8006494 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006422:	d037      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006424:	f7fc f91e 	bl	8002664 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <UART_WaitOnFlagUntilTimeout+0x30>
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e03a      	b.n	80064b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d023      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0x8a>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d020      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d01d      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	d116      	bne.n	8006494 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f8df 	bl	8006640 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2208      	movs	r2, #8
 8006486:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e00f      	b.n	80064b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d0b4      	beq.n	800641c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b098      	sub	sp, #96	; 0x60
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2222      	movs	r2, #34	; 0x22
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	4a3e      	ldr	r2, [pc, #248]	; (80065e4 <UART_Start_Receive_DMA+0x128>)
 80064ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	4a3d      	ldr	r2, [pc, #244]	; (80065e8 <UART_Start_Receive_DMA+0x12c>)
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	4a3c      	ldr	r2, [pc, #240]	; (80065ec <UART_Start_Receive_DMA+0x130>)
 80064fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	2200      	movs	r2, #0
 8006502:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006504:	f107 0308 	add.w	r3, r7, #8
 8006508:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	f7fc fa62 	bl	80029e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d019      	beq.n	8006572 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800654e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006554:	65bb      	str	r3, [r7, #88]	; 0x58
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800655e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006560:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800656c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	657b      	str	r3, [r7, #84]	; 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006592:	63ba      	str	r2, [r7, #56]	; 0x38
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	617b      	str	r3, [r7, #20]
   return(result);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065bc:	653b      	str	r3, [r7, #80]	; 0x50
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065c6:	627a      	str	r2, [r7, #36]	; 0x24
 80065c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6a39      	ldr	r1, [r7, #32]
 80065cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3760      	adds	r7, #96	; 0x60
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	0800620f 	.word	0x0800620f
 80065e8:	0800633b 	.word	0x0800633b
 80065ec:	08006377 	.word	0x08006377

080065f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b089      	sub	sp, #36	; 0x24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60bb      	str	r3, [r7, #8]
   return(result);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	61ba      	str	r2, [r7, #24]
 800661a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e5      	bne.n	80065f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006634:	bf00      	nop
 8006636:	3724      	adds	r7, #36	; 0x24
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b095      	sub	sp, #84	; 0x54
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800665e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006668:	643a      	str	r2, [r7, #64]	; 0x40
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800666e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3314      	adds	r3, #20
 8006682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	61fb      	str	r3, [r7, #28]
   return(result);
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800669c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d119      	bne.n	80066ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f023 0310 	bic.w	r3, r3, #16
 80066ce:	647b      	str	r3, [r7, #68]	; 0x44
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d8:	61ba      	str	r2, [r7, #24]
 80066da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	613b      	str	r3, [r7, #16]
   return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066fa:	bf00      	nop
 80066fc:	3754      	adds	r7, #84	; 0x54
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fd03 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b21      	cmp	r3, #33	; 0x21
 8006740:	d13e      	bne.n	80067c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d114      	bne.n	8006776 <UART_Transmit_IT+0x48>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d110      	bne.n	8006776 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c9a      	adds	r2, r3, #2
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]
 8006774:	e008      	b.n	8006788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6211      	str	r1, [r2, #32]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4619      	mov	r1, r3
 8006796:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10f      	bne.n	80067bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff fc74 	bl	80060dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08c      	sub	sp, #48	; 0x30
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b22      	cmp	r3, #34	; 0x22
 8006810:	f040 80ae 	bne.w	8006970 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d117      	bne.n	800684e <UART_Receive_IT+0x50>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d113      	bne.n	800684e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683c:	b29a      	uxth	r2, r3
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	629a      	str	r2, [r3, #40]	; 0x28
 800684c:	e026      	b.n	800689c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d007      	beq.n	8006872 <UART_Receive_IT+0x74>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <UART_Receive_IT+0x82>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e008      	b.n	8006892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688c:	b2da      	uxtb	r2, r3
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4619      	mov	r1, r3
 80068aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d15d      	bne.n	800696c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0220 	bic.w	r2, r2, #32
 80068be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d135      	bne.n	8006962 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	613b      	str	r3, [r7, #16]
   return(result);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 0310 	bic.w	r3, r3, #16
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	623a      	str	r2, [r7, #32]
 800691e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	61bb      	str	r3, [r7, #24]
   return(result);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b10      	cmp	r3, #16
 800693c:	d10a      	bne.n	8006954 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fbf0 	bl	8006140 <HAL_UARTEx_RxEventCallback>
 8006960:	e002      	b.n	8006968 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff fbce 	bl	8006104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	e002      	b.n	8006972 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3730      	adds	r7, #48	; 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800697c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006980:	b0c0      	sub	sp, #256	; 0x100
 8006982:	af00      	add	r7, sp, #0
 8006984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	68d9      	ldr	r1, [r3, #12]
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	ea40 0301 	orr.w	r3, r0, r1
 80069a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069d4:	f021 010c 	bic.w	r1, r1, #12
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069e2:	430b      	orrs	r3, r1
 80069e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	6999      	ldr	r1, [r3, #24]
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	ea40 0301 	orr.w	r3, r0, r1
 8006a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b8f      	ldr	r3, [pc, #572]	; (8006c48 <UART_SetConfig+0x2cc>)
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d005      	beq.n	8006a1c <UART_SetConfig+0xa0>
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b8d      	ldr	r3, [pc, #564]	; (8006c4c <UART_SetConfig+0x2d0>)
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d104      	bne.n	8006a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a1c:	f7fe f9fe 	bl	8004e1c <HAL_RCC_GetPCLK2Freq>
 8006a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a24:	e003      	b.n	8006a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a26:	f7fe f9e5 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 8006a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	f040 810c 	bne.w	8006c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a4e:	4622      	mov	r2, r4
 8006a50:	462b      	mov	r3, r5
 8006a52:	1891      	adds	r1, r2, r2
 8006a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a56:	415b      	adcs	r3, r3
 8006a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a5e:	4621      	mov	r1, r4
 8006a60:	eb12 0801 	adds.w	r8, r2, r1
 8006a64:	4629      	mov	r1, r5
 8006a66:	eb43 0901 	adc.w	r9, r3, r1
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a7e:	4690      	mov	r8, r2
 8006a80:	4699      	mov	r9, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	eb18 0303 	adds.w	r3, r8, r3
 8006a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	eb49 0303 	adc.w	r3, r9, r3
 8006a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006aaa:	460b      	mov	r3, r1
 8006aac:	18db      	adds	r3, r3, r3
 8006aae:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	eb42 0303 	adc.w	r3, r2, r3
 8006ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ac0:	f7fa f842 	bl	8000b48 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <UART_SetConfig+0x2d4>)
 8006aca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	011c      	lsls	r4, r3, #4
 8006ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	1891      	adds	r1, r2, r2
 8006aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8006aec:	415b      	adcs	r3, r3
 8006aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006af4:	4641      	mov	r1, r8
 8006af6:	eb12 0a01 	adds.w	sl, r2, r1
 8006afa:	4649      	mov	r1, r9
 8006afc:	eb43 0b01 	adc.w	fp, r3, r1
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b14:	4692      	mov	sl, r2
 8006b16:	469b      	mov	fp, r3
 8006b18:	4643      	mov	r3, r8
 8006b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b22:	464b      	mov	r3, r9
 8006b24:	eb4b 0303 	adc.w	r3, fp, r3
 8006b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b40:	460b      	mov	r3, r1
 8006b42:	18db      	adds	r3, r3, r3
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
 8006b46:	4613      	mov	r3, r2
 8006b48:	eb42 0303 	adc.w	r3, r2, r3
 8006b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b56:	f7f9 fff7 	bl	8000b48 <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4b3b      	ldr	r3, [pc, #236]	; (8006c50 <UART_SetConfig+0x2d4>)
 8006b62:	fba3 2301 	umull	r2, r3, r3, r1
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	2264      	movs	r2, #100	; 0x64
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
 8006b6e:	1acb      	subs	r3, r1, r3
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b76:	4b36      	ldr	r3, [pc, #216]	; (8006c50 <UART_SetConfig+0x2d4>)
 8006b78:	fba3 2302 	umull	r2, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b84:	441c      	add	r4, r3
 8006b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	1891      	adds	r1, r2, r2
 8006b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ba8:	4641      	mov	r1, r8
 8006baa:	1851      	adds	r1, r2, r1
 8006bac:	6339      	str	r1, [r7, #48]	; 0x30
 8006bae:	4649      	mov	r1, r9
 8006bb0:	414b      	adcs	r3, r1
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bc0:	4659      	mov	r1, fp
 8006bc2:	00cb      	lsls	r3, r1, #3
 8006bc4:	4651      	mov	r1, sl
 8006bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bca:	4651      	mov	r1, sl
 8006bcc:	00ca      	lsls	r2, r1, #3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bdc:	464b      	mov	r3, r9
 8006bde:	460a      	mov	r2, r1
 8006be0:	eb42 0303 	adc.w	r3, r2, r3
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	18db      	adds	r3, r3, r3
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	4613      	mov	r3, r2
 8006c04:	eb42 0303 	adc.w	r3, r2, r3
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c12:	f7f9 ff99 	bl	8000b48 <__aeabi_uldivmod>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <UART_SetConfig+0x2d4>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	; 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	3332      	adds	r3, #50	; 0x32
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <UART_SetConfig+0x2d4>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 0207 	and.w	r2, r3, #7
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4422      	add	r2, r4
 8006c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c44:	e106      	b.n	8006e54 <UART_SetConfig+0x4d8>
 8006c46:	bf00      	nop
 8006c48:	40011000 	.word	0x40011000
 8006c4c:	40011400 	.word	0x40011400
 8006c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c66:	4642      	mov	r2, r8
 8006c68:	464b      	mov	r3, r9
 8006c6a:	1891      	adds	r1, r2, r2
 8006c6c:	6239      	str	r1, [r7, #32]
 8006c6e:	415b      	adcs	r3, r3
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
 8006c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c76:	4641      	mov	r1, r8
 8006c78:	1854      	adds	r4, r2, r1
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	eb43 0501 	adc.w	r5, r3, r1
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	00eb      	lsls	r3, r5, #3
 8006c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c8e:	00e2      	lsls	r2, r4, #3
 8006c90:	4614      	mov	r4, r2
 8006c92:	461d      	mov	r5, r3
 8006c94:	4643      	mov	r3, r8
 8006c96:	18e3      	adds	r3, r4, r3
 8006c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	eb45 0303 	adc.w	r3, r5, r3
 8006ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	008b      	lsls	r3, r1, #2
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ccc:	4621      	mov	r1, r4
 8006cce:	008a      	lsls	r2, r1, #2
 8006cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cd4:	f7f9 ff38 	bl	8000b48 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4b60      	ldr	r3, [pc, #384]	; (8006e60 <UART_SetConfig+0x4e4>)
 8006cde:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	011c      	lsls	r4, r3, #4
 8006ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	1891      	adds	r1, r2, r2
 8006cfe:	61b9      	str	r1, [r7, #24]
 8006d00:	415b      	adcs	r3, r3
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d08:	4641      	mov	r1, r8
 8006d0a:	1851      	adds	r1, r2, r1
 8006d0c:	6139      	str	r1, [r7, #16]
 8006d0e:	4649      	mov	r1, r9
 8006d10:	414b      	adcs	r3, r1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d20:	4659      	mov	r1, fp
 8006d22:	00cb      	lsls	r3, r1, #3
 8006d24:	4651      	mov	r1, sl
 8006d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	00ca      	lsls	r2, r1, #3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	4642      	mov	r2, r8
 8006d36:	189b      	adds	r3, r3, r2
 8006d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	460a      	mov	r2, r1
 8006d40:	eb42 0303 	adc.w	r3, r2, r3
 8006d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d60:	4649      	mov	r1, r9
 8006d62:	008b      	lsls	r3, r1, #2
 8006d64:	4641      	mov	r1, r8
 8006d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	008a      	lsls	r2, r1, #2
 8006d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d72:	f7f9 fee9 	bl	8000b48 <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	4b38      	ldr	r3, [pc, #224]	; (8006e60 <UART_SetConfig+0x4e4>)
 8006d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	2264      	movs	r2, #100	; 0x64
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	1acb      	subs	r3, r1, r3
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3332      	adds	r3, #50	; 0x32
 8006d90:	4a33      	ldr	r2, [pc, #204]	; (8006e60 <UART_SetConfig+0x4e4>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d9c:	441c      	add	r4, r3
 8006d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006da2:	2200      	movs	r2, #0
 8006da4:	673b      	str	r3, [r7, #112]	; 0x70
 8006da6:	677a      	str	r2, [r7, #116]	; 0x74
 8006da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	1891      	adds	r1, r2, r2
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	415b      	adcs	r3, r3
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	1851      	adds	r1, r2, r1
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	414b      	adcs	r3, r1
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	00cb      	lsls	r3, r1, #3
 8006dd8:	4651      	mov	r1, sl
 8006dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dde:	4651      	mov	r1, sl
 8006de0:	00ca      	lsls	r2, r1, #3
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	4642      	mov	r2, r8
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dee:	464b      	mov	r3, r9
 8006df0:	460a      	mov	r2, r1
 8006df2:	eb42 0303 	adc.w	r3, r2, r3
 8006df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60
 8006e02:	667a      	str	r2, [r7, #100]	; 0x64
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e10:	4649      	mov	r1, r9
 8006e12:	008b      	lsls	r3, r1, #2
 8006e14:	4641      	mov	r1, r8
 8006e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	008a      	lsls	r2, r1, #2
 8006e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e22:	f7f9 fe91 	bl	8000b48 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <UART_SetConfig+0x4e4>)
 8006e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	2164      	movs	r1, #100	; 0x64
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	3332      	adds	r3, #50	; 0x32
 8006e3e:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <UART_SetConfig+0x4e4>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f003 020f 	and.w	r2, r3, #15
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4422      	add	r2, r4
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e60:	51eb851f 	.word	0x51eb851f

08006e64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e76:	2b84      	cmp	r3, #132	; 0x84
 8006e78:	d005      	beq.n	8006e86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	3303      	adds	r3, #3
 8006e84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e98:	f000 fc8c 	bl	80077b4 <vTaskStartScheduler>
  
  return osOK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea4:	b089      	sub	sp, #36	; 0x24
 8006ea6:	af04      	add	r7, sp, #16
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <osThreadCreate+0x54>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01c      	beq.n	8006ef6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685c      	ldr	r4, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691e      	ldr	r6, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff ffc8 	bl	8006e64 <makeFreeRtosPriority>
 8006ed4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ede:	9202      	str	r2, [sp, #8]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	9100      	str	r1, [sp, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fa83 	bl	80073f6 <xTaskCreateStatic>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e01c      	b.n	8006f30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685c      	ldr	r4, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ffaa 	bl	8006e64 <makeFreeRtosPriority>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	9200      	str	r2, [sp, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fac5 	bl	80074b0 <xTaskCreate>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d001      	beq.n	8006f30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <osDelay+0x16>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	e000      	b.n	8006f52 <osDelay+0x18>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fbfa 	bl	800774c <vTaskDelay>
  
  return osOK;
 8006f58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006f68:	201c      	movs	r0, #28
 8006f6a:	f001 fb7d 	bl	8008668 <pvPortMalloc>
 8006f6e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f984 	bl	800728e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006f8c:	687b      	ldr	r3, [r7, #4]
	}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b090      	sub	sp, #64	; 0x40
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <xEventGroupWaitBits+0x56>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xEventGroupWaitBits+0x72>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	61bb      	str	r3, [r7, #24]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800700a:	f000 ff79 	bl	8007f00 <xTaskGetSchedulerState>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <xEventGroupWaitBits+0x82>
 8007014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <xEventGroupWaitBits+0x86>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <xEventGroupWaitBits+0x88>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	617b      	str	r3, [r7, #20]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800703a:	f000 fc25 	bl	8007888 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800704a:	f000 f8fe 	bl	800724a <prvTestWaitCondition>
 800704e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00e      	beq.n	8007074 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800705a:	2300      	movs	r3, #0
 800705c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d028      	beq.n	80070b6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	43db      	mvns	r3, r3
 800706c:	401a      	ands	r2, r3
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e020      	b.n	80070b6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800707e:	2301      	movs	r3, #1
 8007080:	633b      	str	r3, [r7, #48]	; 0x30
 8007082:	e018      	b.n	80070b6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007090:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800709e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	1d18      	adds	r0, r3, #4
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	4313      	orrs	r3, r2
 80070aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ac:	4619      	mov	r1, r3
 80070ae:	f000 fdaf 	bl	8007c10 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80070b6:	f000 fbf5 	bl	80078a4 <xTaskResumeAll>
 80070ba:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80070bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d031      	beq.n	8007126 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d107      	bne.n	80070d8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80070c8:	4b19      	ldr	r3, [pc, #100]	; (8007130 <xEventGroupWaitBits+0x198>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80070d8:	f000 ff30 	bl	8007f3c <uxTaskResetEventItemValue>
 80070dc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11a      	bne.n	800711e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80070e8:	f001 f9dc 	bl	80084a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80070ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80070f8:	f000 f8a7 	bl	800724a <prvTestWaitCondition>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	43db      	mvns	r3, r3
 8007110:	401a      	ands	r2, r3
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800711a:	f001 f9f3 	bl	8008504 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007128:	4618      	mov	r0, r3
 800712a:	3740      	adds	r7, #64	; 0x40
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08e      	sub	sp, #56	; 0x38
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800713e:	2300      	movs	r3, #0
 8007140:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <xEventGroupSetBits+0x32>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <xEventGroupSetBits+0x52>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	3304      	adds	r3, #4
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	3308      	adds	r3, #8
 8007190:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007192:	f000 fb79 	bl	8007888 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80071a8:	e03c      	b.n	8007224 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071c0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071c8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d108      	bne.n	80071e6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	4013      	ands	r3, r2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80071e0:	2301      	movs	r3, #1
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e4:	e008      	b.n	80071f8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	4013      	ands	r3, r2
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d101      	bne.n	80071f8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d010      	beq.n	8007220 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	4313      	orrs	r3, r2
 800720e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007218:	4619      	mov	r1, r3
 800721a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800721c:	f000 fd34 	bl	8007c88 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	429a      	cmp	r2, r3
 800722a:	d1be      	bne.n	80071aa <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	43db      	mvns	r3, r3
 8007234:	401a      	ands	r2, r3
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800723a:	f000 fb33 	bl	80078a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	681b      	ldr	r3, [r3, #0]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3738      	adds	r7, #56	; 0x38
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800724a:	b480      	push	{r7}
 800724c:	b087      	sub	sp, #28
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d107      	bne.n	8007270 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4013      	ands	r3, r2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800726a:	2301      	movs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e007      	b.n	8007280 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	d101      	bne.n	8007280 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007280:	697b      	ldr	r3, [r7, #20]
}
 8007282:	4618      	mov	r0, r3
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f103 0208 	add.w	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f103 0208 	add.w	r2, r3, #8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f103 0208 	add.w	r2, r3, #8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007346:	d103      	bne.n	8007350 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e00c      	b.n	800736a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3308      	adds	r3, #8
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	e002      	b.n	800735e <vListInsert+0x2e>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d2f6      	bcs.n	8007358 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6892      	ldr	r2, [r2, #8]
 80073b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6852      	ldr	r2, [r2, #4]
 80073c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d103      	bne.n	80073d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b08e      	sub	sp, #56	; 0x38
 80073fa:	af04      	add	r7, sp, #16
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <xTaskCreateStatic+0x2a>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	623b      	str	r3, [r7, #32]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <xTaskCreateStatic+0x46>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	61fb      	str	r3, [r7, #28]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800743c:	23a0      	movs	r3, #160	; 0xa0
 800743e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2ba0      	cmp	r3, #160	; 0xa0
 8007444:	d00a      	beq.n	800745c <xTaskCreateStatic+0x66>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	61bb      	str	r3, [r7, #24]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800745c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01e      	beq.n	80074a2 <xTaskCreateStatic+0xac>
 8007464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01b      	beq.n	80074a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007472:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	2202      	movs	r2, #2
 8007478:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800747c:	2300      	movs	r3, #0
 800747e:	9303      	str	r3, [sp, #12]
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	f107 0314 	add.w	r3, r7, #20
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f851 	bl	800753c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800749a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800749c:	f000 f8ec 	bl	8007678 <prvAddNewTaskToReadyList>
 80074a0:	e001      	b.n	80074a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074a6:	697b      	ldr	r3, [r7, #20]
	}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08c      	sub	sp, #48	; 0x30
 80074b4:	af04      	add	r7, sp, #16
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 f8cf 	bl	8008668 <pvPortMalloc>
 80074ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00e      	beq.n	80074f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074d2:	20a0      	movs	r0, #160	; 0xa0
 80074d4:	f001 f8c8 	bl	8008668 <pvPortMalloc>
 80074d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
 80074e6:	e005      	b.n	80074f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074e8:	6978      	ldr	r0, [r7, #20]
 80074ea:	f001 f989 	bl	8008800 <vPortFree>
 80074ee:	e001      	b.n	80074f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d017      	beq.n	800752a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	2300      	movs	r3, #0
 8007506:	9303      	str	r3, [sp, #12]
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f80f 	bl	800753c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800751e:	69f8      	ldr	r0, [r7, #28]
 8007520:	f000 f8aa 	bl	8007678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007524:	2301      	movs	r3, #1
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e002      	b.n	8007530 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800752a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800752e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007530:	69bb      	ldr	r3, [r7, #24]
	}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007554:	3b01      	subs	r3, #1
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <prvInitialiseNewTask+0x48>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	617b      	str	r3, [r7, #20]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01f      	beq.n	80075ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	e012      	b.n	80075b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	7819      	ldrb	r1, [r3, #0]
 8007598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	3334      	adds	r3, #52	; 0x34
 80075a0:	460a      	mov	r2, r1
 80075a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	3301      	adds	r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b0f      	cmp	r3, #15
 80075ba:	d9e9      	bls.n	8007590 <prvInitialiseNewTask+0x54>
 80075bc:	e000      	b.n	80075c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80075be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075c8:	e003      	b.n	80075d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d901      	bls.n	80075dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075d8:	2306      	movs	r3, #6
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	2200      	movs	r2, #0
 80075ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fe6b 	bl	80072ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	3318      	adds	r3, #24
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fe66 	bl	80072ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	f1c3 0207 	rsb	r2, r3, #7
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	334c      	adds	r3, #76	; 0x4c
 800762c:	224c      	movs	r2, #76	; 0x4c
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f001 fa03 	bl	8008a3c <memset>
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	4a0c      	ldr	r2, [pc, #48]	; (800766c <prvInitialiseNewTask+0x130>)
 800763a:	651a      	str	r2, [r3, #80]	; 0x50
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <prvInitialiseNewTask+0x134>)
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	4a0b      	ldr	r2, [pc, #44]	; (8007674 <prvInitialiseNewTask+0x138>)
 8007646:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	68f9      	ldr	r1, [r7, #12]
 800764c:	69b8      	ldr	r0, [r7, #24]
 800764e:	f000 fdfd 	bl	800824c <pxPortInitialiseStack>
 8007652:	4602      	mov	r2, r0
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007662:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007664:	bf00      	nop
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20004380 	.word	0x20004380
 8007670:	200043e8 	.word	0x200043e8
 8007674:	20004450 	.word	0x20004450

08007678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007680:	f000 ff10 	bl	80084a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007684:	4b2a      	ldr	r3, [pc, #168]	; (8007730 <prvAddNewTaskToReadyList+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	4a29      	ldr	r2, [pc, #164]	; (8007730 <prvAddNewTaskToReadyList+0xb8>)
 800768c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800768e:	4b29      	ldr	r3, [pc, #164]	; (8007734 <prvAddNewTaskToReadyList+0xbc>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007696:	4a27      	ldr	r2, [pc, #156]	; (8007734 <prvAddNewTaskToReadyList+0xbc>)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800769c:	4b24      	ldr	r3, [pc, #144]	; (8007730 <prvAddNewTaskToReadyList+0xb8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d110      	bne.n	80076c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076a4:	f000 fb6a 	bl	8007d7c <prvInitialiseTaskLists>
 80076a8:	e00d      	b.n	80076c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076aa:	4b23      	ldr	r3, [pc, #140]	; (8007738 <prvAddNewTaskToReadyList+0xc0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076b2:	4b20      	ldr	r3, [pc, #128]	; (8007734 <prvAddNewTaskToReadyList+0xbc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	429a      	cmp	r2, r3
 80076be:	d802      	bhi.n	80076c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076c0:	4a1c      	ldr	r2, [pc, #112]	; (8007734 <prvAddNewTaskToReadyList+0xbc>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076c6:	4b1d      	ldr	r3, [pc, #116]	; (800773c <prvAddNewTaskToReadyList+0xc4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	4a1b      	ldr	r2, [pc, #108]	; (800773c <prvAddNewTaskToReadyList+0xc4>)
 80076ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2201      	movs	r2, #1
 80076d6:	409a      	lsls	r2, r3
 80076d8:	4b19      	ldr	r3, [pc, #100]	; (8007740 <prvAddNewTaskToReadyList+0xc8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4313      	orrs	r3, r2
 80076de:	4a18      	ldr	r2, [pc, #96]	; (8007740 <prvAddNewTaskToReadyList+0xc8>)
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4a15      	ldr	r2, [pc, #84]	; (8007744 <prvAddNewTaskToReadyList+0xcc>)
 80076f0:	441a      	add	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f7ff fdf5 	bl	80072e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076fe:	f000 ff01 	bl	8008504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <prvAddNewTaskToReadyList+0xc0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00e      	beq.n	8007728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <prvAddNewTaskToReadyList+0xbc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	429a      	cmp	r2, r3
 8007716:	d207      	bcs.n	8007728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <prvAddNewTaskToReadyList+0xd0>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	2000072c 	.word	0x2000072c
 8007734:	2000062c 	.word	0x2000062c
 8007738:	20000738 	.word	0x20000738
 800773c:	20000748 	.word	0x20000748
 8007740:	20000734 	.word	0x20000734
 8007744:	20000630 	.word	0x20000630
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d017      	beq.n	800778e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <vTaskDelay+0x60>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <vTaskDelay+0x30>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60bb      	str	r3, [r7, #8]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800777c:	f000 f884 	bl	8007888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fcfc 	bl	8008180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007788:	f000 f88c 	bl	80078a4 <xTaskResumeAll>
 800778c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d107      	bne.n	80077a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007794:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <vTaskDelay+0x64>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000754 	.word	0x20000754
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077c2:	463a      	mov	r2, r7
 80077c4:	1d39      	adds	r1, r7, #4
 80077c6:	f107 0308 	add.w	r3, r7, #8
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7f9 feae 	bl	800152c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	9202      	str	r2, [sp, #8]
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	2300      	movs	r3, #0
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2300      	movs	r3, #0
 80077e0:	460a      	mov	r2, r1
 80077e2:	4921      	ldr	r1, [pc, #132]	; (8007868 <vTaskStartScheduler+0xb4>)
 80077e4:	4821      	ldr	r0, [pc, #132]	; (800786c <vTaskStartScheduler+0xb8>)
 80077e6:	f7ff fe06 	bl	80073f6 <xTaskCreateStatic>
 80077ea:	4603      	mov	r3, r0
 80077ec:	4a20      	ldr	r2, [pc, #128]	; (8007870 <vTaskStartScheduler+0xbc>)
 80077ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077f0:	4b1f      	ldr	r3, [pc, #124]	; (8007870 <vTaskStartScheduler+0xbc>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077f8:	2301      	movs	r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e001      	b.n	8007802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d11b      	bne.n	8007840 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	613b      	str	r3, [r7, #16]
}
 800781a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800781c:	4b15      	ldr	r3, [pc, #84]	; (8007874 <vTaskStartScheduler+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	334c      	adds	r3, #76	; 0x4c
 8007822:	4a15      	ldr	r2, [pc, #84]	; (8007878 <vTaskStartScheduler+0xc4>)
 8007824:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007826:	4b15      	ldr	r3, [pc, #84]	; (800787c <vTaskStartScheduler+0xc8>)
 8007828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800782c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800782e:	4b14      	ldr	r3, [pc, #80]	; (8007880 <vTaskStartScheduler+0xcc>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007834:	4b13      	ldr	r3, [pc, #76]	; (8007884 <vTaskStartScheduler+0xd0>)
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800783a:	f000 fd91 	bl	8008360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800783e:	e00e      	b.n	800785e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007846:	d10a      	bne.n	800785e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60fb      	str	r3, [r7, #12]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <vTaskStartScheduler+0xa8>
}
 800785e:	bf00      	nop
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	08009f94 	.word	0x08009f94
 800786c:	08007d4d 	.word	0x08007d4d
 8007870:	20000750 	.word	0x20000750
 8007874:	2000062c 	.word	0x2000062c
 8007878:	20000060 	.word	0x20000060
 800787c:	2000074c 	.word	0x2000074c
 8007880:	20000738 	.word	0x20000738
 8007884:	20000730 	.word	0x20000730

08007888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <vTaskSuspendAll+0x18>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a03      	ldr	r2, [pc, #12]	; (80078a0 <vTaskSuspendAll+0x18>)
 8007894:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000754 	.word	0x20000754

080078a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078b2:	4b41      	ldr	r3, [pc, #260]	; (80079b8 <xTaskResumeAll+0x114>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	603b      	str	r3, [r7, #0]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078d0:	f000 fde8 	bl	80084a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078d4:	4b38      	ldr	r3, [pc, #224]	; (80079b8 <xTaskResumeAll+0x114>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	4a37      	ldr	r2, [pc, #220]	; (80079b8 <xTaskResumeAll+0x114>)
 80078dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078de:	4b36      	ldr	r3, [pc, #216]	; (80079b8 <xTaskResumeAll+0x114>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d161      	bne.n	80079aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078e6:	4b35      	ldr	r3, [pc, #212]	; (80079bc <xTaskResumeAll+0x118>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d05d      	beq.n	80079aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ee:	e02e      	b.n	800794e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f0:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <xTaskResumeAll+0x11c>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3318      	adds	r3, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff fd50 	bl	80073a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3304      	adds	r3, #4
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fd4b 	bl	80073a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	2201      	movs	r2, #1
 8007912:	409a      	lsls	r2, r3
 8007914:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <xTaskResumeAll+0x120>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4313      	orrs	r3, r2
 800791a:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <xTaskResumeAll+0x120>)
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4a27      	ldr	r2, [pc, #156]	; (80079c8 <xTaskResumeAll+0x124>)
 800792c:	441a      	add	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f7ff fcd7 	bl	80072e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <xTaskResumeAll+0x128>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	429a      	cmp	r2, r3
 8007946:	d302      	bcc.n	800794e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007948:	4b21      	ldr	r3, [pc, #132]	; (80079d0 <xTaskResumeAll+0x12c>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800794e:	4b1c      	ldr	r3, [pc, #112]	; (80079c0 <xTaskResumeAll+0x11c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1cc      	bne.n	80078f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800795c:	f000 fab0 	bl	8007ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007960:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <xTaskResumeAll+0x130>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d010      	beq.n	800798e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800796c:	f000 f836 	bl	80079dc <xTaskIncrementTick>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007976:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <xTaskResumeAll+0x12c>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3b01      	subs	r3, #1
 8007980:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f1      	bne.n	800796c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007988:	4b12      	ldr	r3, [pc, #72]	; (80079d4 <xTaskResumeAll+0x130>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800798e:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <xTaskResumeAll+0x12c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007996:	2301      	movs	r3, #1
 8007998:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800799a:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <xTaskResumeAll+0x134>)
 800799c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079aa:	f000 fdab 	bl	8008504 <vPortExitCritical>

	return xAlreadyYielded;
 80079ae:	68bb      	ldr	r3, [r7, #8]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	20000754 	.word	0x20000754
 80079bc:	2000072c 	.word	0x2000072c
 80079c0:	200006ec 	.word	0x200006ec
 80079c4:	20000734 	.word	0x20000734
 80079c8:	20000630 	.word	0x20000630
 80079cc:	2000062c 	.word	0x2000062c
 80079d0:	20000740 	.word	0x20000740
 80079d4:	2000073c 	.word	0x2000073c
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e6:	4b4e      	ldr	r3, [pc, #312]	; (8007b20 <xTaskIncrementTick+0x144>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 808e 	bne.w	8007b0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079f0:	4b4c      	ldr	r3, [pc, #304]	; (8007b24 <xTaskIncrementTick+0x148>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079f8:	4a4a      	ldr	r2, [pc, #296]	; (8007b24 <xTaskIncrementTick+0x148>)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d120      	bne.n	8007a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a04:	4b48      	ldr	r3, [pc, #288]	; (8007b28 <xTaskIncrementTick+0x14c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	603b      	str	r3, [r7, #0]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <xTaskIncrementTick+0x46>
 8007a24:	4b40      	ldr	r3, [pc, #256]	; (8007b28 <xTaskIncrementTick+0x14c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	4b40      	ldr	r3, [pc, #256]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a3e      	ldr	r2, [pc, #248]	; (8007b28 <xTaskIncrementTick+0x14c>)
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4a3e      	ldr	r2, [pc, #248]	; (8007b2c <xTaskIncrementTick+0x150>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	4b3d      	ldr	r3, [pc, #244]	; (8007b30 <xTaskIncrementTick+0x154>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	4a3c      	ldr	r2, [pc, #240]	; (8007b30 <xTaskIncrementTick+0x154>)
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	f000 fa3d 	bl	8007ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a46:	4b3b      	ldr	r3, [pc, #236]	; (8007b34 <xTaskIncrementTick+0x158>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d348      	bcc.n	8007ae2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a50:	4b35      	ldr	r3, [pc, #212]	; (8007b28 <xTaskIncrementTick+0x14c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a5a:	4b36      	ldr	r3, [pc, #216]	; (8007b34 <xTaskIncrementTick+0x158>)
 8007a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a60:	601a      	str	r2, [r3, #0]
					break;
 8007a62:	e03e      	b.n	8007ae2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a64:	4b30      	ldr	r3, [pc, #192]	; (8007b28 <xTaskIncrementTick+0x14c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d203      	bcs.n	8007a84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a7c:	4a2d      	ldr	r2, [pc, #180]	; (8007b34 <xTaskIncrementTick+0x158>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a82:	e02e      	b.n	8007ae2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fc8a 	bl	80073a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	3318      	adds	r3, #24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff fc81 	bl	80073a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	409a      	lsls	r2, r3
 8007aa8:	4b23      	ldr	r3, [pc, #140]	; (8007b38 <xTaskIncrementTick+0x15c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	4a22      	ldr	r2, [pc, #136]	; (8007b38 <xTaskIncrementTick+0x15c>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <xTaskIncrementTick+0x160>)
 8007ac0:	441a      	add	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f7ff fc0d 	bl	80072e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad2:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <xTaskIncrementTick+0x164>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d3b9      	bcc.n	8007a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007adc:	2301      	movs	r3, #1
 8007ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae0:	e7b6      	b.n	8007a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ae2:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <xTaskIncrementTick+0x164>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae8:	4914      	ldr	r1, [pc, #80]	; (8007b3c <xTaskIncrementTick+0x160>)
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d901      	bls.n	8007afe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <xTaskIncrementTick+0x168>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b06:	2301      	movs	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	e004      	b.n	8007b16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <xTaskIncrementTick+0x16c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	4a0d      	ldr	r2, [pc, #52]	; (8007b48 <xTaskIncrementTick+0x16c>)
 8007b14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b16:	697b      	ldr	r3, [r7, #20]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000754 	.word	0x20000754
 8007b24:	20000730 	.word	0x20000730
 8007b28:	200006e4 	.word	0x200006e4
 8007b2c:	200006e8 	.word	0x200006e8
 8007b30:	20000744 	.word	0x20000744
 8007b34:	2000074c 	.word	0x2000074c
 8007b38:	20000734 	.word	0x20000734
 8007b3c:	20000630 	.word	0x20000630
 8007b40:	2000062c 	.word	0x2000062c
 8007b44:	20000740 	.word	0x20000740
 8007b48:	2000073c 	.word	0x2000073c

08007b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b52:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <vTaskSwitchContext+0xac>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b5a:	4b28      	ldr	r3, [pc, #160]	; (8007bfc <vTaskSwitchContext+0xb0>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b60:	e044      	b.n	8007bec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007b62:	4b26      	ldr	r3, [pc, #152]	; (8007bfc <vTaskSwitchContext+0xb0>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <vTaskSwitchContext+0xb4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	fab3 f383 	clz	r3, r3
 8007b74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	f1c3 031f 	rsb	r3, r3, #31
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	4921      	ldr	r1, [pc, #132]	; (8007c04 <vTaskSwitchContext+0xb8>)
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	607b      	str	r3, [r7, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <vTaskSwitchContext+0x5a>
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <vTaskSwitchContext+0xb8>)
 8007bb4:	4413      	add	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d104      	bne.n	8007bd8 <vTaskSwitchContext+0x8c>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <vTaskSwitchContext+0xbc>)
 8007be0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <vTaskSwitchContext+0xbc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	334c      	adds	r3, #76	; 0x4c
 8007be8:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <vTaskSwitchContext+0xc0>)
 8007bea:	6013      	str	r3, [r2, #0]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000754 	.word	0x20000754
 8007bfc:	20000740 	.word	0x20000740
 8007c00:	20000734 	.word	0x20000734
 8007c04:	20000630 	.word	0x20000630
 8007c08:	2000062c 	.word	0x2000062c
 8007c0c:	20000060 	.word	0x20000060

08007c10 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	617b      	str	r3, [r7, #20]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007c38:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007c60:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c62:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3318      	adds	r3, #24
 8007c68:	4619      	mov	r1, r3
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fb3c 	bl	80072e8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c70:	2101      	movs	r1, #1
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa84 	bl	8008180 <prvAddCurrentTaskToDelayedList>
}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000754 	.word	0x20000754
 8007c84:	2000062c 	.word	0x2000062c

08007c88 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007c92:	4b29      	ldr	r3, [pc, #164]	; (8007d38 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	613b      	str	r3, [r7, #16]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fb60 	bl	80073a2 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fb5b 	bl	80073a2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	409a      	lsls	r2, r3
 8007cf4:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4a0d      	ldr	r2, [pc, #52]	; (8007d40 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d0c:	441a      	add	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	4610      	mov	r0, r2
 8007d16:	f7ff fae7 	bl	80072e8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d902      	bls.n	8007d2e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
	}
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000754 	.word	0x20000754
 8007d3c:	20000734 	.word	0x20000734
 8007d40:	20000630 	.word	0x20000630
 8007d44:	2000062c 	.word	0x2000062c
 8007d48:	20000740 	.word	0x20000740

08007d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d54:	f000 f852 	bl	8007dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d58:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <prvIdleTask+0x28>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d9f9      	bls.n	8007d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <prvIdleTask+0x2c>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d70:	e7f0      	b.n	8007d54 <prvIdleTask+0x8>
 8007d72:	bf00      	nop
 8007d74:	20000630 	.word	0x20000630
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d82:	2300      	movs	r3, #0
 8007d84:	607b      	str	r3, [r7, #4]
 8007d86:	e00c      	b.n	8007da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4a12      	ldr	r2, [pc, #72]	; (8007ddc <prvInitialiseTaskLists+0x60>)
 8007d94:	4413      	add	r3, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fa79 	bl	800728e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	607b      	str	r3, [r7, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b06      	cmp	r3, #6
 8007da6:	d9ef      	bls.n	8007d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007da8:	480d      	ldr	r0, [pc, #52]	; (8007de0 <prvInitialiseTaskLists+0x64>)
 8007daa:	f7ff fa70 	bl	800728e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dae:	480d      	ldr	r0, [pc, #52]	; (8007de4 <prvInitialiseTaskLists+0x68>)
 8007db0:	f7ff fa6d 	bl	800728e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007db4:	480c      	ldr	r0, [pc, #48]	; (8007de8 <prvInitialiseTaskLists+0x6c>)
 8007db6:	f7ff fa6a 	bl	800728e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dba:	480c      	ldr	r0, [pc, #48]	; (8007dec <prvInitialiseTaskLists+0x70>)
 8007dbc:	f7ff fa67 	bl	800728e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dc0:	480b      	ldr	r0, [pc, #44]	; (8007df0 <prvInitialiseTaskLists+0x74>)
 8007dc2:	f7ff fa64 	bl	800728e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <prvInitialiseTaskLists+0x78>)
 8007dc8:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <prvInitialiseTaskLists+0x64>)
 8007dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <prvInitialiseTaskLists+0x7c>)
 8007dce:	4a05      	ldr	r2, [pc, #20]	; (8007de4 <prvInitialiseTaskLists+0x68>)
 8007dd0:	601a      	str	r2, [r3, #0]
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000630 	.word	0x20000630
 8007de0:	200006bc 	.word	0x200006bc
 8007de4:	200006d0 	.word	0x200006d0
 8007de8:	200006ec 	.word	0x200006ec
 8007dec:	20000700 	.word	0x20000700
 8007df0:	20000718 	.word	0x20000718
 8007df4:	200006e4 	.word	0x200006e4
 8007df8:	200006e8 	.word	0x200006e8

08007dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e02:	e019      	b.n	8007e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e04:	f000 fb4e 	bl	80084a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e08:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <prvCheckTasksWaitingTermination+0x50>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fac4 	bl	80073a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <prvCheckTasksWaitingTermination+0x54>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	4a0b      	ldr	r2, [pc, #44]	; (8007e50 <prvCheckTasksWaitingTermination+0x54>)
 8007e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <prvCheckTasksWaitingTermination+0x58>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <prvCheckTasksWaitingTermination+0x58>)
 8007e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e2e:	f000 fb69 	bl	8008504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f810 	bl	8007e58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <prvCheckTasksWaitingTermination+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e1      	bne.n	8007e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20000700 	.word	0x20000700
 8007e50:	2000072c 	.word	0x2000072c
 8007e54:	20000714 	.word	0x20000714

08007e58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	334c      	adds	r3, #76	; 0x4c
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fdf1 	bl	8008a4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d108      	bne.n	8007e86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fcc1 	bl	8008800 <vPortFree>
				vPortFree( pxTCB );
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fcbe 	bl	8008800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e84:	e018      	b.n	8007eb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d103      	bne.n	8007e98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fcb5 	bl	8008800 <vPortFree>
	}
 8007e96:	e00f      	b.n	8007eb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d00a      	beq.n	8007eb8 <prvDeleteTCB+0x60>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60fb      	str	r3, [r7, #12]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <prvDeleteTCB+0x5e>
	}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <prvResetNextTaskUnblockTime+0x38>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <prvResetNextTaskUnblockTime+0x3c>)
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ed8:	e008      	b.n	8007eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <prvResetNextTaskUnblockTime+0x38>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4a04      	ldr	r2, [pc, #16]	; (8007efc <prvResetNextTaskUnblockTime+0x3c>)
 8007eea:	6013      	str	r3, [r2, #0]
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	200006e4 	.word	0x200006e4
 8007efc:	2000074c 	.word	0x2000074c

08007f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <xTaskGetSchedulerState+0x34>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	607b      	str	r3, [r7, #4]
 8007f12:	e008      	b.n	8007f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f14:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <xTaskGetSchedulerState+0x38>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	607b      	str	r3, [r7, #4]
 8007f20:	e001      	b.n	8007f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f26:	687b      	ldr	r3, [r7, #4]
	}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	20000738 	.word	0x20000738
 8007f38:	20000754 	.word	0x20000754

08007f3c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <uxTaskResetEventItemValue+0x2c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <uxTaskResetEventItemValue+0x2c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <uxTaskResetEventItemValue+0x2c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f1c2 0207 	rsb	r2, r2, #7
 8007f58:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007f5a:	687b      	ldr	r3, [r7, #4]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	2000062c 	.word	0x2000062c

08007f6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007f76:	f000 fa95 	bl	80084a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007f7a:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <ulTaskNotifyTake+0x90>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d113      	bne.n	8007fae <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <ulTaskNotifyTake+0x90>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f96:	2101      	movs	r1, #1
 8007f98:	6838      	ldr	r0, [r7, #0]
 8007f9a:	f000 f8f1 	bl	8008180 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007f9e:	4b18      	ldr	r3, [pc, #96]	; (8008000 <ulTaskNotifyTake+0x94>)
 8007fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007fae:	f000 faa9 	bl	8008504 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007fb2:	f000 fa77 	bl	80084a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007fb6:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <ulTaskNotifyTake+0x90>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fbe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00e      	beq.n	8007fe4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <ulTaskNotifyTake+0x90>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007fd6:	e005      	b.n	8007fe4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007fd8:	4b08      	ldr	r3, [pc, #32]	; (8007ffc <ulTaskNotifyTake+0x90>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	3a01      	subs	r2, #1
 8007fe0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <ulTaskNotifyTake+0x90>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8007fee:	f000 fa89 	bl	8008504 <vPortExitCritical>

		return ulReturn;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	2000062c 	.word	0x2000062c
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008014:	2301      	movs	r3, #1
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <xTaskGenericNotify+0x30>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	61bb      	str	r3, [r7, #24]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008038:	f000 fa34 	bl	80084a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8008052:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d82d      	bhi.n	80080be <xTaskGenericNotify+0xba>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <xTaskGenericNotify+0x64>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	080080e1 	.word	0x080080e1
 800806c:	0800807d 	.word	0x0800807d
 8008070:	0800808f 	.word	0x0800808f
 8008074:	0800809f 	.word	0x0800809f
 8008078:	080080a9 	.word	0x080080a9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	431a      	orrs	r2, r3
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800808c:	e02b      	b.n	80080e6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800809c:	e023      	b.n	80080e6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80080a6:	e01e      	b.n	80080e6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80080a8:	7ffb      	ldrb	r3, [r7, #31]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d004      	beq.n	80080b8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80080b6:	e016      	b.n	80080e6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80080bc:	e013      	b.n	80080e6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c8:	d00c      	beq.n	80080e4 <xTaskGenericNotify+0xe0>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	617b      	str	r3, [r7, #20]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <xTaskGenericNotify+0xda>
					break;
 80080e0:	bf00      	nop
 80080e2:	e000      	b.n	80080e6 <xTaskGenericNotify+0xe2>

					break;
 80080e4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80080e6:	7ffb      	ldrb	r3, [r7, #31]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d139      	bne.n	8008160 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff f956 	bl	80073a2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	2201      	movs	r2, #1
 80080fc:	409a      	lsls	r2, r3
 80080fe:	4b1c      	ldr	r3, [pc, #112]	; (8008170 <xTaskGenericNotify+0x16c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4313      	orrs	r3, r2
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <xTaskGenericNotify+0x16c>)
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4a17      	ldr	r2, [pc, #92]	; (8008174 <xTaskGenericNotify+0x170>)
 8008116:	441a      	add	r2, r3
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	3304      	adds	r3, #4
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7ff f8e2 	bl	80072e8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <xTaskGenericNotify+0x13e>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	613b      	str	r3, [r7, #16]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <xTaskGenericNotify+0x174>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	429a      	cmp	r2, r3
 800814e:	d907      	bls.n	8008160 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <xTaskGenericNotify+0x178>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008160:	f000 f9d0 	bl	8008504 <vPortExitCritical>

		return xReturn;
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008166:	4618      	mov	r0, r3
 8008168:	3728      	adds	r7, #40	; 0x28
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000734 	.word	0x20000734
 8008174:	20000630 	.word	0x20000630
 8008178:	2000062c 	.word	0x2000062c
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800818a:	4b29      	ldr	r3, [pc, #164]	; (8008230 <prvAddCurrentTaskToDelayedList+0xb0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3304      	adds	r3, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff f903 	bl	80073a2 <uxListRemove>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	2201      	movs	r2, #1
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43da      	mvns	r2, r3
 80081b0:	4b21      	ldr	r3, [pc, #132]	; (8008238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4013      	ands	r3, r2
 80081b6:	4a20      	ldr	r2, [pc, #128]	; (8008238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c0:	d10a      	bne.n	80081d8 <prvAddCurrentTaskToDelayedList+0x58>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c8:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	481a      	ldr	r0, [pc, #104]	; (800823c <prvAddCurrentTaskToDelayedList+0xbc>)
 80081d2:	f7ff f889 	bl	80072e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d6:	e026      	b.n	8008226 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081e0:	4b14      	ldr	r3, [pc, #80]	; (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d209      	bcs.n	8008204 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f0:	4b13      	ldr	r3, [pc, #76]	; (8008240 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f7ff f897 	bl	8007330 <vListInsert>
}
 8008202:	e010      	b.n	8008226 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008204:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3304      	adds	r3, #4
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f7ff f88d 	bl	8007330 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	429a      	cmp	r2, r3
 800821e:	d202      	bcs.n	8008226 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6013      	str	r3, [r2, #0]
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000730 	.word	0x20000730
 8008234:	2000062c 	.word	0x2000062c
 8008238:	20000734 	.word	0x20000734
 800823c:	20000718 	.word	0x20000718
 8008240:	200006e8 	.word	0x200006e8
 8008244:	200006e4 	.word	0x200006e4
 8008248:	2000074c 	.word	0x2000074c

0800824c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3b04      	subs	r3, #4
 800825c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3b04      	subs	r3, #4
 800826a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f023 0201 	bic.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3b04      	subs	r3, #4
 800827a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800827c:	4a0c      	ldr	r2, [pc, #48]	; (80082b0 <pxPortInitialiseStack+0x64>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b14      	subs	r3, #20
 8008286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b04      	subs	r3, #4
 8008292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f06f 0202 	mvn.w	r2, #2
 800829a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3b20      	subs	r3, #32
 80082a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	080082b5 	.word	0x080082b5

080082b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <prvTaskExitError+0x54>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c6:	d00a      	beq.n	80082de <prvTaskExitError+0x2a>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <prvTaskExitError+0x28>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60bb      	str	r3, [r7, #8]
}
 80082f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082f2:	bf00      	nop
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0fc      	beq.n	80082f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20000010 	.word	0x20000010
 800830c:	00000000 	.word	0x00000000

08008310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <pxCurrentTCBConst2>)
 8008312:	6819      	ldr	r1, [r3, #0]
 8008314:	6808      	ldr	r0, [r1, #0]
 8008316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f380 8809 	msr	PSP, r0
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8811 	msr	BASEPRI, r0
 800832a:	4770      	bx	lr
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst2>:
 8008330:	2000062c 	.word	0x2000062c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008338:	4808      	ldr	r0, [pc, #32]	; (800835c <prvPortStartFirstTask+0x24>)
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	6800      	ldr	r0, [r0, #0]
 800833e:	f380 8808 	msr	MSP, r0
 8008342:	f04f 0000 	mov.w	r0, #0
 8008346:	f380 8814 	msr	CONTROL, r0
 800834a:	b662      	cpsie	i
 800834c:	b661      	cpsie	f
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	df00      	svc	0
 8008358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800835a:	bf00      	nop
 800835c:	e000ed08 	.word	0xe000ed08

08008360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008366:	4b46      	ldr	r3, [pc, #280]	; (8008480 <xPortStartScheduler+0x120>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a46      	ldr	r2, [pc, #280]	; (8008484 <xPortStartScheduler+0x124>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d10a      	bne.n	8008386 <xPortStartScheduler+0x26>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	613b      	str	r3, [r7, #16]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008386:	4b3e      	ldr	r3, [pc, #248]	; (8008480 <xPortStartScheduler+0x120>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a3f      	ldr	r2, [pc, #252]	; (8008488 <xPortStartScheduler+0x128>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10a      	bne.n	80083a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	60fb      	str	r3, [r7, #12]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083a6:	4b39      	ldr	r3, [pc, #228]	; (800848c <xPortStartScheduler+0x12c>)
 80083a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	22ff      	movs	r2, #255	; 0xff
 80083b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	4b31      	ldr	r3, [pc, #196]	; (8008490 <xPortStartScheduler+0x130>)
 80083cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <xPortStartScheduler+0x134>)
 80083d0:	2207      	movs	r2, #7
 80083d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083d4:	e009      	b.n	80083ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083d6:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <xPortStartScheduler+0x134>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3b01      	subs	r3, #1
 80083dc:	4a2d      	ldr	r2, [pc, #180]	; (8008494 <xPortStartScheduler+0x134>)
 80083de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f2:	2b80      	cmp	r3, #128	; 0x80
 80083f4:	d0ef      	beq.n	80083d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083f6:	4b27      	ldr	r3, [pc, #156]	; (8008494 <xPortStartScheduler+0x134>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1c3 0307 	rsb	r3, r3, #7
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d00a      	beq.n	8008418 <xPortStartScheduler+0xb8>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60bb      	str	r3, [r7, #8]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008418:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <xPortStartScheduler+0x134>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	4a1d      	ldr	r2, [pc, #116]	; (8008494 <xPortStartScheduler+0x134>)
 8008420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008422:	4b1c      	ldr	r3, [pc, #112]	; (8008494 <xPortStartScheduler+0x134>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800842a:	4a1a      	ldr	r2, [pc, #104]	; (8008494 <xPortStartScheduler+0x134>)
 800842c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008436:	4b18      	ldr	r3, [pc, #96]	; (8008498 <xPortStartScheduler+0x138>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <xPortStartScheduler+0x138>)
 800843c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <xPortStartScheduler+0x138>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a14      	ldr	r2, [pc, #80]	; (8008498 <xPortStartScheduler+0x138>)
 8008448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800844c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800844e:	f000 f8dd 	bl	800860c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008452:	4b12      	ldr	r3, [pc, #72]	; (800849c <xPortStartScheduler+0x13c>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008458:	f000 f8fc 	bl	8008654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800845c:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <xPortStartScheduler+0x140>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <xPortStartScheduler+0x140>)
 8008462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008468:	f7ff ff66 	bl	8008338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800846c:	f7ff fb6e 	bl	8007b4c <vTaskSwitchContext>
	prvTaskExitError();
 8008470:	f7ff ff20 	bl	80082b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	e000ed00 	.word	0xe000ed00
 8008484:	410fc271 	.word	0x410fc271
 8008488:	410fc270 	.word	0x410fc270
 800848c:	e000e400 	.word	0xe000e400
 8008490:	20000758 	.word	0x20000758
 8008494:	2000075c 	.word	0x2000075c
 8008498:	e000ed20 	.word	0xe000ed20
 800849c:	20000010 	.word	0x20000010
 80084a0:	e000ef34 	.word	0xe000ef34

080084a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	607b      	str	r3, [r7, #4]
}
 80084bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <vPortEnterCritical+0x58>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3301      	adds	r3, #1
 80084c4:	4a0d      	ldr	r2, [pc, #52]	; (80084fc <vPortEnterCritical+0x58>)
 80084c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <vPortEnterCritical+0x58>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10f      	bne.n	80084f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <vPortEnterCritical+0x5c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	603b      	str	r3, [r7, #0]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <vPortEnterCritical+0x4a>
	}
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20000010 	.word	0x20000010
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <vPortExitCritical+0x50>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <vPortExitCritical+0x24>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	607b      	str	r3, [r7, #4]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008528:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <vPortExitCritical+0x50>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3b01      	subs	r3, #1
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <vPortExitCritical+0x50>)
 8008530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008532:	4b08      	ldr	r3, [pc, #32]	; (8008554 <vPortExitCritical+0x50>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <vPortExitCritical+0x42>
 800853a:	2300      	movs	r3, #0
 800853c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000010 	.word	0x20000010
	...

08008560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008560:	f3ef 8009 	mrs	r0, PSP
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <pxCurrentTCBConst>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f01e 0f10 	tst.w	lr, #16
 8008570:	bf08      	it	eq
 8008572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	6010      	str	r0, [r2, #0]
 800857c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008584:	f380 8811 	msr	BASEPRI, r0
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f7ff fadc 	bl	8007b4c <vTaskSwitchContext>
 8008594:	f04f 0000 	mov.w	r0, #0
 8008598:	f380 8811 	msr	BASEPRI, r0
 800859c:	bc09      	pop	{r0, r3}
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	6808      	ldr	r0, [r1, #0]
 80085a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a6:	f01e 0f10 	tst.w	lr, #16
 80085aa:	bf08      	it	eq
 80085ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085b0:	f380 8809 	msr	PSP, r0
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst>:
 80085c0:	2000062c 	.word	0x2000062c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	607b      	str	r3, [r7, #4]
}
 80085e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085e2:	f7ff f9fb 	bl	80079dc <xTaskIncrementTick>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085ec:	4b06      	ldr	r3, [pc, #24]	; (8008608 <SysTick_Handler+0x40>)
 80085ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	f383 8811 	msr	BASEPRI, r3
}
 80085fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <vPortSetupTimerInterrupt+0x34>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008616:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <vPortSetupTimerInterrupt+0x38>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <vPortSetupTimerInterrupt+0x3c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a0a      	ldr	r2, [pc, #40]	; (800864c <vPortSetupTimerInterrupt+0x40>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	099b      	lsrs	r3, r3, #6
 8008628:	4a09      	ldr	r2, [pc, #36]	; (8008650 <vPortSetupTimerInterrupt+0x44>)
 800862a:	3b01      	subs	r3, #1
 800862c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800862e:	4b04      	ldr	r3, [pc, #16]	; (8008640 <vPortSetupTimerInterrupt+0x34>)
 8008630:	2207      	movs	r2, #7
 8008632:	601a      	str	r2, [r3, #0]
}
 8008634:	bf00      	nop
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	e000e010 	.word	0xe000e010
 8008644:	e000e018 	.word	0xe000e018
 8008648:	20000004 	.word	0x20000004
 800864c:	10624dd3 	.word	0x10624dd3
 8008650:	e000e014 	.word	0xe000e014

08008654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008664 <vPortEnableVFP+0x10>
 8008658:	6801      	ldr	r1, [r0, #0]
 800865a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800865e:	6001      	str	r1, [r0, #0]
 8008660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008662:	bf00      	nop
 8008664:	e000ed88 	.word	0xe000ed88

08008668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008670:	2300      	movs	r3, #0
 8008672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008674:	f7ff f908 	bl	8007888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008678:	4b5b      	ldr	r3, [pc, #364]	; (80087e8 <pvPortMalloc+0x180>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008680:	f000 f920 	bl	80088c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008684:	4b59      	ldr	r3, [pc, #356]	; (80087ec <pvPortMalloc+0x184>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4013      	ands	r3, r2
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8093 	bne.w	80087b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01d      	beq.n	80086d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008698:	2208      	movs	r2, #8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d014      	beq.n	80086d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f023 0307 	bic.w	r3, r3, #7
 80086b0:	3308      	adds	r3, #8
 80086b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <pvPortMalloc+0x6c>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	617b      	str	r3, [r7, #20]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d06e      	beq.n	80087b8 <pvPortMalloc+0x150>
 80086da:	4b45      	ldr	r3, [pc, #276]	; (80087f0 <pvPortMalloc+0x188>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d869      	bhi.n	80087b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086e4:	4b43      	ldr	r3, [pc, #268]	; (80087f4 <pvPortMalloc+0x18c>)
 80086e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086e8:	4b42      	ldr	r3, [pc, #264]	; (80087f4 <pvPortMalloc+0x18c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ee:	e004      	b.n	80086fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d903      	bls.n	800870c <pvPortMalloc+0xa4>
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1f1      	bne.n	80086f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800870c:	4b36      	ldr	r3, [pc, #216]	; (80087e8 <pvPortMalloc+0x180>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008712:	429a      	cmp	r2, r3
 8008714:	d050      	beq.n	80087b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2208      	movs	r2, #8
 800871c:	4413      	add	r3, r2
 800871e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	2308      	movs	r3, #8
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	429a      	cmp	r2, r3
 8008736:	d91f      	bls.n	8008778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <pvPortMalloc+0xf8>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	613b      	str	r3, [r7, #16]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	1ad2      	subs	r2, r2, r3
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008772:	69b8      	ldr	r0, [r7, #24]
 8008774:	f000 f908 	bl	8008988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008778:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <pvPortMalloc+0x188>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <pvPortMalloc+0x188>)
 8008784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <pvPortMalloc+0x188>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <pvPortMalloc+0x190>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d203      	bcs.n	800879a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <pvPortMalloc+0x188>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a18      	ldr	r2, [pc, #96]	; (80087f8 <pvPortMalloc+0x190>)
 8008798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	4b13      	ldr	r3, [pc, #76]	; (80087ec <pvPortMalloc+0x184>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	431a      	orrs	r2, r3
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <pvPortMalloc+0x194>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3301      	adds	r3, #1
 80087b4:	4a11      	ldr	r2, [pc, #68]	; (80087fc <pvPortMalloc+0x194>)
 80087b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087b8:	f7ff f874 	bl	80078a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <pvPortMalloc+0x174>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	60fb      	str	r3, [r7, #12]
}
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <pvPortMalloc+0x172>
	return pvReturn;
 80087dc:	69fb      	ldr	r3, [r7, #28]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3728      	adds	r7, #40	; 0x28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20004368 	.word	0x20004368
 80087ec:	2000437c 	.word	0x2000437c
 80087f0:	2000436c 	.word	0x2000436c
 80087f4:	20004360 	.word	0x20004360
 80087f8:	20004370 	.word	0x20004370
 80087fc:	20004374 	.word	0x20004374

08008800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d04d      	beq.n	80088ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008812:	2308      	movs	r3, #8
 8008814:	425b      	negs	r3, r3
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4413      	add	r3, r2
 800881a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <vPortFree+0xb8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4013      	ands	r3, r2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <vPortFree+0x44>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	60fb      	str	r3, [r7, #12]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00a      	beq.n	8008862 <vPortFree+0x62>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60bb      	str	r3, [r7, #8]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	4b14      	ldr	r3, [pc, #80]	; (80088b8 <vPortFree+0xb8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01e      	beq.n	80088ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11a      	bne.n	80088ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <vPortFree+0xb8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	43db      	mvns	r3, r3
 8008882:	401a      	ands	r2, r3
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008888:	f7fe fffe 	bl	8007888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <vPortFree+0xbc>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4413      	add	r3, r2
 8008896:	4a09      	ldr	r2, [pc, #36]	; (80088bc <vPortFree+0xbc>)
 8008898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f000 f874 	bl	8008988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <vPortFree+0xc0>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <vPortFree+0xc0>)
 80088a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088aa:	f7fe fffb 	bl	80078a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088ae:	bf00      	nop
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	2000437c 	.word	0x2000437c
 80088bc:	2000436c 	.word	0x2000436c
 80088c0:	20004378 	.word	0x20004378

080088c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088d0:	4b27      	ldr	r3, [pc, #156]	; (8008970 <prvHeapInit+0xac>)
 80088d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00c      	beq.n	80088f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3307      	adds	r3, #7
 80088e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0307 	bic.w	r3, r3, #7
 80088ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <prvHeapInit+0xac>)
 80088f4:	4413      	add	r3, r2
 80088f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088fc:	4a1d      	ldr	r2, [pc, #116]	; (8008974 <prvHeapInit+0xb0>)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008902:	4b1c      	ldr	r3, [pc, #112]	; (8008974 <prvHeapInit+0xb0>)
 8008904:	2200      	movs	r2, #0
 8008906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008910:	2208      	movs	r2, #8
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a15      	ldr	r2, [pc, #84]	; (8008978 <prvHeapInit+0xb4>)
 8008924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <prvHeapInit+0xb4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2200      	movs	r2, #0
 800892c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800892e:	4b12      	ldr	r3, [pc, #72]	; (8008978 <prvHeapInit+0xb4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	1ad2      	subs	r2, r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008944:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <prvHeapInit+0xb4>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	4a0a      	ldr	r2, [pc, #40]	; (800897c <prvHeapInit+0xb8>)
 8008952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4a09      	ldr	r2, [pc, #36]	; (8008980 <prvHeapInit+0xbc>)
 800895a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvHeapInit+0xc0>)
 800895e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008962:	601a      	str	r2, [r3, #0]
}
 8008964:	bf00      	nop
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000760 	.word	0x20000760
 8008974:	20004360 	.word	0x20004360
 8008978:	20004368 	.word	0x20004368
 800897c:	20004370 	.word	0x20004370
 8008980:	2000436c 	.word	0x2000436c
 8008984:	2000437c 	.word	0x2000437c

08008988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008990:	4b28      	ldr	r3, [pc, #160]	; (8008a34 <prvInsertBlockIntoFreeList+0xac>)
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e002      	b.n	800899c <prvInsertBlockIntoFreeList+0x14>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d8f7      	bhi.n	8008996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d108      	bne.n	80089ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	441a      	add	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	441a      	add	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d118      	bne.n	8008a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <prvInsertBlockIntoFreeList+0xb0>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d00d      	beq.n	8008a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	441a      	add	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	e008      	b.n	8008a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <prvInsertBlockIntoFreeList+0xb0>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	e003      	b.n	8008a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d002      	beq.n	8008a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	20004360 	.word	0x20004360
 8008a38:	20004368 	.word	0x20004368

08008a3c <memset>:
 8008a3c:	4402      	add	r2, r0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d100      	bne.n	8008a46 <memset+0xa>
 8008a44:	4770      	bx	lr
 8008a46:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4a:	e7f9      	b.n	8008a40 <memset+0x4>

08008a4c <_reclaim_reent>:
 8008a4c:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <_reclaim_reent+0xa8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4283      	cmp	r3, r0
 8008a52:	b570      	push	{r4, r5, r6, lr}
 8008a54:	4604      	mov	r4, r0
 8008a56:	d04b      	beq.n	8008af0 <_reclaim_reent+0xa4>
 8008a58:	69c3      	ldr	r3, [r0, #28]
 8008a5a:	b143      	cbz	r3, 8008a6e <_reclaim_reent+0x22>
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d144      	bne.n	8008aec <_reclaim_reent+0xa0>
 8008a62:	69e3      	ldr	r3, [r4, #28]
 8008a64:	6819      	ldr	r1, [r3, #0]
 8008a66:	b111      	cbz	r1, 8008a6e <_reclaim_reent+0x22>
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 f871 	bl	8008b50 <_free_r>
 8008a6e:	6961      	ldr	r1, [r4, #20]
 8008a70:	b111      	cbz	r1, 8008a78 <_reclaim_reent+0x2c>
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f86c 	bl	8008b50 <_free_r>
 8008a78:	69e1      	ldr	r1, [r4, #28]
 8008a7a:	b111      	cbz	r1, 8008a82 <_reclaim_reent+0x36>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f867 	bl	8008b50 <_free_r>
 8008a82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008a84:	b111      	cbz	r1, 8008a8c <_reclaim_reent+0x40>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 f862 	bl	8008b50 <_free_r>
 8008a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8e:	b111      	cbz	r1, 8008a96 <_reclaim_reent+0x4a>
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f85d 	bl	8008b50 <_free_r>
 8008a96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a98:	b111      	cbz	r1, 8008aa0 <_reclaim_reent+0x54>
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 f858 	bl	8008b50 <_free_r>
 8008aa0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008aa2:	b111      	cbz	r1, 8008aaa <_reclaim_reent+0x5e>
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 f853 	bl	8008b50 <_free_r>
 8008aaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008aac:	b111      	cbz	r1, 8008ab4 <_reclaim_reent+0x68>
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 f84e 	bl	8008b50 <_free_r>
 8008ab4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008ab6:	b111      	cbz	r1, 8008abe <_reclaim_reent+0x72>
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 f849 	bl	8008b50 <_free_r>
 8008abe:	6a23      	ldr	r3, [r4, #32]
 8008ac0:	b1b3      	cbz	r3, 8008af0 <_reclaim_reent+0xa4>
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ac8:	4718      	bx	r3
 8008aca:	5949      	ldr	r1, [r1, r5]
 8008acc:	b941      	cbnz	r1, 8008ae0 <_reclaim_reent+0x94>
 8008ace:	3504      	adds	r5, #4
 8008ad0:	69e3      	ldr	r3, [r4, #28]
 8008ad2:	2d80      	cmp	r5, #128	; 0x80
 8008ad4:	68d9      	ldr	r1, [r3, #12]
 8008ad6:	d1f8      	bne.n	8008aca <_reclaim_reent+0x7e>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 f839 	bl	8008b50 <_free_r>
 8008ade:	e7c0      	b.n	8008a62 <_reclaim_reent+0x16>
 8008ae0:	680e      	ldr	r6, [r1, #0]
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 f834 	bl	8008b50 <_free_r>
 8008ae8:	4631      	mov	r1, r6
 8008aea:	e7ef      	b.n	8008acc <_reclaim_reent+0x80>
 8008aec:	2500      	movs	r5, #0
 8008aee:	e7ef      	b.n	8008ad0 <_reclaim_reent+0x84>
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
 8008af2:	bf00      	nop
 8008af4:	20000060 	.word	0x20000060

08008af8 <__errno>:
 8008af8:	4b01      	ldr	r3, [pc, #4]	; (8008b00 <__errno+0x8>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20000060 	.word	0x20000060

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4d0d      	ldr	r5, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2600      	movs	r6, #0
 8008b10:	42a6      	cmp	r6, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4d0b      	ldr	r5, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f001 f978 	bl	8009e0c <_init>
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2600      	movs	r6, #0
 8008b22:	42a6      	cmp	r6, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2c:	4798      	blx	r3
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b36:	4798      	blx	r3
 8008b38:	3601      	adds	r6, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	0800a038 	.word	0x0800a038
 8008b40:	0800a038 	.word	0x0800a038
 8008b44:	0800a038 	.word	0x0800a038
 8008b48:	0800a03c 	.word	0x0800a03c

08008b4c <__retarget_lock_acquire_recursive>:
 8008b4c:	4770      	bx	lr

08008b4e <__retarget_lock_release_recursive>:
 8008b4e:	4770      	bx	lr

08008b50 <_free_r>:
 8008b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b52:	2900      	cmp	r1, #0
 8008b54:	d044      	beq.n	8008be0 <_free_r+0x90>
 8008b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5a:	9001      	str	r0, [sp, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b62:	bfb8      	it	lt
 8008b64:	18e4      	addlt	r4, r4, r3
 8008b66:	f000 f83f 	bl	8008be8 <__malloc_lock>
 8008b6a:	4a1e      	ldr	r2, [pc, #120]	; (8008be4 <_free_r+0x94>)
 8008b6c:	9801      	ldr	r0, [sp, #4]
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	b933      	cbnz	r3, 8008b80 <_free_r+0x30>
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	6014      	str	r4, [r2, #0]
 8008b76:	b003      	add	sp, #12
 8008b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b7c:	f000 b83a 	b.w	8008bf4 <__malloc_unlock>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d908      	bls.n	8008b96 <_free_r+0x46>
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	1961      	adds	r1, r4, r5
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf01      	itttt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	1949      	addeq	r1, r1, r5
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	e7ed      	b.n	8008b72 <_free_r+0x22>
 8008b96:	461a      	mov	r2, r3
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b10b      	cbz	r3, 8008ba0 <_free_r+0x50>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d9fa      	bls.n	8008b96 <_free_r+0x46>
 8008ba0:	6811      	ldr	r1, [r2, #0]
 8008ba2:	1855      	adds	r5, r2, r1
 8008ba4:	42a5      	cmp	r5, r4
 8008ba6:	d10b      	bne.n	8008bc0 <_free_r+0x70>
 8008ba8:	6824      	ldr	r4, [r4, #0]
 8008baa:	4421      	add	r1, r4
 8008bac:	1854      	adds	r4, r2, r1
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	6011      	str	r1, [r2, #0]
 8008bb2:	d1e0      	bne.n	8008b76 <_free_r+0x26>
 8008bb4:	681c      	ldr	r4, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	6053      	str	r3, [r2, #4]
 8008bba:	440c      	add	r4, r1
 8008bbc:	6014      	str	r4, [r2, #0]
 8008bbe:	e7da      	b.n	8008b76 <_free_r+0x26>
 8008bc0:	d902      	bls.n	8008bc8 <_free_r+0x78>
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	e7d6      	b.n	8008b76 <_free_r+0x26>
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1961      	adds	r1, r4, r5
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf04      	itt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	bf04      	itt	eq
 8008bd8:	1949      	addeq	r1, r1, r5
 8008bda:	6021      	streq	r1, [r4, #0]
 8008bdc:	6054      	str	r4, [r2, #4]
 8008bde:	e7ca      	b.n	8008b76 <_free_r+0x26>
 8008be0:	b003      	add	sp, #12
 8008be2:	bd30      	pop	{r4, r5, pc}
 8008be4:	200044bc 	.word	0x200044bc

08008be8 <__malloc_lock>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__malloc_lock+0x8>)
 8008bea:	f7ff bfaf 	b.w	8008b4c <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	200044b8 	.word	0x200044b8

08008bf4 <__malloc_unlock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__malloc_unlock+0x8>)
 8008bf6:	f7ff bfaa 	b.w	8008b4e <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	200044b8 	.word	0x200044b8

08008c00 <pow>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	ed2d 8b02 	vpush	{d8}
 8008c06:	eeb0 8a40 	vmov.f32	s16, s0
 8008c0a:	eef0 8a60 	vmov.f32	s17, s1
 8008c0e:	ec55 4b11 	vmov	r4, r5, d1
 8008c12:	f000 fb21 	bl	8009258 <__ieee754_pow>
 8008c16:	4622      	mov	r2, r4
 8008c18:	462b      	mov	r3, r5
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	ec57 6b10 	vmov	r6, r7, d0
 8008c22:	f7f7 ff2b 	bl	8000a7c <__aeabi_dcmpun>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d13b      	bne.n	8008ca2 <pow+0xa2>
 8008c2a:	ec51 0b18 	vmov	r0, r1, d8
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	f7f7 fef1 	bl	8000a18 <__aeabi_dcmpeq>
 8008c36:	b1b8      	cbz	r0, 8008c68 <pow+0x68>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 feea 	bl	8000a18 <__aeabi_dcmpeq>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d146      	bne.n	8008cd6 <pow+0xd6>
 8008c48:	ec45 4b10 	vmov	d0, r4, r5
 8008c4c:	f000 fa1d 	bl	800908a <finite>
 8008c50:	b338      	cbz	r0, 8008ca2 <pow+0xa2>
 8008c52:	2200      	movs	r2, #0
 8008c54:	2300      	movs	r3, #0
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fee7 	bl	8000a2c <__aeabi_dcmplt>
 8008c5e:	b300      	cbz	r0, 8008ca2 <pow+0xa2>
 8008c60:	f7ff ff4a 	bl	8008af8 <__errno>
 8008c64:	2322      	movs	r3, #34	; 0x22
 8008c66:	e01b      	b.n	8008ca0 <pow+0xa0>
 8008c68:	ec47 6b10 	vmov	d0, r6, r7
 8008c6c:	f000 fa0d 	bl	800908a <finite>
 8008c70:	b9e0      	cbnz	r0, 8008cac <pow+0xac>
 8008c72:	eeb0 0a48 	vmov.f32	s0, s16
 8008c76:	eef0 0a68 	vmov.f32	s1, s17
 8008c7a:	f000 fa06 	bl	800908a <finite>
 8008c7e:	b1a8      	cbz	r0, 8008cac <pow+0xac>
 8008c80:	ec45 4b10 	vmov	d0, r4, r5
 8008c84:	f000 fa01 	bl	800908a <finite>
 8008c88:	b180      	cbz	r0, 8008cac <pow+0xac>
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 fef3 	bl	8000a7c <__aeabi_dcmpun>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0e2      	beq.n	8008c60 <pow+0x60>
 8008c9a:	f7ff ff2d 	bl	8008af8 <__errno>
 8008c9e:	2321      	movs	r3, #33	; 0x21
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	ecbd 8b02 	vpop	{d8}
 8008ca6:	ec47 6b10 	vmov	d0, r6, r7
 8008caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cac:	2200      	movs	r2, #0
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 feb0 	bl	8000a18 <__aeabi_dcmpeq>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d0f2      	beq.n	8008ca2 <pow+0xa2>
 8008cbc:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc0:	eef0 0a68 	vmov.f32	s1, s17
 8008cc4:	f000 f9e1 	bl	800908a <finite>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d0ea      	beq.n	8008ca2 <pow+0xa2>
 8008ccc:	ec45 4b10 	vmov	d0, r4, r5
 8008cd0:	f000 f9db 	bl	800908a <finite>
 8008cd4:	e7c3      	b.n	8008c5e <pow+0x5e>
 8008cd6:	4f01      	ldr	r7, [pc, #4]	; (8008cdc <pow+0xdc>)
 8008cd8:	2600      	movs	r6, #0
 8008cda:	e7e2      	b.n	8008ca2 <pow+0xa2>
 8008cdc:	3ff00000 	.word	0x3ff00000

08008ce0 <sqrt>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	ed2d 8b02 	vpush	{d8}
 8008ce6:	ec55 4b10 	vmov	r4, r5, d0
 8008cea:	f000 f9d9 	bl	80090a0 <__ieee754_sqrt>
 8008cee:	4622      	mov	r2, r4
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	eeb0 8a40 	vmov.f32	s16, s0
 8008cfa:	eef0 8a60 	vmov.f32	s17, s1
 8008cfe:	f7f7 febd 	bl	8000a7c <__aeabi_dcmpun>
 8008d02:	b990      	cbnz	r0, 8008d2a <sqrt+0x4a>
 8008d04:	2200      	movs	r2, #0
 8008d06:	2300      	movs	r3, #0
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f7f7 fe8e 	bl	8000a2c <__aeabi_dcmplt>
 8008d10:	b158      	cbz	r0, 8008d2a <sqrt+0x4a>
 8008d12:	f7ff fef1 	bl	8008af8 <__errno>
 8008d16:	2321      	movs	r3, #33	; 0x21
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	f7f7 fd3b 	bl	800079c <__aeabi_ddiv>
 8008d26:	ec41 0b18 	vmov	d8, r0, r1
 8008d2a:	eeb0 0a48 	vmov.f32	s0, s16
 8008d2e:	eef0 0a68 	vmov.f32	s1, s17
 8008d32:	ecbd 8b02 	vpop	{d8}
 8008d36:	bd38      	pop	{r3, r4, r5, pc}

08008d38 <atan>:
 8008d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	ec55 4b10 	vmov	r4, r5, d0
 8008d40:	4bc3      	ldr	r3, [pc, #780]	; (8009050 <atan+0x318>)
 8008d42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d46:	429e      	cmp	r6, r3
 8008d48:	46ab      	mov	fp, r5
 8008d4a:	dd18      	ble.n	8008d7e <atan+0x46>
 8008d4c:	4bc1      	ldr	r3, [pc, #772]	; (8009054 <atan+0x31c>)
 8008d4e:	429e      	cmp	r6, r3
 8008d50:	dc01      	bgt.n	8008d56 <atan+0x1e>
 8008d52:	d109      	bne.n	8008d68 <atan+0x30>
 8008d54:	b144      	cbz	r4, 8008d68 <atan+0x30>
 8008d56:	4622      	mov	r2, r4
 8008d58:	462b      	mov	r3, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 fa3d 	bl	80001dc <__adddf3>
 8008d62:	4604      	mov	r4, r0
 8008d64:	460d      	mov	r5, r1
 8008d66:	e006      	b.n	8008d76 <atan+0x3e>
 8008d68:	f1bb 0f00 	cmp.w	fp, #0
 8008d6c:	f300 8131 	bgt.w	8008fd2 <atan+0x29a>
 8008d70:	a59b      	add	r5, pc, #620	; (adr r5, 8008fe0 <atan+0x2a8>)
 8008d72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d76:	ec45 4b10 	vmov	d0, r4, r5
 8008d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	4bb6      	ldr	r3, [pc, #728]	; (8009058 <atan+0x320>)
 8008d80:	429e      	cmp	r6, r3
 8008d82:	dc14      	bgt.n	8008dae <atan+0x76>
 8008d84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008d88:	429e      	cmp	r6, r3
 8008d8a:	dc0d      	bgt.n	8008da8 <atan+0x70>
 8008d8c:	a396      	add	r3, pc, #600	; (adr r3, 8008fe8 <atan+0x2b0>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	ee10 0a10 	vmov	r0, s0
 8008d96:	4629      	mov	r1, r5
 8008d98:	f7f7 fa20 	bl	80001dc <__adddf3>
 8008d9c:	4baf      	ldr	r3, [pc, #700]	; (800905c <atan+0x324>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f7f7 fe62 	bl	8000a68 <__aeabi_dcmpgt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1e6      	bne.n	8008d76 <atan+0x3e>
 8008da8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008dac:	e02b      	b.n	8008e06 <atan+0xce>
 8008dae:	f000 f963 	bl	8009078 <fabs>
 8008db2:	4bab      	ldr	r3, [pc, #684]	; (8009060 <atan+0x328>)
 8008db4:	429e      	cmp	r6, r3
 8008db6:	ec55 4b10 	vmov	r4, r5, d0
 8008dba:	f300 80bf 	bgt.w	8008f3c <atan+0x204>
 8008dbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008dc2:	429e      	cmp	r6, r3
 8008dc4:	f300 80a0 	bgt.w	8008f08 <atan+0x1d0>
 8008dc8:	ee10 2a10 	vmov	r2, s0
 8008dcc:	ee10 0a10 	vmov	r0, s0
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7f7 fa02 	bl	80001dc <__adddf3>
 8008dd8:	4ba0      	ldr	r3, [pc, #640]	; (800905c <atan+0x324>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f7f7 f9fc 	bl	80001d8 <__aeabi_dsub>
 8008de0:	2200      	movs	r2, #0
 8008de2:	4606      	mov	r6, r0
 8008de4:	460f      	mov	r7, r1
 8008de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 f9f5 	bl	80001dc <__adddf3>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f7 fccf 	bl	800079c <__aeabi_ddiv>
 8008dfe:	f04f 0a00 	mov.w	sl, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	460d      	mov	r5, r1
 8008e06:	4622      	mov	r2, r4
 8008e08:	462b      	mov	r3, r5
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fb9b 	bl	8000548 <__aeabi_dmul>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4680      	mov	r8, r0
 8008e18:	4689      	mov	r9, r1
 8008e1a:	f7f7 fb95 	bl	8000548 <__aeabi_dmul>
 8008e1e:	a374      	add	r3, pc, #464	; (adr r3, 8008ff0 <atan+0x2b8>)
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f7f7 fb8e 	bl	8000548 <__aeabi_dmul>
 8008e2c:	a372      	add	r3, pc, #456	; (adr r3, 8008ff8 <atan+0x2c0>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 f9d3 	bl	80001dc <__adddf3>
 8008e36:	4632      	mov	r2, r6
 8008e38:	463b      	mov	r3, r7
 8008e3a:	f7f7 fb85 	bl	8000548 <__aeabi_dmul>
 8008e3e:	a370      	add	r3, pc, #448	; (adr r3, 8009000 <atan+0x2c8>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 f9ca 	bl	80001dc <__adddf3>
 8008e48:	4632      	mov	r2, r6
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	f7f7 fb7c 	bl	8000548 <__aeabi_dmul>
 8008e50:	a36d      	add	r3, pc, #436	; (adr r3, 8009008 <atan+0x2d0>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 f9c1 	bl	80001dc <__adddf3>
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	463b      	mov	r3, r7
 8008e5e:	f7f7 fb73 	bl	8000548 <__aeabi_dmul>
 8008e62:	a36b      	add	r3, pc, #428	; (adr r3, 8009010 <atan+0x2d8>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 f9b8 	bl	80001dc <__adddf3>
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	463b      	mov	r3, r7
 8008e70:	f7f7 fb6a 	bl	8000548 <__aeabi_dmul>
 8008e74:	a368      	add	r3, pc, #416	; (adr r3, 8009018 <atan+0x2e0>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 f9af 	bl	80001dc <__adddf3>
 8008e7e:	4642      	mov	r2, r8
 8008e80:	464b      	mov	r3, r9
 8008e82:	f7f7 fb61 	bl	8000548 <__aeabi_dmul>
 8008e86:	a366      	add	r3, pc, #408	; (adr r3, 8009020 <atan+0x2e8>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4689      	mov	r9, r1
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fb58 	bl	8000548 <__aeabi_dmul>
 8008e98:	a363      	add	r3, pc, #396	; (adr r3, 8009028 <atan+0x2f0>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 f99b 	bl	80001d8 <__aeabi_dsub>
 8008ea2:	4632      	mov	r2, r6
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	f7f7 fb4f 	bl	8000548 <__aeabi_dmul>
 8008eaa:	a361      	add	r3, pc, #388	; (adr r3, 8009030 <atan+0x2f8>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 f992 	bl	80001d8 <__aeabi_dsub>
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	f7f7 fb46 	bl	8000548 <__aeabi_dmul>
 8008ebc:	a35e      	add	r3, pc, #376	; (adr r3, 8009038 <atan+0x300>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 f989 	bl	80001d8 <__aeabi_dsub>
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	463b      	mov	r3, r7
 8008eca:	f7f7 fb3d 	bl	8000548 <__aeabi_dmul>
 8008ece:	a35c      	add	r3, pc, #368	; (adr r3, 8009040 <atan+0x308>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f7f7 f980 	bl	80001d8 <__aeabi_dsub>
 8008ed8:	4632      	mov	r2, r6
 8008eda:	463b      	mov	r3, r7
 8008edc:	f7f7 fb34 	bl	8000548 <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 f978 	bl	80001dc <__adddf3>
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f7f7 fb2a 	bl	8000548 <__aeabi_dmul>
 8008ef4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	d14b      	bne.n	8008f96 <atan+0x25e>
 8008efe:	4620      	mov	r0, r4
 8008f00:	4629      	mov	r1, r5
 8008f02:	f7f7 f969 	bl	80001d8 <__aeabi_dsub>
 8008f06:	e72c      	b.n	8008d62 <atan+0x2a>
 8008f08:	ee10 0a10 	vmov	r0, s0
 8008f0c:	4b53      	ldr	r3, [pc, #332]	; (800905c <atan+0x324>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4629      	mov	r1, r5
 8008f12:	f7f7 f961 	bl	80001d8 <__aeabi_dsub>
 8008f16:	4b51      	ldr	r3, [pc, #324]	; (800905c <atan+0x324>)
 8008f18:	4606      	mov	r6, r0
 8008f1a:	460f      	mov	r7, r1
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4620      	mov	r0, r4
 8008f20:	4629      	mov	r1, r5
 8008f22:	f7f7 f95b 	bl	80001dc <__adddf3>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 fc35 	bl	800079c <__aeabi_ddiv>
 8008f32:	f04f 0a01 	mov.w	sl, #1
 8008f36:	4604      	mov	r4, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	e764      	b.n	8008e06 <atan+0xce>
 8008f3c:	4b49      	ldr	r3, [pc, #292]	; (8009064 <atan+0x32c>)
 8008f3e:	429e      	cmp	r6, r3
 8008f40:	da1d      	bge.n	8008f7e <atan+0x246>
 8008f42:	ee10 0a10 	vmov	r0, s0
 8008f46:	4b48      	ldr	r3, [pc, #288]	; (8009068 <atan+0x330>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7f7 f944 	bl	80001d8 <__aeabi_dsub>
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <atan+0x330>)
 8008f52:	4606      	mov	r6, r0
 8008f54:	460f      	mov	r7, r1
 8008f56:	2200      	movs	r2, #0
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 faf4 	bl	8000548 <__aeabi_dmul>
 8008f60:	4b3e      	ldr	r3, [pc, #248]	; (800905c <atan+0x324>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	f7f7 f93a 	bl	80001dc <__adddf3>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 fc14 	bl	800079c <__aeabi_ddiv>
 8008f74:	f04f 0a02 	mov.w	sl, #2
 8008f78:	4604      	mov	r4, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	e743      	b.n	8008e06 <atan+0xce>
 8008f7e:	462b      	mov	r3, r5
 8008f80:	ee10 2a10 	vmov	r2, s0
 8008f84:	4939      	ldr	r1, [pc, #228]	; (800906c <atan+0x334>)
 8008f86:	2000      	movs	r0, #0
 8008f88:	f7f7 fc08 	bl	800079c <__aeabi_ddiv>
 8008f8c:	f04f 0a03 	mov.w	sl, #3
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	e737      	b.n	8008e06 <atan+0xce>
 8008f96:	4b36      	ldr	r3, [pc, #216]	; (8009070 <atan+0x338>)
 8008f98:	4e36      	ldr	r6, [pc, #216]	; (8009074 <atan+0x33c>)
 8008f9a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f919 	bl	80001d8 <__aeabi_dsub>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	f7f7 f915 	bl	80001d8 <__aeabi_dsub>
 8008fae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008fba:	f7f7 f90d 	bl	80001d8 <__aeabi_dsub>
 8008fbe:	f1bb 0f00 	cmp.w	fp, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	f6bf aed6 	bge.w	8008d76 <atan+0x3e>
 8008fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fce:	461d      	mov	r5, r3
 8008fd0:	e6d1      	b.n	8008d76 <atan+0x3e>
 8008fd2:	a51d      	add	r5, pc, #116	; (adr r5, 8009048 <atan+0x310>)
 8008fd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008fd8:	e6cd      	b.n	8008d76 <atan+0x3e>
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	54442d18 	.word	0x54442d18
 8008fe4:	bff921fb 	.word	0xbff921fb
 8008fe8:	8800759c 	.word	0x8800759c
 8008fec:	7e37e43c 	.word	0x7e37e43c
 8008ff0:	e322da11 	.word	0xe322da11
 8008ff4:	3f90ad3a 	.word	0x3f90ad3a
 8008ff8:	24760deb 	.word	0x24760deb
 8008ffc:	3fa97b4b 	.word	0x3fa97b4b
 8009000:	a0d03d51 	.word	0xa0d03d51
 8009004:	3fb10d66 	.word	0x3fb10d66
 8009008:	c54c206e 	.word	0xc54c206e
 800900c:	3fb745cd 	.word	0x3fb745cd
 8009010:	920083ff 	.word	0x920083ff
 8009014:	3fc24924 	.word	0x3fc24924
 8009018:	5555550d 	.word	0x5555550d
 800901c:	3fd55555 	.word	0x3fd55555
 8009020:	2c6a6c2f 	.word	0x2c6a6c2f
 8009024:	bfa2b444 	.word	0xbfa2b444
 8009028:	52defd9a 	.word	0x52defd9a
 800902c:	3fadde2d 	.word	0x3fadde2d
 8009030:	af749a6d 	.word	0xaf749a6d
 8009034:	3fb3b0f2 	.word	0x3fb3b0f2
 8009038:	fe231671 	.word	0xfe231671
 800903c:	3fbc71c6 	.word	0x3fbc71c6
 8009040:	9998ebc4 	.word	0x9998ebc4
 8009044:	3fc99999 	.word	0x3fc99999
 8009048:	54442d18 	.word	0x54442d18
 800904c:	3ff921fb 	.word	0x3ff921fb
 8009050:	440fffff 	.word	0x440fffff
 8009054:	7ff00000 	.word	0x7ff00000
 8009058:	3fdbffff 	.word	0x3fdbffff
 800905c:	3ff00000 	.word	0x3ff00000
 8009060:	3ff2ffff 	.word	0x3ff2ffff
 8009064:	40038000 	.word	0x40038000
 8009068:	3ff80000 	.word	0x3ff80000
 800906c:	bff00000 	.word	0xbff00000
 8009070:	08009fe0 	.word	0x08009fe0
 8009074:	08009fc0 	.word	0x08009fc0

08009078 <fabs>:
 8009078:	ec51 0b10 	vmov	r0, r1, d0
 800907c:	ee10 2a10 	vmov	r2, s0
 8009080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009084:	ec43 2b10 	vmov	d0, r2, r3
 8009088:	4770      	bx	lr

0800908a <finite>:
 800908a:	b082      	sub	sp, #8
 800908c:	ed8d 0b00 	vstr	d0, [sp]
 8009090:	9801      	ldr	r0, [sp, #4]
 8009092:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009096:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800909a:	0fc0      	lsrs	r0, r0, #31
 800909c:	b002      	add	sp, #8
 800909e:	4770      	bx	lr

080090a0 <__ieee754_sqrt>:
 80090a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	4e67      	ldr	r6, [pc, #412]	; (8009248 <__ieee754_sqrt+0x1a8>)
 80090aa:	43ae      	bics	r6, r5
 80090ac:	ee10 0a10 	vmov	r0, s0
 80090b0:	ee10 2a10 	vmov	r2, s0
 80090b4:	4629      	mov	r1, r5
 80090b6:	462b      	mov	r3, r5
 80090b8:	d10d      	bne.n	80090d6 <__ieee754_sqrt+0x36>
 80090ba:	f7f7 fa45 	bl	8000548 <__aeabi_dmul>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4620      	mov	r0, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 f889 	bl	80001dc <__adddf3>
 80090ca:	4604      	mov	r4, r0
 80090cc:	460d      	mov	r5, r1
 80090ce:	ec45 4b10 	vmov	d0, r4, r5
 80090d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	dc0b      	bgt.n	80090f2 <__ieee754_sqrt+0x52>
 80090da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090de:	4326      	orrs	r6, r4
 80090e0:	d0f5      	beq.n	80090ce <__ieee754_sqrt+0x2e>
 80090e2:	b135      	cbz	r5, 80090f2 <__ieee754_sqrt+0x52>
 80090e4:	f7f7 f878 	bl	80001d8 <__aeabi_dsub>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	f7f7 fb56 	bl	800079c <__aeabi_ddiv>
 80090f0:	e7eb      	b.n	80090ca <__ieee754_sqrt+0x2a>
 80090f2:	1509      	asrs	r1, r1, #20
 80090f4:	f000 808d 	beq.w	8009212 <__ieee754_sqrt+0x172>
 80090f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090fc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009104:	07c9      	lsls	r1, r1, #31
 8009106:	bf5c      	itt	pl
 8009108:	005b      	lslpl	r3, r3, #1
 800910a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800910e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009112:	bf58      	it	pl
 8009114:	0052      	lslpl	r2, r2, #1
 8009116:	2500      	movs	r5, #0
 8009118:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800911c:	1076      	asrs	r6, r6, #1
 800911e:	0052      	lsls	r2, r2, #1
 8009120:	f04f 0e16 	mov.w	lr, #22
 8009124:	46ac      	mov	ip, r5
 8009126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800912a:	eb0c 0001 	add.w	r0, ip, r1
 800912e:	4298      	cmp	r0, r3
 8009130:	bfde      	ittt	le
 8009132:	1a1b      	suble	r3, r3, r0
 8009134:	eb00 0c01 	addle.w	ip, r0, r1
 8009138:	186d      	addle	r5, r5, r1
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	f1be 0e01 	subs.w	lr, lr, #1
 8009140:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009144:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009148:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800914c:	d1ed      	bne.n	800912a <__ieee754_sqrt+0x8a>
 800914e:	4674      	mov	r4, lr
 8009150:	2720      	movs	r7, #32
 8009152:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009156:	4563      	cmp	r3, ip
 8009158:	eb01 000e 	add.w	r0, r1, lr
 800915c:	dc02      	bgt.n	8009164 <__ieee754_sqrt+0xc4>
 800915e:	d113      	bne.n	8009188 <__ieee754_sqrt+0xe8>
 8009160:	4290      	cmp	r0, r2
 8009162:	d811      	bhi.n	8009188 <__ieee754_sqrt+0xe8>
 8009164:	2800      	cmp	r0, #0
 8009166:	eb00 0e01 	add.w	lr, r0, r1
 800916a:	da57      	bge.n	800921c <__ieee754_sqrt+0x17c>
 800916c:	f1be 0f00 	cmp.w	lr, #0
 8009170:	db54      	blt.n	800921c <__ieee754_sqrt+0x17c>
 8009172:	f10c 0801 	add.w	r8, ip, #1
 8009176:	eba3 030c 	sub.w	r3, r3, ip
 800917a:	4290      	cmp	r0, r2
 800917c:	bf88      	it	hi
 800917e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009182:	1a12      	subs	r2, r2, r0
 8009184:	440c      	add	r4, r1
 8009186:	46c4      	mov	ip, r8
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	3f01      	subs	r7, #1
 800918c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009190:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009194:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009198:	d1dd      	bne.n	8009156 <__ieee754_sqrt+0xb6>
 800919a:	4313      	orrs	r3, r2
 800919c:	d01b      	beq.n	80091d6 <__ieee754_sqrt+0x136>
 800919e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800924c <__ieee754_sqrt+0x1ac>
 80091a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009250 <__ieee754_sqrt+0x1b0>
 80091a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80091aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80091ae:	f7f7 f813 	bl	80001d8 <__aeabi_dsub>
 80091b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 fc3f 	bl	8000a40 <__aeabi_dcmple>
 80091c2:	b140      	cbz	r0, 80091d6 <__ieee754_sqrt+0x136>
 80091c4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80091c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80091cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80091d0:	d126      	bne.n	8009220 <__ieee754_sqrt+0x180>
 80091d2:	3501      	adds	r5, #1
 80091d4:	463c      	mov	r4, r7
 80091d6:	106a      	asrs	r2, r5, #1
 80091d8:	0863      	lsrs	r3, r4, #1
 80091da:	07e9      	lsls	r1, r5, #31
 80091dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091e4:	bf48      	it	mi
 80091e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091ea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80091ee:	461c      	mov	r4, r3
 80091f0:	e76d      	b.n	80090ce <__ieee754_sqrt+0x2e>
 80091f2:	0ad3      	lsrs	r3, r2, #11
 80091f4:	3815      	subs	r0, #21
 80091f6:	0552      	lsls	r2, r2, #21
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0fa      	beq.n	80091f2 <__ieee754_sqrt+0x152>
 80091fc:	02dc      	lsls	r4, r3, #11
 80091fe:	d50a      	bpl.n	8009216 <__ieee754_sqrt+0x176>
 8009200:	f1c1 0420 	rsb	r4, r1, #32
 8009204:	fa22 f404 	lsr.w	r4, r2, r4
 8009208:	1e4d      	subs	r5, r1, #1
 800920a:	408a      	lsls	r2, r1
 800920c:	4323      	orrs	r3, r4
 800920e:	1b41      	subs	r1, r0, r5
 8009210:	e772      	b.n	80090f8 <__ieee754_sqrt+0x58>
 8009212:	4608      	mov	r0, r1
 8009214:	e7f0      	b.n	80091f8 <__ieee754_sqrt+0x158>
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	3101      	adds	r1, #1
 800921a:	e7ef      	b.n	80091fc <__ieee754_sqrt+0x15c>
 800921c:	46e0      	mov	r8, ip
 800921e:	e7aa      	b.n	8009176 <__ieee754_sqrt+0xd6>
 8009220:	f7f6 ffdc 	bl	80001dc <__adddf3>
 8009224:	e9da 8900 	ldrd	r8, r9, [sl]
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4640      	mov	r0, r8
 800922e:	4649      	mov	r1, r9
 8009230:	f7f7 fbfc 	bl	8000a2c <__aeabi_dcmplt>
 8009234:	b120      	cbz	r0, 8009240 <__ieee754_sqrt+0x1a0>
 8009236:	1ca0      	adds	r0, r4, #2
 8009238:	bf08      	it	eq
 800923a:	3501      	addeq	r5, #1
 800923c:	3402      	adds	r4, #2
 800923e:	e7ca      	b.n	80091d6 <__ieee754_sqrt+0x136>
 8009240:	3401      	adds	r4, #1
 8009242:	f024 0401 	bic.w	r4, r4, #1
 8009246:	e7c6      	b.n	80091d6 <__ieee754_sqrt+0x136>
 8009248:	7ff00000 	.word	0x7ff00000
 800924c:	20000068 	.word	0x20000068
 8009250:	20000070 	.word	0x20000070
 8009254:	00000000 	.word	0x00000000

08009258 <__ieee754_pow>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	ed2d 8b06 	vpush	{d8-d10}
 8009260:	b089      	sub	sp, #36	; 0x24
 8009262:	ed8d 1b00 	vstr	d1, [sp]
 8009266:	e9dd 2900 	ldrd	r2, r9, [sp]
 800926a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800926e:	ea58 0102 	orrs.w	r1, r8, r2
 8009272:	ec57 6b10 	vmov	r6, r7, d0
 8009276:	d115      	bne.n	80092a4 <__ieee754_pow+0x4c>
 8009278:	19b3      	adds	r3, r6, r6
 800927a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800927e:	4152      	adcs	r2, r2
 8009280:	4299      	cmp	r1, r3
 8009282:	4b89      	ldr	r3, [pc, #548]	; (80094a8 <__ieee754_pow+0x250>)
 8009284:	4193      	sbcs	r3, r2
 8009286:	f080 84d1 	bcs.w	8009c2c <__ieee754_pow+0x9d4>
 800928a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	f7f6 ffa3 	bl	80001dc <__adddf3>
 8009296:	ec41 0b10 	vmov	d0, r0, r1
 800929a:	b009      	add	sp, #36	; 0x24
 800929c:	ecbd 8b06 	vpop	{d8-d10}
 80092a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a4:	4b81      	ldr	r3, [pc, #516]	; (80094ac <__ieee754_pow+0x254>)
 80092a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80092aa:	429c      	cmp	r4, r3
 80092ac:	ee10 aa10 	vmov	sl, s0
 80092b0:	463d      	mov	r5, r7
 80092b2:	dc06      	bgt.n	80092c2 <__ieee754_pow+0x6a>
 80092b4:	d101      	bne.n	80092ba <__ieee754_pow+0x62>
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d1e7      	bne.n	800928a <__ieee754_pow+0x32>
 80092ba:	4598      	cmp	r8, r3
 80092bc:	dc01      	bgt.n	80092c2 <__ieee754_pow+0x6a>
 80092be:	d10f      	bne.n	80092e0 <__ieee754_pow+0x88>
 80092c0:	b172      	cbz	r2, 80092e0 <__ieee754_pow+0x88>
 80092c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80092c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80092ca:	ea55 050a 	orrs.w	r5, r5, sl
 80092ce:	d1dc      	bne.n	800928a <__ieee754_pow+0x32>
 80092d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092d4:	18db      	adds	r3, r3, r3
 80092d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80092da:	4152      	adcs	r2, r2
 80092dc:	429d      	cmp	r5, r3
 80092de:	e7d0      	b.n	8009282 <__ieee754_pow+0x2a>
 80092e0:	2d00      	cmp	r5, #0
 80092e2:	da3b      	bge.n	800935c <__ieee754_pow+0x104>
 80092e4:	4b72      	ldr	r3, [pc, #456]	; (80094b0 <__ieee754_pow+0x258>)
 80092e6:	4598      	cmp	r8, r3
 80092e8:	dc51      	bgt.n	800938e <__ieee754_pow+0x136>
 80092ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80092ee:	4598      	cmp	r8, r3
 80092f0:	f340 84ab 	ble.w	8009c4a <__ieee754_pow+0x9f2>
 80092f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80092f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092fc:	2b14      	cmp	r3, #20
 80092fe:	dd0f      	ble.n	8009320 <__ieee754_pow+0xc8>
 8009300:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009304:	fa22 f103 	lsr.w	r1, r2, r3
 8009308:	fa01 f303 	lsl.w	r3, r1, r3
 800930c:	4293      	cmp	r3, r2
 800930e:	f040 849c 	bne.w	8009c4a <__ieee754_pow+0x9f2>
 8009312:	f001 0101 	and.w	r1, r1, #1
 8009316:	f1c1 0302 	rsb	r3, r1, #2
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	b182      	cbz	r2, 8009340 <__ieee754_pow+0xe8>
 800931e:	e05f      	b.n	80093e0 <__ieee754_pow+0x188>
 8009320:	2a00      	cmp	r2, #0
 8009322:	d15b      	bne.n	80093dc <__ieee754_pow+0x184>
 8009324:	f1c3 0314 	rsb	r3, r3, #20
 8009328:	fa48 f103 	asr.w	r1, r8, r3
 800932c:	fa01 f303 	lsl.w	r3, r1, r3
 8009330:	4543      	cmp	r3, r8
 8009332:	f040 8487 	bne.w	8009c44 <__ieee754_pow+0x9ec>
 8009336:	f001 0101 	and.w	r1, r1, #1
 800933a:	f1c1 0302 	rsb	r3, r1, #2
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	4b5c      	ldr	r3, [pc, #368]	; (80094b4 <__ieee754_pow+0x25c>)
 8009342:	4598      	cmp	r8, r3
 8009344:	d132      	bne.n	80093ac <__ieee754_pow+0x154>
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	f280 8477 	bge.w	8009c3c <__ieee754_pow+0x9e4>
 800934e:	4959      	ldr	r1, [pc, #356]	; (80094b4 <__ieee754_pow+0x25c>)
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	2000      	movs	r0, #0
 8009356:	f7f7 fa21 	bl	800079c <__aeabi_ddiv>
 800935a:	e79c      	b.n	8009296 <__ieee754_pow+0x3e>
 800935c:	2300      	movs	r3, #0
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	2a00      	cmp	r2, #0
 8009362:	d13d      	bne.n	80093e0 <__ieee754_pow+0x188>
 8009364:	4b51      	ldr	r3, [pc, #324]	; (80094ac <__ieee754_pow+0x254>)
 8009366:	4598      	cmp	r8, r3
 8009368:	d1ea      	bne.n	8009340 <__ieee754_pow+0xe8>
 800936a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800936e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009372:	ea53 030a 	orrs.w	r3, r3, sl
 8009376:	f000 8459 	beq.w	8009c2c <__ieee754_pow+0x9d4>
 800937a:	4b4f      	ldr	r3, [pc, #316]	; (80094b8 <__ieee754_pow+0x260>)
 800937c:	429c      	cmp	r4, r3
 800937e:	dd08      	ble.n	8009392 <__ieee754_pow+0x13a>
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	f2c0 8456 	blt.w	8009c34 <__ieee754_pow+0x9dc>
 8009388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800938c:	e783      	b.n	8009296 <__ieee754_pow+0x3e>
 800938e:	2302      	movs	r3, #2
 8009390:	e7e5      	b.n	800935e <__ieee754_pow+0x106>
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	f04f 0000 	mov.w	r0, #0
 800939a:	f04f 0100 	mov.w	r1, #0
 800939e:	f6bf af7a 	bge.w	8009296 <__ieee754_pow+0x3e>
 80093a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80093a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80093aa:	e774      	b.n	8009296 <__ieee754_pow+0x3e>
 80093ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80093b0:	d106      	bne.n	80093c0 <__ieee754_pow+0x168>
 80093b2:	4632      	mov	r2, r6
 80093b4:	463b      	mov	r3, r7
 80093b6:	4630      	mov	r0, r6
 80093b8:	4639      	mov	r1, r7
 80093ba:	f7f7 f8c5 	bl	8000548 <__aeabi_dmul>
 80093be:	e76a      	b.n	8009296 <__ieee754_pow+0x3e>
 80093c0:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <__ieee754_pow+0x264>)
 80093c2:	4599      	cmp	r9, r3
 80093c4:	d10c      	bne.n	80093e0 <__ieee754_pow+0x188>
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	db0a      	blt.n	80093e0 <__ieee754_pow+0x188>
 80093ca:	ec47 6b10 	vmov	d0, r6, r7
 80093ce:	b009      	add	sp, #36	; 0x24
 80093d0:	ecbd 8b06 	vpop	{d8-d10}
 80093d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	f7ff be62 	b.w	80090a0 <__ieee754_sqrt>
 80093dc:	2300      	movs	r3, #0
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	ec47 6b10 	vmov	d0, r6, r7
 80093e4:	f7ff fe48 	bl	8009078 <fabs>
 80093e8:	ec51 0b10 	vmov	r0, r1, d0
 80093ec:	f1ba 0f00 	cmp.w	sl, #0
 80093f0:	d129      	bne.n	8009446 <__ieee754_pow+0x1ee>
 80093f2:	b124      	cbz	r4, 80093fe <__ieee754_pow+0x1a6>
 80093f4:	4b2f      	ldr	r3, [pc, #188]	; (80094b4 <__ieee754_pow+0x25c>)
 80093f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d123      	bne.n	8009446 <__ieee754_pow+0x1ee>
 80093fe:	f1b9 0f00 	cmp.w	r9, #0
 8009402:	da05      	bge.n	8009410 <__ieee754_pow+0x1b8>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	2000      	movs	r0, #0
 800940a:	492a      	ldr	r1, [pc, #168]	; (80094b4 <__ieee754_pow+0x25c>)
 800940c:	f7f7 f9c6 	bl	800079c <__aeabi_ddiv>
 8009410:	2d00      	cmp	r5, #0
 8009412:	f6bf af40 	bge.w	8009296 <__ieee754_pow+0x3e>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800941c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009420:	431c      	orrs	r4, r3
 8009422:	d108      	bne.n	8009436 <__ieee754_pow+0x1de>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4610      	mov	r0, r2
 800942a:	4619      	mov	r1, r3
 800942c:	f7f6 fed4 	bl	80001d8 <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	e78f      	b.n	8009356 <__ieee754_pow+0xfe>
 8009436:	9b04      	ldr	r3, [sp, #16]
 8009438:	2b01      	cmp	r3, #1
 800943a:	f47f af2c 	bne.w	8009296 <__ieee754_pow+0x3e>
 800943e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009442:	4619      	mov	r1, r3
 8009444:	e727      	b.n	8009296 <__ieee754_pow+0x3e>
 8009446:	0feb      	lsrs	r3, r5, #31
 8009448:	3b01      	subs	r3, #1
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	9a06      	ldr	r2, [sp, #24]
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	4313      	orrs	r3, r2
 8009452:	d102      	bne.n	800945a <__ieee754_pow+0x202>
 8009454:	4632      	mov	r2, r6
 8009456:	463b      	mov	r3, r7
 8009458:	e7e6      	b.n	8009428 <__ieee754_pow+0x1d0>
 800945a:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <__ieee754_pow+0x268>)
 800945c:	4598      	cmp	r8, r3
 800945e:	f340 80fb 	ble.w	8009658 <__ieee754_pow+0x400>
 8009462:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009466:	4598      	cmp	r8, r3
 8009468:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <__ieee754_pow+0x260>)
 800946a:	dd0c      	ble.n	8009486 <__ieee754_pow+0x22e>
 800946c:	429c      	cmp	r4, r3
 800946e:	dc0f      	bgt.n	8009490 <__ieee754_pow+0x238>
 8009470:	f1b9 0f00 	cmp.w	r9, #0
 8009474:	da0f      	bge.n	8009496 <__ieee754_pow+0x23e>
 8009476:	2000      	movs	r0, #0
 8009478:	b009      	add	sp, #36	; 0x24
 800947a:	ecbd 8b06 	vpop	{d8-d10}
 800947e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009482:	f000 bc3a 	b.w	8009cfa <__math_oflow>
 8009486:	429c      	cmp	r4, r3
 8009488:	dbf2      	blt.n	8009470 <__ieee754_pow+0x218>
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <__ieee754_pow+0x25c>)
 800948c:	429c      	cmp	r4, r3
 800948e:	dd19      	ble.n	80094c4 <__ieee754_pow+0x26c>
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	dcef      	bgt.n	8009476 <__ieee754_pow+0x21e>
 8009496:	2000      	movs	r0, #0
 8009498:	b009      	add	sp, #36	; 0x24
 800949a:	ecbd 8b06 	vpop	{d8-d10}
 800949e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a2:	f000 bc21 	b.w	8009ce8 <__math_uflow>
 80094a6:	bf00      	nop
 80094a8:	fff00000 	.word	0xfff00000
 80094ac:	7ff00000 	.word	0x7ff00000
 80094b0:	433fffff 	.word	0x433fffff
 80094b4:	3ff00000 	.word	0x3ff00000
 80094b8:	3fefffff 	.word	0x3fefffff
 80094bc:	3fe00000 	.word	0x3fe00000
 80094c0:	41e00000 	.word	0x41e00000
 80094c4:	4b60      	ldr	r3, [pc, #384]	; (8009648 <__ieee754_pow+0x3f0>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	f7f6 fe86 	bl	80001d8 <__aeabi_dsub>
 80094cc:	a354      	add	r3, pc, #336	; (adr r3, 8009620 <__ieee754_pow+0x3c8>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	4604      	mov	r4, r0
 80094d4:	460d      	mov	r5, r1
 80094d6:	f7f7 f837 	bl	8000548 <__aeabi_dmul>
 80094da:	a353      	add	r3, pc, #332	; (adr r3, 8009628 <__ieee754_pow+0x3d0>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	4606      	mov	r6, r0
 80094e2:	460f      	mov	r7, r1
 80094e4:	4620      	mov	r0, r4
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7f7 f82e 	bl	8000548 <__aeabi_dmul>
 80094ec:	4b57      	ldr	r3, [pc, #348]	; (800964c <__ieee754_pow+0x3f4>)
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	2200      	movs	r2, #0
 80094f4:	4620      	mov	r0, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	f7f7 f826 	bl	8000548 <__aeabi_dmul>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	a14b      	add	r1, pc, #300	; (adr r1, 8009630 <__ieee754_pow+0x3d8>)
 8009502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009506:	f7f6 fe67 	bl	80001d8 <__aeabi_dsub>
 800950a:	4622      	mov	r2, r4
 800950c:	462b      	mov	r3, r5
 800950e:	f7f7 f81b 	bl	8000548 <__aeabi_dmul>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	2000      	movs	r0, #0
 8009518:	494d      	ldr	r1, [pc, #308]	; (8009650 <__ieee754_pow+0x3f8>)
 800951a:	f7f6 fe5d 	bl	80001d8 <__aeabi_dsub>
 800951e:	4622      	mov	r2, r4
 8009520:	4680      	mov	r8, r0
 8009522:	4689      	mov	r9, r1
 8009524:	462b      	mov	r3, r5
 8009526:	4620      	mov	r0, r4
 8009528:	4629      	mov	r1, r5
 800952a:	f7f7 f80d 	bl	8000548 <__aeabi_dmul>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f7 f807 	bl	8000548 <__aeabi_dmul>
 800953a:	a33f      	add	r3, pc, #252	; (adr r3, 8009638 <__ieee754_pow+0x3e0>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f7 f802 	bl	8000548 <__aeabi_dmul>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4650      	mov	r0, sl
 800954a:	4659      	mov	r1, fp
 800954c:	f7f6 fe44 	bl	80001d8 <__aeabi_dsub>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4680      	mov	r8, r0
 8009556:	4689      	mov	r9, r1
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f6 fe3e 	bl	80001dc <__adddf3>
 8009560:	2000      	movs	r0, #0
 8009562:	4632      	mov	r2, r6
 8009564:	463b      	mov	r3, r7
 8009566:	4604      	mov	r4, r0
 8009568:	460d      	mov	r5, r1
 800956a:	f7f6 fe35 	bl	80001d8 <__aeabi_dsub>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f6 fe2f 	bl	80001d8 <__aeabi_dsub>
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	9a06      	ldr	r2, [sp, #24]
 800957e:	3b01      	subs	r3, #1
 8009580:	4313      	orrs	r3, r2
 8009582:	4682      	mov	sl, r0
 8009584:	468b      	mov	fp, r1
 8009586:	f040 81e7 	bne.w	8009958 <__ieee754_pow+0x700>
 800958a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009640 <__ieee754_pow+0x3e8>
 800958e:	eeb0 8a47 	vmov.f32	s16, s14
 8009592:	eef0 8a67 	vmov.f32	s17, s15
 8009596:	e9dd 6700 	ldrd	r6, r7, [sp]
 800959a:	2600      	movs	r6, #0
 800959c:	4632      	mov	r2, r6
 800959e:	463b      	mov	r3, r7
 80095a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095a4:	f7f6 fe18 	bl	80001d8 <__aeabi_dsub>
 80095a8:	4622      	mov	r2, r4
 80095aa:	462b      	mov	r3, r5
 80095ac:	f7f6 ffcc 	bl	8000548 <__aeabi_dmul>
 80095b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095b4:	4680      	mov	r8, r0
 80095b6:	4689      	mov	r9, r1
 80095b8:	4650      	mov	r0, sl
 80095ba:	4659      	mov	r1, fp
 80095bc:	f7f6 ffc4 	bl	8000548 <__aeabi_dmul>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4640      	mov	r0, r8
 80095c6:	4649      	mov	r1, r9
 80095c8:	f7f6 fe08 	bl	80001dc <__adddf3>
 80095cc:	4632      	mov	r2, r6
 80095ce:	463b      	mov	r3, r7
 80095d0:	4680      	mov	r8, r0
 80095d2:	4689      	mov	r9, r1
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f6 ffb6 	bl	8000548 <__aeabi_dmul>
 80095dc:	460b      	mov	r3, r1
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	4602      	mov	r2, r0
 80095e4:	4649      	mov	r1, r9
 80095e6:	4640      	mov	r0, r8
 80095e8:	f7f6 fdf8 	bl	80001dc <__adddf3>
 80095ec:	4b19      	ldr	r3, [pc, #100]	; (8009654 <__ieee754_pow+0x3fc>)
 80095ee:	4299      	cmp	r1, r3
 80095f0:	ec45 4b19 	vmov	d9, r4, r5
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	468b      	mov	fp, r1
 80095fa:	f340 82f0 	ble.w	8009bde <__ieee754_pow+0x986>
 80095fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009602:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009606:	4303      	orrs	r3, r0
 8009608:	f000 81e4 	beq.w	80099d4 <__ieee754_pow+0x77c>
 800960c:	ec51 0b18 	vmov	r0, r1, d8
 8009610:	2200      	movs	r2, #0
 8009612:	2300      	movs	r3, #0
 8009614:	f7f7 fa0a 	bl	8000a2c <__aeabi_dcmplt>
 8009618:	3800      	subs	r0, #0
 800961a:	bf18      	it	ne
 800961c:	2001      	movne	r0, #1
 800961e:	e72b      	b.n	8009478 <__ieee754_pow+0x220>
 8009620:	60000000 	.word	0x60000000
 8009624:	3ff71547 	.word	0x3ff71547
 8009628:	f85ddf44 	.word	0xf85ddf44
 800962c:	3e54ae0b 	.word	0x3e54ae0b
 8009630:	55555555 	.word	0x55555555
 8009634:	3fd55555 	.word	0x3fd55555
 8009638:	652b82fe 	.word	0x652b82fe
 800963c:	3ff71547 	.word	0x3ff71547
 8009640:	00000000 	.word	0x00000000
 8009644:	bff00000 	.word	0xbff00000
 8009648:	3ff00000 	.word	0x3ff00000
 800964c:	3fd00000 	.word	0x3fd00000
 8009650:	3fe00000 	.word	0x3fe00000
 8009654:	408fffff 	.word	0x408fffff
 8009658:	4bd5      	ldr	r3, [pc, #852]	; (80099b0 <__ieee754_pow+0x758>)
 800965a:	402b      	ands	r3, r5
 800965c:	2200      	movs	r2, #0
 800965e:	b92b      	cbnz	r3, 800966c <__ieee754_pow+0x414>
 8009660:	4bd4      	ldr	r3, [pc, #848]	; (80099b4 <__ieee754_pow+0x75c>)
 8009662:	f7f6 ff71 	bl	8000548 <__aeabi_dmul>
 8009666:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800966a:	460c      	mov	r4, r1
 800966c:	1523      	asrs	r3, r4, #20
 800966e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009672:	4413      	add	r3, r2
 8009674:	9305      	str	r3, [sp, #20]
 8009676:	4bd0      	ldr	r3, [pc, #832]	; (80099b8 <__ieee754_pow+0x760>)
 8009678:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800967c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009680:	429c      	cmp	r4, r3
 8009682:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009686:	dd08      	ble.n	800969a <__ieee754_pow+0x442>
 8009688:	4bcc      	ldr	r3, [pc, #816]	; (80099bc <__ieee754_pow+0x764>)
 800968a:	429c      	cmp	r4, r3
 800968c:	f340 8162 	ble.w	8009954 <__ieee754_pow+0x6fc>
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	3301      	adds	r3, #1
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800969a:	2400      	movs	r4, #0
 800969c:	00e3      	lsls	r3, r4, #3
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	4bc7      	ldr	r3, [pc, #796]	; (80099c0 <__ieee754_pow+0x768>)
 80096a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096a6:	ed93 7b00 	vldr	d7, [r3]
 80096aa:	4629      	mov	r1, r5
 80096ac:	ec53 2b17 	vmov	r2, r3, d7
 80096b0:	eeb0 9a47 	vmov.f32	s18, s14
 80096b4:	eef0 9a67 	vmov.f32	s19, s15
 80096b8:	4682      	mov	sl, r0
 80096ba:	f7f6 fd8d 	bl	80001d8 <__aeabi_dsub>
 80096be:	4652      	mov	r2, sl
 80096c0:	4606      	mov	r6, r0
 80096c2:	460f      	mov	r7, r1
 80096c4:	462b      	mov	r3, r5
 80096c6:	ec51 0b19 	vmov	r0, r1, d9
 80096ca:	f7f6 fd87 	bl	80001dc <__adddf3>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	2000      	movs	r0, #0
 80096d4:	49bb      	ldr	r1, [pc, #748]	; (80099c4 <__ieee754_pow+0x76c>)
 80096d6:	f7f7 f861 	bl	800079c <__aeabi_ddiv>
 80096da:	ec41 0b1a 	vmov	d10, r0, r1
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4630      	mov	r0, r6
 80096e4:	4639      	mov	r1, r7
 80096e6:	f7f6 ff2f 	bl	8000548 <__aeabi_dmul>
 80096ea:	2300      	movs	r3, #0
 80096ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f0:	9302      	str	r3, [sp, #8]
 80096f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80096f6:	46ab      	mov	fp, r5
 80096f8:	106d      	asrs	r5, r5, #1
 80096fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80096fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009702:	ec41 0b18 	vmov	d8, r0, r1
 8009706:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800970a:	2200      	movs	r2, #0
 800970c:	4640      	mov	r0, r8
 800970e:	4649      	mov	r1, r9
 8009710:	4614      	mov	r4, r2
 8009712:	461d      	mov	r5, r3
 8009714:	f7f6 ff18 	bl	8000548 <__aeabi_dmul>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 fd5a 	bl	80001d8 <__aeabi_dsub>
 8009724:	ec53 2b19 	vmov	r2, r3, d9
 8009728:	4606      	mov	r6, r0
 800972a:	460f      	mov	r7, r1
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7f6 fd52 	bl	80001d8 <__aeabi_dsub>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4650      	mov	r0, sl
 800973a:	4659      	mov	r1, fp
 800973c:	f7f6 fd4c 	bl	80001d8 <__aeabi_dsub>
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	f7f6 ff00 	bl	8000548 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f7f6 fd42 	bl	80001d8 <__aeabi_dsub>
 8009754:	ec53 2b1a 	vmov	r2, r3, d10
 8009758:	f7f6 fef6 	bl	8000548 <__aeabi_dmul>
 800975c:	ec53 2b18 	vmov	r2, r3, d8
 8009760:	ec41 0b19 	vmov	d9, r0, r1
 8009764:	ec51 0b18 	vmov	r0, r1, d8
 8009768:	f7f6 feee 	bl	8000548 <__aeabi_dmul>
 800976c:	a37c      	add	r3, pc, #496	; (adr r3, 8009960 <__ieee754_pow+0x708>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	4604      	mov	r4, r0
 8009774:	460d      	mov	r5, r1
 8009776:	f7f6 fee7 	bl	8000548 <__aeabi_dmul>
 800977a:	a37b      	add	r3, pc, #492	; (adr r3, 8009968 <__ieee754_pow+0x710>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 fd2c 	bl	80001dc <__adddf3>
 8009784:	4622      	mov	r2, r4
 8009786:	462b      	mov	r3, r5
 8009788:	f7f6 fede 	bl	8000548 <__aeabi_dmul>
 800978c:	a378      	add	r3, pc, #480	; (adr r3, 8009970 <__ieee754_pow+0x718>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 fd23 	bl	80001dc <__adddf3>
 8009796:	4622      	mov	r2, r4
 8009798:	462b      	mov	r3, r5
 800979a:	f7f6 fed5 	bl	8000548 <__aeabi_dmul>
 800979e:	a376      	add	r3, pc, #472	; (adr r3, 8009978 <__ieee754_pow+0x720>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 fd1a 	bl	80001dc <__adddf3>
 80097a8:	4622      	mov	r2, r4
 80097aa:	462b      	mov	r3, r5
 80097ac:	f7f6 fecc 	bl	8000548 <__aeabi_dmul>
 80097b0:	a373      	add	r3, pc, #460	; (adr r3, 8009980 <__ieee754_pow+0x728>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f7f6 fd11 	bl	80001dc <__adddf3>
 80097ba:	4622      	mov	r2, r4
 80097bc:	462b      	mov	r3, r5
 80097be:	f7f6 fec3 	bl	8000548 <__aeabi_dmul>
 80097c2:	a371      	add	r3, pc, #452	; (adr r3, 8009988 <__ieee754_pow+0x730>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 fd08 	bl	80001dc <__adddf3>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4606      	mov	r6, r0
 80097d0:	460f      	mov	r7, r1
 80097d2:	462b      	mov	r3, r5
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 feb6 	bl	8000548 <__aeabi_dmul>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	4630      	mov	r0, r6
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f6 feb0 	bl	8000548 <__aeabi_dmul>
 80097e8:	4642      	mov	r2, r8
 80097ea:	4604      	mov	r4, r0
 80097ec:	460d      	mov	r5, r1
 80097ee:	464b      	mov	r3, r9
 80097f0:	ec51 0b18 	vmov	r0, r1, d8
 80097f4:	f7f6 fcf2 	bl	80001dc <__adddf3>
 80097f8:	ec53 2b19 	vmov	r2, r3, d9
 80097fc:	f7f6 fea4 	bl	8000548 <__aeabi_dmul>
 8009800:	4622      	mov	r2, r4
 8009802:	462b      	mov	r3, r5
 8009804:	f7f6 fcea 	bl	80001dc <__adddf3>
 8009808:	4642      	mov	r2, r8
 800980a:	4682      	mov	sl, r0
 800980c:	468b      	mov	fp, r1
 800980e:	464b      	mov	r3, r9
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f6 fe98 	bl	8000548 <__aeabi_dmul>
 8009818:	4b6b      	ldr	r3, [pc, #428]	; (80099c8 <__ieee754_pow+0x770>)
 800981a:	2200      	movs	r2, #0
 800981c:	4606      	mov	r6, r0
 800981e:	460f      	mov	r7, r1
 8009820:	f7f6 fcdc 	bl	80001dc <__adddf3>
 8009824:	4652      	mov	r2, sl
 8009826:	465b      	mov	r3, fp
 8009828:	f7f6 fcd8 	bl	80001dc <__adddf3>
 800982c:	2000      	movs	r0, #0
 800982e:	4604      	mov	r4, r0
 8009830:	460d      	mov	r5, r1
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fe85 	bl	8000548 <__aeabi_dmul>
 800983e:	4b62      	ldr	r3, [pc, #392]	; (80099c8 <__ieee754_pow+0x770>)
 8009840:	4680      	mov	r8, r0
 8009842:	4689      	mov	r9, r1
 8009844:	2200      	movs	r2, #0
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f6 fcc5 	bl	80001d8 <__aeabi_dsub>
 800984e:	4632      	mov	r2, r6
 8009850:	463b      	mov	r3, r7
 8009852:	f7f6 fcc1 	bl	80001d8 <__aeabi_dsub>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4650      	mov	r0, sl
 800985c:	4659      	mov	r1, fp
 800985e:	f7f6 fcbb 	bl	80001d8 <__aeabi_dsub>
 8009862:	ec53 2b18 	vmov	r2, r3, d8
 8009866:	f7f6 fe6f 	bl	8000548 <__aeabi_dmul>
 800986a:	4622      	mov	r2, r4
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	462b      	mov	r3, r5
 8009872:	ec51 0b19 	vmov	r0, r1, d9
 8009876:	f7f6 fe67 	bl	8000548 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f6 fcab 	bl	80001dc <__adddf3>
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4640      	mov	r0, r8
 8009890:	4649      	mov	r1, r9
 8009892:	f7f6 fca3 	bl	80001dc <__adddf3>
 8009896:	a33e      	add	r3, pc, #248	; (adr r3, 8009990 <__ieee754_pow+0x738>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	2000      	movs	r0, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	460d      	mov	r5, r1
 80098a2:	f7f6 fe51 	bl	8000548 <__aeabi_dmul>
 80098a6:	4642      	mov	r2, r8
 80098a8:	ec41 0b18 	vmov	d8, r0, r1
 80098ac:	464b      	mov	r3, r9
 80098ae:	4620      	mov	r0, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7f6 fc91 	bl	80001d8 <__aeabi_dsub>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4630      	mov	r0, r6
 80098bc:	4639      	mov	r1, r7
 80098be:	f7f6 fc8b 	bl	80001d8 <__aeabi_dsub>
 80098c2:	a335      	add	r3, pc, #212	; (adr r3, 8009998 <__ieee754_pow+0x740>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fe3e 	bl	8000548 <__aeabi_dmul>
 80098cc:	a334      	add	r3, pc, #208	; (adr r3, 80099a0 <__ieee754_pow+0x748>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f6 fe35 	bl	8000548 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f6 fc79 	bl	80001dc <__adddf3>
 80098ea:	9a07      	ldr	r2, [sp, #28]
 80098ec:	4b37      	ldr	r3, [pc, #220]	; (80099cc <__ieee754_pow+0x774>)
 80098ee:	4413      	add	r3, r2
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fc72 	bl	80001dc <__adddf3>
 80098f8:	4682      	mov	sl, r0
 80098fa:	9805      	ldr	r0, [sp, #20]
 80098fc:	468b      	mov	fp, r1
 80098fe:	f7f6 fdb9 	bl	8000474 <__aeabi_i2d>
 8009902:	9a07      	ldr	r2, [sp, #28]
 8009904:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <__ieee754_pow+0x778>)
 8009906:	4413      	add	r3, r2
 8009908:	e9d3 8900 	ldrd	r8, r9, [r3]
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	4652      	mov	r2, sl
 8009912:	465b      	mov	r3, fp
 8009914:	ec51 0b18 	vmov	r0, r1, d8
 8009918:	f7f6 fc60 	bl	80001dc <__adddf3>
 800991c:	4642      	mov	r2, r8
 800991e:	464b      	mov	r3, r9
 8009920:	f7f6 fc5c 	bl	80001dc <__adddf3>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	f7f6 fc58 	bl	80001dc <__adddf3>
 800992c:	2000      	movs	r0, #0
 800992e:	4632      	mov	r2, r6
 8009930:	463b      	mov	r3, r7
 8009932:	4604      	mov	r4, r0
 8009934:	460d      	mov	r5, r1
 8009936:	f7f6 fc4f 	bl	80001d8 <__aeabi_dsub>
 800993a:	4642      	mov	r2, r8
 800993c:	464b      	mov	r3, r9
 800993e:	f7f6 fc4b 	bl	80001d8 <__aeabi_dsub>
 8009942:	ec53 2b18 	vmov	r2, r3, d8
 8009946:	f7f6 fc47 	bl	80001d8 <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4650      	mov	r0, sl
 8009950:	4659      	mov	r1, fp
 8009952:	e610      	b.n	8009576 <__ieee754_pow+0x31e>
 8009954:	2401      	movs	r4, #1
 8009956:	e6a1      	b.n	800969c <__ieee754_pow+0x444>
 8009958:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80099a8 <__ieee754_pow+0x750>
 800995c:	e617      	b.n	800958e <__ieee754_pow+0x336>
 800995e:	bf00      	nop
 8009960:	4a454eef 	.word	0x4a454eef
 8009964:	3fca7e28 	.word	0x3fca7e28
 8009968:	93c9db65 	.word	0x93c9db65
 800996c:	3fcd864a 	.word	0x3fcd864a
 8009970:	a91d4101 	.word	0xa91d4101
 8009974:	3fd17460 	.word	0x3fd17460
 8009978:	518f264d 	.word	0x518f264d
 800997c:	3fd55555 	.word	0x3fd55555
 8009980:	db6fabff 	.word	0xdb6fabff
 8009984:	3fdb6db6 	.word	0x3fdb6db6
 8009988:	33333303 	.word	0x33333303
 800998c:	3fe33333 	.word	0x3fe33333
 8009990:	e0000000 	.word	0xe0000000
 8009994:	3feec709 	.word	0x3feec709
 8009998:	dc3a03fd 	.word	0xdc3a03fd
 800999c:	3feec709 	.word	0x3feec709
 80099a0:	145b01f5 	.word	0x145b01f5
 80099a4:	be3e2fe0 	.word	0xbe3e2fe0
 80099a8:	00000000 	.word	0x00000000
 80099ac:	3ff00000 	.word	0x3ff00000
 80099b0:	7ff00000 	.word	0x7ff00000
 80099b4:	43400000 	.word	0x43400000
 80099b8:	0003988e 	.word	0x0003988e
 80099bc:	000bb679 	.word	0x000bb679
 80099c0:	0800a000 	.word	0x0800a000
 80099c4:	3ff00000 	.word	0x3ff00000
 80099c8:	40080000 	.word	0x40080000
 80099cc:	0800a020 	.word	0x0800a020
 80099d0:	0800a010 	.word	0x0800a010
 80099d4:	a3b3      	add	r3, pc, #716	; (adr r3, 8009ca4 <__ieee754_pow+0xa4c>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	f7f6 fbfd 	bl	80001dc <__adddf3>
 80099e2:	4622      	mov	r2, r4
 80099e4:	ec41 0b1a 	vmov	d10, r0, r1
 80099e8:	462b      	mov	r3, r5
 80099ea:	4630      	mov	r0, r6
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f6 fbf3 	bl	80001d8 <__aeabi_dsub>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	ec51 0b1a 	vmov	r0, r1, d10
 80099fa:	f7f7 f835 	bl	8000a68 <__aeabi_dcmpgt>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f47f ae04 	bne.w	800960c <__ieee754_pow+0x3b4>
 8009a04:	4aa2      	ldr	r2, [pc, #648]	; (8009c90 <__ieee754_pow+0xa38>)
 8009a06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	f340 8107 	ble.w	8009c1e <__ieee754_pow+0x9c6>
 8009a10:	151b      	asrs	r3, r3, #20
 8009a12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009a16:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009a1a:	fa4a fa03 	asr.w	sl, sl, r3
 8009a1e:	44da      	add	sl, fp
 8009a20:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009a24:	489b      	ldr	r0, [pc, #620]	; (8009c94 <__ieee754_pow+0xa3c>)
 8009a26:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009a2a:	4108      	asrs	r0, r1
 8009a2c:	ea00 030a 	and.w	r3, r0, sl
 8009a30:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009a34:	f1c1 0114 	rsb	r1, r1, #20
 8009a38:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009a3c:	fa4a fa01 	asr.w	sl, sl, r1
 8009a40:	f1bb 0f00 	cmp.w	fp, #0
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	bfb8      	it	lt
 8009a4e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009a52:	f7f6 fbc1 	bl	80001d8 <__aeabi_dsub>
 8009a56:	ec41 0b19 	vmov	d9, r0, r1
 8009a5a:	4642      	mov	r2, r8
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	ec51 0b19 	vmov	r0, r1, d9
 8009a62:	f7f6 fbbb 	bl	80001dc <__adddf3>
 8009a66:	a37a      	add	r3, pc, #488	; (adr r3, 8009c50 <__ieee754_pow+0x9f8>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	4604      	mov	r4, r0
 8009a70:	460d      	mov	r5, r1
 8009a72:	f7f6 fd69 	bl	8000548 <__aeabi_dmul>
 8009a76:	ec53 2b19 	vmov	r2, r3, d9
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	4620      	mov	r0, r4
 8009a80:	4629      	mov	r1, r5
 8009a82:	f7f6 fba9 	bl	80001d8 <__aeabi_dsub>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4640      	mov	r0, r8
 8009a8c:	4649      	mov	r1, r9
 8009a8e:	f7f6 fba3 	bl	80001d8 <__aeabi_dsub>
 8009a92:	a371      	add	r3, pc, #452	; (adr r3, 8009c58 <__ieee754_pow+0xa00>)
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f6 fd56 	bl	8000548 <__aeabi_dmul>
 8009a9c:	a370      	add	r3, pc, #448	; (adr r3, 8009c60 <__ieee754_pow+0xa08>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7f6 fd4d 	bl	8000548 <__aeabi_dmul>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fb91 	bl	80001dc <__adddf3>
 8009aba:	4604      	mov	r4, r0
 8009abc:	460d      	mov	r5, r1
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	f7f6 fb89 	bl	80001dc <__adddf3>
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	4680      	mov	r8, r0
 8009ad0:	4689      	mov	r9, r1
 8009ad2:	f7f6 fb81 	bl	80001d8 <__aeabi_dsub>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	f7f6 fb7b 	bl	80001d8 <__aeabi_dsub>
 8009ae2:	4642      	mov	r2, r8
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	460f      	mov	r7, r1
 8009ae8:	464b      	mov	r3, r9
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f6 fd2b 	bl	8000548 <__aeabi_dmul>
 8009af2:	a35d      	add	r3, pc, #372	; (adr r3, 8009c68 <__ieee754_pow+0xa10>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	4604      	mov	r4, r0
 8009afa:	460d      	mov	r5, r1
 8009afc:	f7f6 fd24 	bl	8000548 <__aeabi_dmul>
 8009b00:	a35b      	add	r3, pc, #364	; (adr r3, 8009c70 <__ieee754_pow+0xa18>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fb67 	bl	80001d8 <__aeabi_dsub>
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	f7f6 fd1b 	bl	8000548 <__aeabi_dmul>
 8009b12:	a359      	add	r3, pc, #356	; (adr r3, 8009c78 <__ieee754_pow+0xa20>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fb60 	bl	80001dc <__adddf3>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	462b      	mov	r3, r5
 8009b20:	f7f6 fd12 	bl	8000548 <__aeabi_dmul>
 8009b24:	a356      	add	r3, pc, #344	; (adr r3, 8009c80 <__ieee754_pow+0xa28>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fb55 	bl	80001d8 <__aeabi_dsub>
 8009b2e:	4622      	mov	r2, r4
 8009b30:	462b      	mov	r3, r5
 8009b32:	f7f6 fd09 	bl	8000548 <__aeabi_dmul>
 8009b36:	a354      	add	r3, pc, #336	; (adr r3, 8009c88 <__ieee754_pow+0xa30>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 fb4e 	bl	80001dc <__adddf3>
 8009b40:	4622      	mov	r2, r4
 8009b42:	462b      	mov	r3, r5
 8009b44:	f7f6 fd00 	bl	8000548 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f6 fb42 	bl	80001d8 <__aeabi_dsub>
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 fcf2 	bl	8000548 <__aeabi_dmul>
 8009b64:	2200      	movs	r2, #0
 8009b66:	ec41 0b19 	vmov	d9, r0, r1
 8009b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 fb31 	bl	80001d8 <__aeabi_dsub>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	ec51 0b19 	vmov	r0, r1, d9
 8009b7e:	f7f6 fe0d 	bl	800079c <__aeabi_ddiv>
 8009b82:	4632      	mov	r2, r6
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	463b      	mov	r3, r7
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 fcdb 	bl	8000548 <__aeabi_dmul>
 8009b92:	4632      	mov	r2, r6
 8009b94:	463b      	mov	r3, r7
 8009b96:	f7f6 fb21 	bl	80001dc <__adddf3>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7f6 fb19 	bl	80001d8 <__aeabi_dsub>
 8009ba6:	4642      	mov	r2, r8
 8009ba8:	464b      	mov	r3, r9
 8009baa:	f7f6 fb15 	bl	80001d8 <__aeabi_dsub>
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	4939      	ldr	r1, [pc, #228]	; (8009c98 <__ieee754_pow+0xa40>)
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	f7f6 fb0f 	bl	80001d8 <__aeabi_dsub>
 8009bba:	ec41 0b10 	vmov	d0, r0, r1
 8009bbe:	ee10 3a90 	vmov	r3, s1
 8009bc2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bca:	da2b      	bge.n	8009c24 <__ieee754_pow+0x9cc>
 8009bcc:	4650      	mov	r0, sl
 8009bce:	f000 f89f 	bl	8009d10 <scalbn>
 8009bd2:	ec51 0b10 	vmov	r0, r1, d0
 8009bd6:	ec53 2b18 	vmov	r2, r3, d8
 8009bda:	f7ff bbee 	b.w	80093ba <__ieee754_pow+0x162>
 8009bde:	4b2f      	ldr	r3, [pc, #188]	; (8009c9c <__ieee754_pow+0xa44>)
 8009be0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009be4:	429e      	cmp	r6, r3
 8009be6:	f77f af0d 	ble.w	8009a04 <__ieee754_pow+0x7ac>
 8009bea:	4b2d      	ldr	r3, [pc, #180]	; (8009ca0 <__ieee754_pow+0xa48>)
 8009bec:	440b      	add	r3, r1
 8009bee:	4303      	orrs	r3, r0
 8009bf0:	d009      	beq.n	8009c06 <__ieee754_pow+0x9ae>
 8009bf2:	ec51 0b18 	vmov	r0, r1, d8
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f7f6 ff17 	bl	8000a2c <__aeabi_dcmplt>
 8009bfe:	3800      	subs	r0, #0
 8009c00:	bf18      	it	ne
 8009c02:	2001      	movne	r0, #1
 8009c04:	e448      	b.n	8009498 <__ieee754_pow+0x240>
 8009c06:	4622      	mov	r2, r4
 8009c08:	462b      	mov	r3, r5
 8009c0a:	f7f6 fae5 	bl	80001d8 <__aeabi_dsub>
 8009c0e:	4642      	mov	r2, r8
 8009c10:	464b      	mov	r3, r9
 8009c12:	f7f6 ff1f 	bl	8000a54 <__aeabi_dcmpge>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f43f aef4 	beq.w	8009a04 <__ieee754_pow+0x7ac>
 8009c1c:	e7e9      	b.n	8009bf2 <__ieee754_pow+0x99a>
 8009c1e:	f04f 0a00 	mov.w	sl, #0
 8009c22:	e71a      	b.n	8009a5a <__ieee754_pow+0x802>
 8009c24:	ec51 0b10 	vmov	r0, r1, d0
 8009c28:	4619      	mov	r1, r3
 8009c2a:	e7d4      	b.n	8009bd6 <__ieee754_pow+0x97e>
 8009c2c:	491a      	ldr	r1, [pc, #104]	; (8009c98 <__ieee754_pow+0xa40>)
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f7ff bb31 	b.w	8009296 <__ieee754_pow+0x3e>
 8009c34:	2000      	movs	r0, #0
 8009c36:	2100      	movs	r1, #0
 8009c38:	f7ff bb2d 	b.w	8009296 <__ieee754_pow+0x3e>
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7ff bb29 	b.w	8009296 <__ieee754_pow+0x3e>
 8009c44:	9204      	str	r2, [sp, #16]
 8009c46:	f7ff bb7b 	b.w	8009340 <__ieee754_pow+0xe8>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f7ff bb65 	b.w	800931a <__ieee754_pow+0xc2>
 8009c50:	00000000 	.word	0x00000000
 8009c54:	3fe62e43 	.word	0x3fe62e43
 8009c58:	fefa39ef 	.word	0xfefa39ef
 8009c5c:	3fe62e42 	.word	0x3fe62e42
 8009c60:	0ca86c39 	.word	0x0ca86c39
 8009c64:	be205c61 	.word	0xbe205c61
 8009c68:	72bea4d0 	.word	0x72bea4d0
 8009c6c:	3e663769 	.word	0x3e663769
 8009c70:	c5d26bf1 	.word	0xc5d26bf1
 8009c74:	3ebbbd41 	.word	0x3ebbbd41
 8009c78:	af25de2c 	.word	0xaf25de2c
 8009c7c:	3f11566a 	.word	0x3f11566a
 8009c80:	16bebd93 	.word	0x16bebd93
 8009c84:	3f66c16c 	.word	0x3f66c16c
 8009c88:	5555553e 	.word	0x5555553e
 8009c8c:	3fc55555 	.word	0x3fc55555
 8009c90:	3fe00000 	.word	0x3fe00000
 8009c94:	fff00000 	.word	0xfff00000
 8009c98:	3ff00000 	.word	0x3ff00000
 8009c9c:	4090cbff 	.word	0x4090cbff
 8009ca0:	3f6f3400 	.word	0x3f6f3400
 8009ca4:	652b82fe 	.word	0x652b82fe
 8009ca8:	3c971547 	.word	0x3c971547

08009cac <with_errno>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	4604      	mov	r4, r0
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	4616      	mov	r6, r2
 8009cb4:	f7fe ff20 	bl	8008af8 <__errno>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	6006      	str	r6, [r0, #0]
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}

08009cc0 <xflow>:
 8009cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	b108      	cbz	r0, 8009ccc <xflow+0xc>
 8009cc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8009cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 fc36 	bl	8000548 <__aeabi_dmul>
 8009cdc:	2222      	movs	r2, #34	; 0x22
 8009cde:	b003      	add	sp, #12
 8009ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ce4:	f7ff bfe2 	b.w	8009cac <with_errno>

08009ce8 <__math_uflow>:
 8009ce8:	b508      	push	{r3, lr}
 8009cea:	2200      	movs	r2, #0
 8009cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cf0:	f7ff ffe6 	bl	8009cc0 <xflow>
 8009cf4:	ec41 0b10 	vmov	d0, r0, r1
 8009cf8:	bd08      	pop	{r3, pc}

08009cfa <__math_oflow>:
 8009cfa:	b508      	push	{r3, lr}
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009d02:	f7ff ffdd 	bl	8009cc0 <xflow>
 8009d06:	ec41 0b10 	vmov	d0, r0, r1
 8009d0a:	bd08      	pop	{r3, pc}
 8009d0c:	0000      	movs	r0, r0
	...

08009d10 <scalbn>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	ec55 4b10 	vmov	r4, r5, d0
 8009d16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	b999      	cbnz	r1, 8009d48 <scalbn+0x38>
 8009d20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d24:	4323      	orrs	r3, r4
 8009d26:	d03f      	beq.n	8009da8 <scalbn+0x98>
 8009d28:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <scalbn+0xf0>)
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	ee10 0a10 	vmov	r0, s0
 8009d30:	2200      	movs	r2, #0
 8009d32:	f7f6 fc09 	bl	8000548 <__aeabi_dmul>
 8009d36:	4b33      	ldr	r3, [pc, #204]	; (8009e04 <scalbn+0xf4>)
 8009d38:	429e      	cmp	r6, r3
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	da10      	bge.n	8009d62 <scalbn+0x52>
 8009d40:	a327      	add	r3, pc, #156	; (adr r3, 8009de0 <scalbn+0xd0>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	e01f      	b.n	8009d88 <scalbn+0x78>
 8009d48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009d4c:	4291      	cmp	r1, r2
 8009d4e:	d10c      	bne.n	8009d6a <scalbn+0x5a>
 8009d50:	ee10 2a10 	vmov	r2, s0
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7f6 fa40 	bl	80001dc <__adddf3>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	e022      	b.n	8009da8 <scalbn+0x98>
 8009d62:	460b      	mov	r3, r1
 8009d64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009d68:	3936      	subs	r1, #54	; 0x36
 8009d6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009d6e:	4296      	cmp	r6, r2
 8009d70:	dd0d      	ble.n	8009d8e <scalbn+0x7e>
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	a11c      	add	r1, pc, #112	; (adr r1, 8009de8 <scalbn+0xd8>)
 8009d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d7a:	da02      	bge.n	8009d82 <scalbn+0x72>
 8009d7c:	a11c      	add	r1, pc, #112	; (adr r1, 8009df0 <scalbn+0xe0>)
 8009d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d82:	a319      	add	r3, pc, #100	; (adr r3, 8009de8 <scalbn+0xd8>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f7f6 fbde 	bl	8000548 <__aeabi_dmul>
 8009d8c:	e7e6      	b.n	8009d5c <scalbn+0x4c>
 8009d8e:	1872      	adds	r2, r6, r1
 8009d90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009d94:	428a      	cmp	r2, r1
 8009d96:	dcec      	bgt.n	8009d72 <scalbn+0x62>
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	dd08      	ble.n	8009dae <scalbn+0x9e>
 8009d9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009da0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009da4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009da8:	ec45 4b10 	vmov	d0, r4, r5
 8009dac:	bd70      	pop	{r4, r5, r6, pc}
 8009dae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009db2:	da08      	bge.n	8009dc6 <scalbn+0xb6>
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	a10a      	add	r1, pc, #40	; (adr r1, 8009de0 <scalbn+0xd0>)
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	dac0      	bge.n	8009d40 <scalbn+0x30>
 8009dbe:	a10e      	add	r1, pc, #56	; (adr r1, 8009df8 <scalbn+0xe8>)
 8009dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc4:	e7bc      	b.n	8009d40 <scalbn+0x30>
 8009dc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dca:	3236      	adds	r2, #54	; 0x36
 8009dcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009dd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <scalbn+0xf8>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	e7d5      	b.n	8009d88 <scalbn+0x78>
 8009ddc:	f3af 8000 	nop.w
 8009de0:	c2f8f359 	.word	0xc2f8f359
 8009de4:	01a56e1f 	.word	0x01a56e1f
 8009de8:	8800759c 	.word	0x8800759c
 8009dec:	7e37e43c 	.word	0x7e37e43c
 8009df0:	8800759c 	.word	0x8800759c
 8009df4:	fe37e43c 	.word	0xfe37e43c
 8009df8:	c2f8f359 	.word	0xc2f8f359
 8009dfc:	81a56e1f 	.word	0x81a56e1f
 8009e00:	43500000 	.word	0x43500000
 8009e04:	ffff3cb0 	.word	0xffff3cb0
 8009e08:	3c900000 	.word	0x3c900000

08009e0c <_init>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

08009e18 <_fini>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr
